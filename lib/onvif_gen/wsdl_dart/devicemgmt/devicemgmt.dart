/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';

@JsonSerializable()
class GetServices {
  /// Indicates if the service capabilities (untyped) should be included in the response.
  @JsonKey(name: 'IncludeCapability')
  final bool includeCapability;
  GetServices({
    required this.includeCapability,
  });
}

@JsonSerializable()
class GetServicesResponse {
  /// Each Service element contains information about one service.
  @JsonKey(name: 'Service')
  final Service service;
  GetServicesResponse({
    required this.service,
  });
}

@JsonSerializable()
class Service {
  /// Namespace of the service being described. This parameter allows to match the service capabilities to the service. Note that only one set of capabilities is supported per namespace.
  @JsonKey(name: 'Namespace')
  final String namespace;

  /// The transport addresses where the service can be reached. The scheme and IP part shall match the one used in the request (i.e. the GetServices request).
  @JsonKey(name: 'XAddr')
  final String xAddr;

  /// The version of the service (not the ONVIF core spec version).
  @JsonKey(name: 'Version')
  final OnvifVersion version;
  Service({
    required this.namespace,
    required this.xAddr,
    required this.version,
  });
}

class GetServiceCapabilities {}

@JsonSerializable()
class GetServiceCapabilitiesResponse {
  /// The capabilities for the device service is returned in the Capabilities element.
  @JsonKey(name: 'Capabilities')
  final DeviceServiceCapabilities capabilities;
  GetServiceCapabilitiesResponse({
    required this.capabilities,
  });
}

@JsonSerializable()
class DeviceServiceCapabilities {
  /// Network capabilities.
  @JsonKey(name: 'Network')
  final NetworkCapabilities network;

  /// Security capabilities.
  @JsonKey(name: 'Security')
  final SecurityCapabilities security;

  /// System capabilities.
  @JsonKey(name: 'System')
  final SystemCapabilities system;

  /// Capabilities that do not fit in any of the other categories.
  @JsonKey(name: 'Misc')
  final MiscCapabilities? misc;
  DeviceServiceCapabilities({
    required this.network,
    required this.security,
    required this.system,
    this.misc,
  });
}

@JsonSerializable()
class NetworkCapabilities {
  /// Indicates support for IP filtering.
  @JsonKey(name: 'IPFilter')
  final bool iPFilter;

  /// Indicates support for zeroconf.
  @JsonKey(name: 'ZeroConfiguration')
  final bool zeroConfiguration;

  /// Indicates support for IPv6.
  @JsonKey(name: 'IPVersion6')
  final bool iPVersion6;

  /// Indicates support for dynamic DNS configuration.
  @JsonKey(name: 'DynDNS')
  final bool dynDNS;

  /// Indicates support for IEEE 802.11 configuration.
  @JsonKey(name: 'Dot11Configuration')
  final bool dot11Configuration;

  /// Indicates the maximum number of Dot1X configurations supported by the device
  @JsonKey(name: 'Dot1XConfigurations')
  final int dot1XConfigurations;

  /// Indicates support for retrieval of hostname from DHCP.
  @JsonKey(name: 'HostnameFromDHCP')
  final bool hostnameFromDHCP;

  /// Maximum number of NTP servers supported by the devices SetNTP command.
  @JsonKey(name: 'NTP')
  final int nTP;

  /// Indicates support for Stateful IPv6 DHCP.
  @JsonKey(name: 'DHCPv6')
  final bool dHCPv6;
  NetworkCapabilities({
    required this.iPFilter,
    required this.zeroConfiguration,
    required this.iPVersion6,
    required this.dynDNS,
    required this.dot11Configuration,
    required this.dot1XConfigurations,
    required this.hostnameFromDHCP,
    required this.nTP,
    required this.dHCPv6,
  });
}

typedef EAPMethodTypes = List<int>;

@JsonSerializable()
class SecurityCapabilities {
  /// Indicates support for TLS 1.0.
  @JsonKey(name: 'TLS1.0')
  final bool tLS1_0;

  /// Indicates support for TLS 1.1.
  @JsonKey(name: 'TLS1.1')
  final bool tLS1_1;

  /// Indicates support for TLS 1.2.
  @JsonKey(name: 'TLS1.2')
  final bool tLS1_2;

  /// Indicates support for onboard key generation.
  @JsonKey(name: 'OnboardKeyGeneration')
  final bool onboardKeyGeneration;

  /// Indicates support for access policy configuration.
  @JsonKey(name: 'AccessPolicyConfig')
  final bool accessPolicyConfig;

  /// Indicates support for the ONVIF default access policy.
  @JsonKey(name: 'DefaultAccessPolicy')
  final bool defaultAccessPolicy;

  /// Indicates support for IEEE 802.1X configuration.
  @JsonKey(name: 'Dot1X')
  final bool dot1X;

  /// Indicates support for remote user configuration. Used when accessing another device.
  @JsonKey(name: 'RemoteUserHandling')
  final bool remoteUserHandling;

  /// Indicates support for WS-Security X.509 token.
  @JsonKey(name: 'X.509Token')
  final bool x_509Token;

  /// Indicates support for WS-Security SAML token.
  @JsonKey(name: 'SAMLToken')
  final bool sAMLToken;

  /// Indicates support for WS-Security Kerberos token.
  @JsonKey(name: 'KerberosToken')
  final bool kerberosToken;

  /// Indicates support for WS-Security Username token.
  @JsonKey(name: 'UsernameToken')
  final bool usernameToken;

  /// Indicates support for WS over HTTP digest authenticated communication layer.
  @JsonKey(name: 'HttpDigest')
  final bool httpDigest;

  /// Indicates support for WS-Security REL token.
  @JsonKey(name: 'RELToken')
  final bool rELToken;

  /// EAP Methods supported by the device. The int values refer to the IANA EAP Registry.
  @JsonKey(name: 'SupportedEAPMethods')
  final EAPMethodTypes supportedEAPMethods;

  /// The maximum number of users that the device supports.
  @JsonKey(name: 'MaxUsers')
  final int maxUsers;

  /// Maximum number of characters supported for the username by CreateUsers.
  @JsonKey(name: 'MaxUserNameLength')
  final int maxUserNameLength;

  /// Maximum number of characters supported for the password by CreateUsers and SetUser.
  @JsonKey(name: 'MaxPasswordLength')
  final int maxPasswordLength;
  SecurityCapabilities({
    required this.tLS1_0,
    required this.tLS1_1,
    required this.tLS1_2,
    required this.onboardKeyGeneration,
    required this.accessPolicyConfig,
    required this.defaultAccessPolicy,
    required this.dot1X,
    required this.remoteUserHandling,
    required this.x_509Token,
    required this.sAMLToken,
    required this.kerberosToken,
    required this.usernameToken,
    required this.httpDigest,
    required this.rELToken,
    required this.supportedEAPMethods,
    required this.maxUsers,
    required this.maxUserNameLength,
    required this.maxPasswordLength,
  });
}

@JsonSerializable()
class SystemCapabilities {
  /// Indicates support for WS Discovery resolve requests.
  @JsonKey(name: 'DiscoveryResolve')
  final bool discoveryResolve;

  /// Indicates support for WS-Discovery Bye.
  @JsonKey(name: 'DiscoveryBye')
  final bool discoveryBye;

  /// Indicates support for remote discovery.
  @JsonKey(name: 'RemoteDiscovery')
  final bool remoteDiscovery;

  /// Indicates support for system backup through MTOM.
  @JsonKey(name: 'SystemBackup')
  final bool systemBackup;

  /// Indicates support for retrieval of system logging through MTOM.
  @JsonKey(name: 'SystemLogging')
  final bool systemLogging;

  /// Indicates support for firmware upgrade through MTOM.
  @JsonKey(name: 'FirmwareUpgrade')
  final bool firmwareUpgrade;

  /// Indicates support for firmware upgrade through HTTP.
  @JsonKey(name: 'HttpFirmwareUpgrade')
  final bool httpFirmwareUpgrade;

  /// Indicates support for system backup through HTTP.
  @JsonKey(name: 'HttpSystemBackup')
  final bool httpSystemBackup;

  /// Indicates support for retrieval of system logging through HTTP.
  @JsonKey(name: 'HttpSystemLogging')
  final bool httpSystemLogging;

  /// Indicates support for retrieving support information through HTTP.
  @JsonKey(name: 'HttpSupportInformation')
  final bool httpSupportInformation;

  /// Indicates support for storage configuration interfaces.
  @JsonKey(name: 'StorageConfiguration')
  final bool storageConfiguration;

  /// Indicates maximum number of storage configurations supported.
  @JsonKey(name: 'MaxStorageConfigurations')
  final int maxStorageConfigurations;

  /// If present signals support for geo location. The value signals the supported number of entries.
  @JsonKey(name: 'GeoLocationEntries')
  final int geoLocationEntries;

  /// List of supported automatic GeoLocation adjustment supported by the device. Valid items are defined by tds:AutoGeoMode.
  @JsonKey(name: 'AutoGeo')
  final StringAttrList autoGeo;

  /// Enumerates the supported StorageTypes, see tds:StorageType.
  @JsonKey(name: 'StorageTypesSupported')
  final StringAttrList storageTypesSupported;
  SystemCapabilities({
    required this.discoveryResolve,
    required this.discoveryBye,
    required this.remoteDiscovery,
    required this.systemBackup,
    required this.systemLogging,
    required this.firmwareUpgrade,
    required this.httpFirmwareUpgrade,
    required this.httpSystemBackup,
    required this.httpSystemLogging,
    required this.httpSupportInformation,
    required this.storageConfiguration,
    required this.maxStorageConfigurations,
    required this.geoLocationEntries,
    required this.autoGeo,
    required this.storageTypesSupported,
  });
}

enum AutoGeoModes {
  @JsonValue("Location")
  Location,
  @JsonValue("Heading")
  Heading,
  @JsonValue("Leveling")
  Leveling,
}

@JsonSerializable()
class MiscCapabilities {
  /// Lists of commands supported by SendAuxiliaryCommand.
  @JsonKey(name: 'AuxiliaryCommands')
  final StringAttrList auxiliaryCommands;
  MiscCapabilities({
    required this.auxiliaryCommands,
  });
}

class GetDeviceInformation {}

@JsonSerializable()
class GetDeviceInformationResponse {
  /// The manufactor of the device.
  @JsonKey(name: 'Manufacturer')
  final String manufacturer;

  /// The device model.
  @JsonKey(name: 'Model')
  final String model;

  /// The firmware version in the device.
  @JsonKey(name: 'FirmwareVersion')
  final String firmwareVersion;

  /// The serial number of the device.
  @JsonKey(name: 'SerialNumber')
  final String serialNumber;

  /// The hardware ID of the device.
  @JsonKey(name: 'HardwareId')
  final String hardwareId;
  GetDeviceInformationResponse({
    required this.manufacturer,
    required this.model,
    required this.firmwareVersion,
    required this.serialNumber,
    required this.hardwareId,
  });
}

@JsonSerializable()
class SetSystemDateAndTime {
  /// Defines if the date and time is set via NTP or manually.
  @JsonKey(name: 'DateTimeType')
  final SetDateTimeType dateTimeType;

  /// Automatically adjust Daylight savings if defined in TimeZone.
  @JsonKey(name: 'DaylightSavings')
  final bool daylightSavings;

  /// The time zone in POSIX 1003.1 format
  @JsonKey(name: 'TimeZone')
  final TimeZone? timeZone;

  /// Date and time in UTC. If time is obtained via NTP, UTCDateTime has no meaning
  @JsonKey(name: 'UTCDateTime')
  final DateTime? uTCDateTime;
  SetSystemDateAndTime({
    required this.dateTimeType,
    required this.daylightSavings,
    this.timeZone,
    this.uTCDateTime,
  });
}

class SetSystemDateAndTimeResponse {}

class GetSystemDateAndTime {}

@JsonSerializable()
class GetSystemDateAndTimeResponse {
  /// Contains information whether system date and time are set manually or by NTP, daylight savings is on or off, time zone in POSIX 1003.1 format and system date and time in UTC and also local system date and time.
  @JsonKey(name: 'SystemDateAndTime')
  final SystemDateTime systemDateAndTime;
  GetSystemDateAndTimeResponse({
    required this.systemDateAndTime,
  });
}

@JsonSerializable()
class SetSystemFactoryDefault {
  /// Specifies the factory default action type.
  @JsonKey(name: 'FactoryDefault')
  final FactoryDefaultType factoryDefault;
  SetSystemFactoryDefault({
    required this.factoryDefault,
  });
}

class SetSystemFactoryDefaultResponse {}

@JsonSerializable()
class UpgradeSystemFirmware {
  @JsonKey(name: 'Firmware')
  final AttachmentData firmware;
  UpgradeSystemFirmware({
    required this.firmware,
  });
}

@JsonSerializable()
class UpgradeSystemFirmwareResponse {
  @JsonKey(name: 'Message')
  final String? message;
  UpgradeSystemFirmwareResponse({
    this.message,
  });
}

class SystemReboot {}

@JsonSerializable()
class SystemRebootResponse {
  /// Contains the reboot message sent by the device.
  @JsonKey(name: 'Message')
  final String message;
  SystemRebootResponse({
    required this.message,
  });
}

@JsonSerializable()
class RestoreSystem {
  @JsonKey(name: 'BackupFiles')
  final BackupFile backupFiles;
  RestoreSystem({
    required this.backupFiles,
  });
}

class RestoreSystemResponse {}

class GetSystemBackup {}

@JsonSerializable()
class GetSystemBackupResponse {
  @JsonKey(name: 'BackupFiles')
  final BackupFile backupFiles;
  GetSystemBackupResponse({
    required this.backupFiles,
  });
}

class GetSystemSupportInformation {}

@JsonSerializable()
class GetSystemSupportInformationResponse {
  /// Contains the arbitary device diagnostics information.
  @JsonKey(name: 'SupportInformation')
  final SupportInformation supportInformation;
  GetSystemSupportInformationResponse({
    required this.supportInformation,
  });
}

@JsonSerializable()
class GetSystemLog {
  /// Specifies the type of system log to get.
  @JsonKey(name: 'LogType')
  final SystemLogType logType;
  GetSystemLog({
    required this.logType,
  });
}

@JsonSerializable()
class GetSystemLogResponse {
  /// Contains the system log information.
  @JsonKey(name: 'SystemLog')
  final SystemLog systemLog;
  GetSystemLogResponse({
    required this.systemLog,
  });
}

class GetScopes {}

@JsonSerializable()
class GetScopesResponse {
  /// Contains a list of URI definining the device scopes. Scope parameters can be of two types: fixed and configurable. Fixed parameters can not be altered.
  @JsonKey(name: 'Scopes')
  final Scope scopes;
  GetScopesResponse({
    required this.scopes,
  });
}

@JsonSerializable()
class SetScopes {
  /// Contains a list of scope parameters that will replace all existing configurable scope parameters.
  @JsonKey(name: 'Scopes')
  final String scopes;
  SetScopes({
    required this.scopes,
  });
}

class SetScopesResponse {}

@JsonSerializable()
class AddScopes {
  /// Contains a list of new configurable scope parameters that will be added to the existing configurable scope.
  @JsonKey(name: 'ScopeItem')
  final String scopeItem;
  AddScopes({
    required this.scopeItem,
  });
}

class AddScopesResponse {}

@JsonSerializable()
class RemoveScopes {
  /// Contains a list of URIs that should be removed from the device scope.
  /// Note that the response message always will match the request or an error will be returned. The use of the response is for that reason deprecated.
  ///
  @JsonKey(name: 'ScopeItem')
  final String scopeItem;
  RemoveScopes({
    required this.scopeItem,
  });
}

@JsonSerializable()
class RemoveScopesResponse {
  /// Contains a list of URIs that has been removed from the device scope
  @JsonKey(name: 'ScopeItem')
  final String? scopeItem;
  RemoveScopesResponse({
    this.scopeItem,
  });
}

class GetDiscoveryMode {}

@JsonSerializable()
class GetDiscoveryModeResponse {
  ///
  /// Indicator of discovery mode: Discoverable, NonDiscoverable.
  ///
  @JsonKey(name: 'DiscoveryMode')
  final DiscoveryMode discoveryMode;
  GetDiscoveryModeResponse({
    required this.discoveryMode,
  });
}

@JsonSerializable()
class SetDiscoveryMode {
  ///
  /// Indicator of discovery mode: Discoverable, NonDiscoverable.
  ///
  @JsonKey(name: 'DiscoveryMode')
  final DiscoveryMode discoveryMode;
  SetDiscoveryMode({
    required this.discoveryMode,
  });
}

class SetDiscoveryModeResponse {}

class GetRemoteDiscoveryMode {}

@JsonSerializable()
class GetRemoteDiscoveryModeResponse {
  ///
  /// Indicator of discovery mode: Discoverable, NonDiscoverable.
  ///
  @JsonKey(name: 'RemoteDiscoveryMode')
  final DiscoveryMode remoteDiscoveryMode;
  GetRemoteDiscoveryModeResponse({
    required this.remoteDiscoveryMode,
  });
}

@JsonSerializable()
class SetRemoteDiscoveryMode {
  ///
  /// Indicator of discovery mode: Discoverable, NonDiscoverable.
  ///
  @JsonKey(name: 'RemoteDiscoveryMode')
  final DiscoveryMode remoteDiscoveryMode;
  SetRemoteDiscoveryMode({
    required this.remoteDiscoveryMode,
  });
}

class SetRemoteDiscoveryModeResponse {}

class GetDPAddresses {}

@JsonSerializable()
class GetDPAddressesResponse {
  @JsonKey(name: 'DPAddress')
  final NetworkHost? dPAddress;
  GetDPAddressesResponse({
    this.dPAddress,
  });
}

@JsonSerializable()
class SetDPAddresses {
  @JsonKey(name: 'DPAddress')
  final NetworkHost? dPAddress;
  SetDPAddresses({
    this.dPAddress,
  });
}

class SetDPAddressesResponse {}

class GetEndpointReference {}

@JsonSerializable()
class GetEndpointReferenceResponse {
  @JsonKey(name: 'GUID')
  final String gUID;
  GetEndpointReferenceResponse({
    required this.gUID,
  });
}

class GetRemoteUser {}

@JsonSerializable()
class GetRemoteUserResponse {
  @JsonKey(name: 'RemoteUser')
  final RemoteUser? remoteUser;
  GetRemoteUserResponse({
    this.remoteUser,
  });
}

@JsonSerializable()
class SetRemoteUser {
  @JsonKey(name: 'RemoteUser')
  final RemoteUser? remoteUser;
  SetRemoteUser({
    this.remoteUser,
  });
}

class SetRemoteUserResponse {}

class GetUsers {}

@JsonSerializable()
class GetUsersResponse {
  /// Contains a list of the onvif users and following information is included in each entry: username and user level.
  @JsonKey(name: 'User')
  final User? user;
  GetUsersResponse({
    this.user,
  });
}

@JsonSerializable()
class CreateUsers {
  /// Creates new device users and corresponding credentials. Each user entry includes: username, password and user level. Either all users are created successfully or a fault message MUST be returned without creating any user. If trying to create several users with exactly the same username the request is rejected and no users are created. If password is missing, then fault message Too weak password is returned.
  @JsonKey(name: 'User')
  final User user;
  CreateUsers({
    required this.user,
  });
}

class CreateUsersResponse {}

@JsonSerializable()
class DeleteUsers {
  /// Deletes users on an device and there may exist users that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a fault message MUST be returned and no users be deleted. If a username exists multiple times in the request, then a fault message is returned.
  @JsonKey(name: 'Username')
  final String username;
  DeleteUsers({
    required this.username,
  });
}

class DeleteUsersResponse {}

@JsonSerializable()
class SetUser {
  /// Updates the credentials for one or several users on an device. Either all change requests are processed successfully or a fault message MUST be returned. If the request contains the same username multiple times, a fault message is returned.
  @JsonKey(name: 'User')
  final User user;
  SetUser({
    required this.user,
  });
}

class SetUserResponse {}

class GetWsdlUrl {}

@JsonSerializable()
class GetWsdlUrlResponse {
  @JsonKey(name: 'WsdlUrl')
  final String wsdlUrl;
  GetWsdlUrlResponse({
    required this.wsdlUrl,
  });
}

@JsonSerializable()
class GetCapabilities {
  ///
  /// List of categories to retrieve capability information on.
  ///
  @JsonKey(name: 'Category')
  final CapabilityCategory? category;
  GetCapabilities({
    this.category,
  });
}

@JsonSerializable()
class GetCapabilitiesResponse {
  ///
  /// Capability information.
  ///
  @JsonKey(name: 'Capabilities')
  final Capabilities capabilities;
  GetCapabilitiesResponse({
    required this.capabilities,
  });
}

class GetHostname {}

@JsonSerializable()
class GetHostnameResponse {
  /// Contains the hostname information.
  @JsonKey(name: 'HostnameInformation')
  final HostnameInformation hostnameInformation;
  GetHostnameResponse({
    required this.hostnameInformation,
  });
}

@JsonSerializable()
class SetHostname {
  /// The hostname to set.
  @JsonKey(name: 'Name')
  final String name;
  SetHostname({
    required this.name,
  });
}

class SetHostnameResponse {}

@JsonSerializable()
class SetHostnameFromDHCP {
  /// True if the hostname shall be obtained via DHCP.
  @JsonKey(name: 'FromDHCP')
  final bool fromDHCP;
  SetHostnameFromDHCP({
    required this.fromDHCP,
  });
}

@JsonSerializable()
class SetHostnameFromDHCPResponse {
  ///
  /// Indicates whether or not a reboot is required after configuration updates.
  ///
  @JsonKey(name: 'RebootNeeded')
  final bool rebootNeeded;
  SetHostnameFromDHCPResponse({
    required this.rebootNeeded,
  });
}

class GetDNS {}

@JsonSerializable()
class GetDNSResponse {
  ///
  /// DNS information.
  ///
  @JsonKey(name: 'DNSInformation')
  final DNSInformation dNSInformation;
  GetDNSResponse({
    required this.dNSInformation,
  });
}

@JsonSerializable()
class SetDNS {
  ///
  /// Indicate if the DNS address is to be retrieved using DHCP.
  ///
  @JsonKey(name: 'FromDHCP')
  final bool fromDHCP;

  ///
  /// DNS search domain.
  ///
  @JsonKey(name: 'SearchDomain')
  final String? searchDomain;

  ///
  /// DNS address(es) set manually.
  ///
  @JsonKey(name: 'DNSManual')
  final IPAddress? dNSManual;
  SetDNS({
    required this.fromDHCP,
    this.searchDomain,
    this.dNSManual,
  });
}

class SetDNSResponse {}

class GetNTP {}

@JsonSerializable()
class GetNTPResponse {
  ///
  /// NTP information.
  ///
  @JsonKey(name: 'NTPInformation')
  final NTPInformation nTPInformation;
  GetNTPResponse({
    required this.nTPInformation,
  });
}

@JsonSerializable()
class SetNTP {
  ///
  /// Indicate if NTP address information is to be retrieved using DHCP.
  ///
  @JsonKey(name: 'FromDHCP')
  final bool fromDHCP;

  ///
  /// Manual NTP settings.
  ///
  @JsonKey(name: 'NTPManual')
  final NetworkHost? nTPManual;
  SetNTP({
    required this.fromDHCP,
    this.nTPManual,
  });
}

class SetNTPResponse {}

class GetDynamicDNS {}

@JsonSerializable()
class GetDynamicDNSResponse {
  ///
  /// Dynamic DNS information.
  ///
  @JsonKey(name: 'DynamicDNSInformation')
  final DynamicDNSInformation dynamicDNSInformation;
  GetDynamicDNSResponse({
    required this.dynamicDNSInformation,
  });
}

@JsonSerializable()
class SetDynamicDNS {
  ///
  /// Dynamic DNS type.
  ///
  @JsonKey(name: 'Type')
  final DynamicDNSType type;

  ///
  /// DNS name.
  ///
  @JsonKey(name: 'Name')
  final DNSName? name;

  ///
  /// DNS record time to live.
  ///
  @JsonKey(name: 'TTL')
  final Duration? tTL;
  SetDynamicDNS({
    required this.type,
    this.name,
    this.tTL,
  });
}

class SetDynamicDNSResponse {}

class GetNetworkInterfaces {}

@JsonSerializable()
class GetNetworkInterfacesResponse {
  ///
  /// List of network interfaces.
  ///
  @JsonKey(name: 'NetworkInterfaces')
  final NetworkInterface networkInterfaces;
  GetNetworkInterfacesResponse({
    required this.networkInterfaces,
  });
}

@JsonSerializable()
class SetNetworkInterfaces {
  ///
  /// Symbolic network interface name.
  ///
  @JsonKey(name: 'InterfaceToken')
  final ReferenceToken interfaceToken;

  ///
  /// Network interface name.
  ///
  @JsonKey(name: 'NetworkInterface')
  final NetworkInterfaceSetConfiguration networkInterface;
  SetNetworkInterfaces({
    required this.interfaceToken,
    required this.networkInterface,
  });
}

@JsonSerializable()
class SetNetworkInterfacesResponse {
  ///
  /// Indicates whether or not a reboot is required after configuration updates.
  /// If a device responds with RebootNeeded set to false, the device can be reached
  /// via the new IP address without further action. A client should be aware that a device
  /// may not be responsive for a short period of time until it signals availability at
  /// the new address via the discovery Hello messages.
  /// If a device responds with RebootNeeded set to true, it will be further available under
  /// its previous IP address. The settings will only be activated when the device is
  /// rebooted via the SystemReboot command.
  ///
  @JsonKey(name: 'RebootNeeded')
  final bool rebootNeeded;
  SetNetworkInterfacesResponse({
    required this.rebootNeeded,
  });
}

class GetNetworkProtocols {}

@JsonSerializable()
class GetNetworkProtocolsResponse {
  /// Contains an array of defined protocols supported by the device. There are three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be retrieved for each protocol: port and enable/disable.
  @JsonKey(name: 'NetworkProtocols')
  final NetworkProtocol? networkProtocols;
  GetNetworkProtocolsResponse({
    this.networkProtocols,
  });
}

@JsonSerializable()
class SetNetworkProtocols {
  /// Configures one or more defined network protocols supported by the device. There are currently three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be set for each protocol: port and enable/disable.
  @JsonKey(name: 'NetworkProtocols')
  final NetworkProtocol networkProtocols;
  SetNetworkProtocols({
    required this.networkProtocols,
  });
}

class SetNetworkProtocolsResponse {}

class GetNetworkDefaultGateway {}

@JsonSerializable()
class GetNetworkDefaultGatewayResponse {
  /// Gets the default IPv4 and IPv6 gateway settings from the device.
  @JsonKey(name: 'NetworkGateway')
  final NetworkGateway networkGateway;
  GetNetworkDefaultGatewayResponse({
    required this.networkGateway,
  });
}

@JsonSerializable()
class SetNetworkDefaultGateway {
  /// Sets IPv4 gateway address used as default setting.
  @JsonKey(name: 'IPv4Address')
  final IPv4Address? iPv4Address;

  /// Sets IPv6 gateway address used as default setting.
  @JsonKey(name: 'IPv6Address')
  final IPv6Address? iPv6Address;
  SetNetworkDefaultGateway({
    this.iPv4Address,
    this.iPv6Address,
  });
}

class SetNetworkDefaultGatewayResponse {}

class GetZeroConfiguration {}

@JsonSerializable()
class GetZeroConfigurationResponse {
  /// Contains the zero-configuration.
  @JsonKey(name: 'ZeroConfiguration')
  final NetworkZeroConfiguration zeroConfiguration;
  GetZeroConfigurationResponse({
    required this.zeroConfiguration,
  });
}

@JsonSerializable()
class SetZeroConfiguration {
  /// Unique identifier referencing the physical interface.
  @JsonKey(name: 'InterfaceToken')
  final ReferenceToken interfaceToken;

  /// Specifies if the zero-configuration should be enabled or not.
  @JsonKey(name: 'Enabled')
  final bool enabled;
  SetZeroConfiguration({
    required this.interfaceToken,
    required this.enabled,
  });
}

class SetZeroConfigurationResponse {}

class GetIPAddressFilter {}

@JsonSerializable()
class GetIPAddressFilterResponse {
  @JsonKey(name: 'IPAddressFilter')
  final IPAddressFilter iPAddressFilter;
  GetIPAddressFilterResponse({
    required this.iPAddressFilter,
  });
}

@JsonSerializable()
class SetIPAddressFilter {
  @JsonKey(name: 'IPAddressFilter')
  final IPAddressFilter iPAddressFilter;
  SetIPAddressFilter({
    required this.iPAddressFilter,
  });
}

class SetIPAddressFilterResponse {}

@JsonSerializable()
class AddIPAddressFilter {
  @JsonKey(name: 'IPAddressFilter')
  final IPAddressFilter iPAddressFilter;
  AddIPAddressFilter({
    required this.iPAddressFilter,
  });
}

class AddIPAddressFilterResponse {}

@JsonSerializable()
class RemoveIPAddressFilter {
  @JsonKey(name: 'IPAddressFilter')
  final IPAddressFilter iPAddressFilter;
  RemoveIPAddressFilter({
    required this.iPAddressFilter,
  });
}

class RemoveIPAddressFilterResponse {}

class GetAccessPolicy {}

@JsonSerializable()
class GetAccessPolicyResponse {
  @JsonKey(name: 'PolicyFile')
  final BinaryData policyFile;
  GetAccessPolicyResponse({
    required this.policyFile,
  });
}

@JsonSerializable()
class SetAccessPolicy {
  @JsonKey(name: 'PolicyFile')
  final BinaryData policyFile;
  SetAccessPolicy({
    required this.policyFile,
  });
}

class SetAccessPolicyResponse {}

@JsonSerializable()
class CreateCertificate {
  /// Certificate id.
  @JsonKey(name: 'CertificateID')
  final String? certificateID;

  /// Identification of the entity associated with the public-key.
  @JsonKey(name: 'Subject')
  final String? subject;

  /// Certificate validity start date.
  @JsonKey(name: 'ValidNotBefore')
  final DateTime? validNotBefore;

  /// Certificate expiry start date.
  @JsonKey(name: 'ValidNotAfter')
  final DateTime? validNotAfter;
  CreateCertificate({
    this.certificateID,
    this.subject,
    this.validNotBefore,
    this.validNotAfter,
  });
}

@JsonSerializable()
class CreateCertificateResponse {
  ///
  /// base64 encoded DER representation of certificate.
  ///
  @JsonKey(name: 'NvtCertificate')
  final Certificate nvtCertificate;
  CreateCertificateResponse({
    required this.nvtCertificate,
  });
}

class GetCertificates {}

@JsonSerializable()
class GetCertificatesResponse {
  ///
  /// Id and base64 encoded DER representation of all available certificates.
  ///
  @JsonKey(name: 'NvtCertificate')
  final Certificate? nvtCertificate;
  GetCertificatesResponse({
    this.nvtCertificate,
  });
}

class GetCertificatesStatus {}

@JsonSerializable()
class GetCertificatesStatusResponse {
  ///
  /// Indicates if a certificate is used in an optional HTTPS configuration of the device.
  ///
  @JsonKey(name: 'CertificateStatus')
  final CertificateStatus? certificateStatus;
  GetCertificatesStatusResponse({
    this.certificateStatus,
  });
}

@JsonSerializable()
class SetCertificatesStatus {
  ///
  /// Indicates if a certificate is to be used in an optional HTTPS configuration of the device.
  ///
  @JsonKey(name: 'CertificateStatus')
  final CertificateStatus? certificateStatus;
  SetCertificatesStatus({
    this.certificateStatus,
  });
}

class SetCertificatesStatusResponse {}

@JsonSerializable()
class DeleteCertificates {
  ///
  /// List of ids of certificates to delete.
  ///
  @JsonKey(name: 'CertificateID')
  final String certificateID;
  DeleteCertificates({
    required this.certificateID,
  });
}

class DeleteCertificatesResponse {}

@JsonSerializable()
class GetPkcs10Request {
  ///
  /// List of ids of certificates to delete.
  ///
  @JsonKey(name: 'CertificateID')
  final String certificateID;

  ///
  /// Relative Dinstinguished Name(RDN) CommonName(CN).
  ///
  @JsonKey(name: 'Subject')
  final String? subject;

  ///
  /// Optional base64 encoded DER attributes.
  ///
  @JsonKey(name: 'Attributes')
  final BinaryData? attributes;
  GetPkcs10Request({
    required this.certificateID,
    this.subject,
    this.attributes,
  });
}

@JsonSerializable()
class GetPkcs10RequestResponse {
  ///
  /// base64 encoded DER representation of certificate.
  ///
  @JsonKey(name: 'Pkcs10Request')
  final BinaryData pkcs10Request;
  GetPkcs10RequestResponse({
    required this.pkcs10Request,
  });
}

@JsonSerializable()
class LoadCertificates {
  ///
  /// Optional id and base64 encoded DER representation of certificate.
  ///
  @JsonKey(name: 'NVTCertificate')
  final Certificate nVTCertificate;
  LoadCertificates({
    required this.nVTCertificate,
  });
}

class LoadCertificatesResponse {}

class GetClientCertificateMode {}

@JsonSerializable()
class GetClientCertificateModeResponse {
  ///
  /// Indicates whether or not client certificates are required by device.
  ///
  @JsonKey(name: 'Enabled')
  final bool enabled;
  GetClientCertificateModeResponse({
    required this.enabled,
  });
}

@JsonSerializable()
class SetClientCertificateMode {
  ///
  /// Indicates whether or not client certificates are required by device.
  ///
  @JsonKey(name: 'Enabled')
  final bool enabled;
  SetClientCertificateMode({
    required this.enabled,
  });
}

class SetClientCertificateModeResponse {}

class GetCACertificates {}

@JsonSerializable()
class GetCACertificatesResponse {
  @JsonKey(name: 'CACertificate')
  final Certificate? cACertificate;
  GetCACertificatesResponse({
    this.cACertificate,
  });
}

@JsonSerializable()
class LoadCertificateWithPrivateKey {
  @JsonKey(name: 'CertificateWithPrivateKey')
  final CertificateWithPrivateKey certificateWithPrivateKey;
  LoadCertificateWithPrivateKey({
    required this.certificateWithPrivateKey,
  });
}

class LoadCertificateWithPrivateKeyResponse {}

@JsonSerializable()
class GetCertificateInformation {
  @JsonKey(name: 'CertificateID')
  final String certificateID;
  GetCertificateInformation({
    required this.certificateID,
  });
}

@JsonSerializable()
class GetCertificateInformationResponse {
  @JsonKey(name: 'CertificateInformation')
  final CertificateInformation certificateInformation;
  GetCertificateInformationResponse({
    required this.certificateInformation,
  });
}

@JsonSerializable()
class LoadCACertificates {
  @JsonKey(name: 'CACertificate')
  final Certificate cACertificate;
  LoadCACertificates({
    required this.cACertificate,
  });
}

class LoadCACertificatesResponse {}

@JsonSerializable()
class CreateDot1XConfiguration {
  @JsonKey(name: 'Dot1XConfiguration')
  final Dot1XConfiguration dot1XConfiguration;
  CreateDot1XConfiguration({
    required this.dot1XConfiguration,
  });
}

class CreateDot1XConfigurationResponse {}

@JsonSerializable()
class SetDot1XConfiguration {
  @JsonKey(name: 'Dot1XConfiguration')
  final Dot1XConfiguration dot1XConfiguration;
  SetDot1XConfiguration({
    required this.dot1XConfiguration,
  });
}

class SetDot1XConfigurationResponse {}

@JsonSerializable()
class GetDot1XConfiguration {
  @JsonKey(name: 'Dot1XConfigurationToken')
  final ReferenceToken dot1XConfigurationToken;
  GetDot1XConfiguration({
    required this.dot1XConfigurationToken,
  });
}

@JsonSerializable()
class GetDot1XConfigurationResponse {
  @JsonKey(name: 'Dot1XConfiguration')
  final Dot1XConfiguration dot1XConfiguration;
  GetDot1XConfigurationResponse({
    required this.dot1XConfiguration,
  });
}

class GetDot1XConfigurations {}

@JsonSerializable()
class GetDot1XConfigurationsResponse {
  @JsonKey(name: 'Dot1XConfiguration')
  final Dot1XConfiguration? dot1XConfiguration;
  GetDot1XConfigurationsResponse({
    this.dot1XConfiguration,
  });
}

@JsonSerializable()
class DeleteDot1XConfiguration {
  @JsonKey(name: 'Dot1XConfigurationToken')
  final ReferenceToken? dot1XConfigurationToken;
  DeleteDot1XConfiguration({
    this.dot1XConfigurationToken,
  });
}

class DeleteDot1XConfigurationResponse {}

class GetRelayOutputs {}

@JsonSerializable()
class GetRelayOutputsResponse {
  @JsonKey(name: 'RelayOutputs')
  final RelayOutput? relayOutputs;
  GetRelayOutputsResponse({
    this.relayOutputs,
  });
}

@JsonSerializable()
class SetRelayOutputSettings {
  @JsonKey(name: 'RelayOutputToken')
  final ReferenceToken relayOutputToken;
  @JsonKey(name: 'Properties')
  final RelayOutputSettings properties;
  SetRelayOutputSettings({
    required this.relayOutputToken,
    required this.properties,
  });
}

class SetRelayOutputSettingsResponse {}

@JsonSerializable()
class SetRelayOutputState {
  @JsonKey(name: 'RelayOutputToken')
  final ReferenceToken relayOutputToken;
  @JsonKey(name: 'LogicalState')
  final RelayLogicalState logicalState;
  SetRelayOutputState({
    required this.relayOutputToken,
    required this.logicalState,
  });
}

class SetRelayOutputStateResponse {}

@JsonSerializable()
class SendAuxiliaryCommand {
  @JsonKey(name: 'AuxiliaryCommand')
  final AuxiliaryData auxiliaryCommand;
  SendAuxiliaryCommand({
    required this.auxiliaryCommand,
  });
}

@JsonSerializable()
class SendAuxiliaryCommandResponse {
  @JsonKey(name: 'AuxiliaryCommandResponse')
  final AuxiliaryData? auxiliaryCommandResponse;
  SendAuxiliaryCommandResponse({
    this.auxiliaryCommandResponse,
  });
}

class GetDot11Capabilities {}

@JsonSerializable()
class GetDot11CapabilitiesResponse {
  @JsonKey(name: 'Capabilities')
  final Dot11Capabilities capabilities;
  GetDot11CapabilitiesResponse({
    required this.capabilities,
  });
}

@JsonSerializable()
class GetDot11Status {
  @JsonKey(name: 'InterfaceToken')
  final ReferenceToken interfaceToken;
  GetDot11Status({
    required this.interfaceToken,
  });
}

@JsonSerializable()
class GetDot11StatusResponse {
  @JsonKey(name: 'Status')
  final Dot11Status status;
  GetDot11StatusResponse({
    required this.status,
  });
}

@JsonSerializable()
class ScanAvailableDot11Networks {
  @JsonKey(name: 'InterfaceToken')
  final ReferenceToken interfaceToken;
  ScanAvailableDot11Networks({
    required this.interfaceToken,
  });
}

@JsonSerializable()
class ScanAvailableDot11NetworksResponse {
  @JsonKey(name: 'Networks')
  final Dot11AvailableNetworks? networks;
  ScanAvailableDot11NetworksResponse({
    this.networks,
  });
}

class GetSystemUris {}

@JsonSerializable()
class GetSystemUrisResponse {
  @JsonKey(name: 'SystemLogUris')
  final SystemLogUriList? systemLogUris;
  @JsonKey(name: 'SupportInfoUri')
  final String? supportInfoUri;
  @JsonKey(name: 'SystemBackupUri')
  final String? systemBackupUri;
  GetSystemUrisResponse({
    this.systemLogUris,
    this.supportInfoUri,
    this.systemBackupUri,
  });
}

class StartFirmwareUpgrade {}

@JsonSerializable()
class StartFirmwareUpgradeResponse {
  @JsonKey(name: 'UploadUri')
  final String uploadUri;
  @JsonKey(name: 'UploadDelay')
  final Duration uploadDelay;
  @JsonKey(name: 'ExpectedDownTime')
  final Duration expectedDownTime;
  StartFirmwareUpgradeResponse({
    required this.uploadUri,
    required this.uploadDelay,
    required this.expectedDownTime,
  });
}

class StartSystemRestore {}

@JsonSerializable()
class StartSystemRestoreResponse {
  @JsonKey(name: 'UploadUri')
  final String uploadUri;
  @JsonKey(name: 'ExpectedDownTime')
  final Duration expectedDownTime;
  StartSystemRestoreResponse({
    required this.uploadUri,
    required this.expectedDownTime,
  });
}

@JsonSerializable()
class UserCredential {
  /// User name
  @JsonKey(name: 'UserName')
  final String userName;

  ///  optional password
  @JsonKey(name: 'Password')
  final String? password;
  UserCredential({
    required this.userName,
    this.password,
  });
}

enum StorageType {
  @JsonValue("NFS")
  NFS,
  @JsonValue("CIFS")
  CIFS,
  @JsonValue("CDMI")
  CDMI,
  @JsonValue("FTP")
  FTP,
}

@JsonSerializable()
class StorageConfigurationData {
  ///  local path
  @JsonKey(name: 'LocalPath')
  final String? localPath;

  ///  Storage server address
  @JsonKey(name: 'StorageUri')
  final String? storageUri;

  ///  User credential for the storage server
  @JsonKey(name: 'User')
  final UserCredential? user;

  /// StorageType lists the acceptable values for type attribute
  @JsonKey(name: 'type')
  final String type;
  StorageConfigurationData({
    this.localPath,
    this.storageUri,
    this.user,
    required this.type,
  });
}

class GetStorageConfigurations {}

@JsonSerializable()
class GetStorageConfigurationsResponse {
  @JsonKey(name: 'StorageConfigurations')
  final StorageConfiguration? storageConfigurations;
  GetStorageConfigurationsResponse({
    this.storageConfigurations,
  });
}

@JsonSerializable()
class CreateStorageConfiguration {
  @JsonKey(name: 'StorageConfiguration')
  final StorageConfigurationData storageConfiguration;
  CreateStorageConfiguration({
    required this.storageConfiguration,
  });
}

@JsonSerializable()
class CreateStorageConfigurationResponse {
  @JsonKey(name: 'Token')
  final ReferenceToken token;
  CreateStorageConfigurationResponse({
    required this.token,
  });
}

@JsonSerializable()
class GetStorageConfiguration {
  @JsonKey(name: 'Token')
  final ReferenceToken token;
  GetStorageConfiguration({
    required this.token,
  });
}

@JsonSerializable()
class GetStorageConfigurationResponse {
  @JsonKey(name: 'StorageConfiguration')
  final StorageConfiguration storageConfiguration;
  GetStorageConfigurationResponse({
    required this.storageConfiguration,
  });
}

@JsonSerializable()
class SetStorageConfiguration {
  @JsonKey(name: 'StorageConfiguration')
  final StorageConfiguration storageConfiguration;
  SetStorageConfiguration({
    required this.storageConfiguration,
  });
}

class SetStorageConfigurationResponse {}

@JsonSerializable()
class DeleteStorageConfiguration {
  @JsonKey(name: 'Token')
  final ReferenceToken token;
  DeleteStorageConfiguration({
    required this.token,
  });
}

class DeleteStorageConfigurationResponse {}

class GetGeoLocation {}

@JsonSerializable()
class GetGeoLocationResponse {
  @JsonKey(name: 'Location')
  final LocationEntity? location;
  GetGeoLocationResponse({
    this.location,
  });
}

@JsonSerializable()
class SetGeoLocation {
  @JsonKey(name: 'Location')
  final LocationEntity location;
  SetGeoLocation({
    required this.location,
  });
}

class SetGeoLocationResponse {}

@JsonSerializable()
class DeleteGeoLocation {
  @JsonKey(name: 'Location')
  final LocationEntity location;
  DeleteGeoLocation({
    required this.location,
  });
}

class DeleteGeoLocationResponse {}
