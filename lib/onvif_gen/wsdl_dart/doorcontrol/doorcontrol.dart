/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

/// 
/// ServiceCapabilities structure reflects optional functionality of a service.
/// The information is static and does not change during device operation.
/// The following capabilities are available:
/// 
@JsonSerializable()
class ServiceCapabilities  {
  /// 
/// The maximum number of entries returned by a single Get<Entity>List or
/// Get<Entity> request. The device shall never return more than this number of entities
/// in a single response.
/// 
@JsonKey(name: 'MaxLimit')
final int maxLimit;
  /// 
/// Indicates the maximum number of doors supported by the device.
/// 
@JsonKey(name: 'MaxDoors')
final int maxDoors;
  /// 
/// Indicates that the client is allowed to supply the token when creating doors.
/// To enable the use of the command SetDoor, the value must be set to true.
/// 
@JsonKey(name: 'ClientSuppliedTokenSupported')
final bool clientSuppliedTokenSupported;
  ServiceCapabilities({
        required this.maxLimit,
        required this.maxDoors,
        required this.clientSuppliedTokenSupported,
  });
}

/// 
/// Used as extension base.
/// 

/// 
/// The DoorInfo type represents the Door as a physical object.
/// The structure contains information and capabilities of a specific door instance.
/// An ONVIF compliant device shall provide the following fields for each Door instance:
/// 
class DoorInfo {}
/// 
/// The door structure shall include all properties of the DoorInfo structure and also a timings
/// structure.
/// 
class Door {}
class DoorExtension {}
/// 
/// A structure defining times such as how long the door is unlocked when accessed,
/// extended grant time, etc.
/// 
@JsonSerializable()
class Timings  {
  /// 
/// When access is granted (door mode becomes Accessed), the latch is unlocked.
/// ReleaseTime is the time from when the latch is unlocked until it is
/// relocked again (unless the door is physically opened).
/// 
@JsonKey(name: 'ReleaseTime')
final Duration releaseTime;
  /// 
/// The time from when the door is physically opened until the door is set in the
/// DoorOpenTooLong alarm state.
/// 
@JsonKey(name: 'OpenTime')
final Duration openTime;
  /// 
/// Some individuals need extra time to open the door before the latch relocks.
/// If supported, ExtendedReleaseTime shall be added to ReleaseTime if UseExtendedTime
/// is set to true in the AccessDoor command.
/// 
@JsonKey(name: 'ExtendedReleaseTime')
final Duration? extendedReleaseTime;
  /// 
/// If the door is physically opened after access is granted,
/// then DelayTimeBeforeRelock is the time from when the door is physically
/// opened until the latch goes back to locked state.
/// 
@JsonKey(name: 'DelayTimeBeforeRelock')
final Duration? delayTimeBeforeRelock;
  /// 
/// Some individuals need extra time to pass through the door. If supported,
/// ExtendedOpenTime shall be added to OpenTime if UseExtendedTime is set to true
/// in the AccessDoor command.
/// 
@JsonKey(name: 'ExtendedOpenTime')
final Duration? extendedOpenTime;
  /// 
/// Before a DoorOpenTooLong alarm state is generated, a signal will sound to indicate
/// that the door must be closed. PreAlarmTime defines how long before DoorOpenTooLong
/// the warning signal shall sound.
/// 
@JsonKey(name: 'PreAlarmTime')
final Duration? preAlarmTime;
  @JsonKey(name: 'Extension')
final TimingsExtension? extension_;
  Timings({
        required this.releaseTime,
        required this.openTime,
        this.extendedReleaseTime,
        this.delayTimeBeforeRelock,
        this.extendedOpenTime,
        this.preAlarmTime,
        this.extension_,
  });
}

class TimingsExtension {}
/// 
/// DoorCapabilities reflect optional functionality of a particular physical entity.
/// Different door instances may have different set of capabilities.
/// This information may change during device operation, e.g. if hardware settings are changed.
/// The following capabilities are available:
/// 
@JsonSerializable()
class DoorCapabilities  {
  /// Indicates whether or not this Door instance supports AccessDoor command to
/// perform momentary access.
/// 
@JsonKey(name: 'Access')
final bool access;
  /// Indicates that this Door instance supports overriding configured timing in the
/// AccessDoor command.
/// 
@JsonKey(name: 'AccessTimingOverride')
final bool accessTimingOverride;
  /// Indicates that this Door instance supports LockDoor command to lock the
/// door.
/// 
@JsonKey(name: 'Lock')
final bool lock;
  /// Indicates that this Door instance supports UnlockDoor command to unlock the
/// door.
/// 
@JsonKey(name: 'Unlock')
final bool unlock;
  /// Indicates that this Door instance supports BlockDoor command to block the
/// door.
/// 
@JsonKey(name: 'Block')
final bool block;
  /// Indicates that this Door instance supports DoubleLockDoor command to lock
/// multiple locks on the door.
/// 
@JsonKey(name: 'DoubleLock')
final bool doubleLock;
  /// Indicates that this Door instance supports LockDown (and LockDownRelease)
/// commands to lock the door and put it in LockedDown mode.
/// 
@JsonKey(name: 'LockDown')
final bool lockDown;
  /// Indicates that this Door instance supports LockOpen (and LockOpenRelease)
/// commands to unlock the door and put it in LockedOpen mode.
/// 
@JsonKey(name: 'LockOpen')
final bool lockOpen;
  /// Indicates that this Door instance has a DoorMonitor and supports the
/// DoorPhysicalState event.
/// 
@JsonKey(name: 'DoorMonitor')
final bool doorMonitor;
  /// Indicates that this Door instance has a LockMonitor and supports the
/// LockPhysicalState event.
/// 
@JsonKey(name: 'LockMonitor')
final bool lockMonitor;
  /// Indicates that this Door instance has a DoubleLockMonitor and supports the
/// DoubleLockPhysicalState event.
/// 
@JsonKey(name: 'DoubleLockMonitor')
final bool doubleLockMonitor;
  /// Indicates that this Door instance supports door alarm and the DoorAlarm
/// event.
/// 
@JsonKey(name: 'Alarm')
final bool alarm;
  /// Indicates that this Door instance has a Tamper detector and supports the
/// DoorTamper event.
/// 
@JsonKey(name: 'Tamper')
final bool tamper;
  /// Indicates that this Door instance supports door fault and the DoorFault
/// event.
/// 
@JsonKey(name: 'Fault')
final bool fault;
  DoorCapabilities({
        required this.access,
        required this.accessTimingOverride,
        required this.lock,
        required this.unlock,
        required this.block,
        required this.doubleLock,
        required this.lockDown,
        required this.lockOpen,
        required this.doorMonitor,
        required this.lockMonitor,
        required this.doubleLockMonitor,
        required this.alarm,
        required this.tamper,
        required this.fault,
  });
}

/// 
/// The DoorState structure contains current aggregate runtime status of Door.
/// 
@JsonSerializable()
class DoorState  {
  /// 
/// Physical state of the Door; it is of type DoorPhysicalState. A device that
/// signals support for DoorMonitor capability for a particular door instance shall provide
/// this field.
/// 
@JsonKey(name: 'DoorPhysicalState')
final DoorPhysicalState? doorPhysicalState;
  /// 
/// Physical state of the Lock; it is of type LockPhysicalState. A device that
/// signals support for LockMonitor capability for a particular door instance shall provide
/// this field.
/// 
@JsonKey(name: 'LockPhysicalState')
final LockPhysicalState? lockPhysicalState;
  /// 
/// Physical state of the DoubleLock; it is of type LockPhysicalState. A
/// device that signals support for DoubleLockMonitor capability for a particular door
/// instance shall provide this field.
/// 
@JsonKey(name: 'DoubleLockPhysicalState')
final LockPhysicalState? doubleLockPhysicalState;
  /// 
/// Alarm state of the door; it is of type DoorAlarmState. A device that
/// signals support for Alarm capability for a particular door instance shall provide this
/// field.
/// 
@JsonKey(name: 'Alarm')
final DoorAlarmState? alarm;
  /// 
/// Tampering state of the door; it is of type DoorTamper. A device that
/// signals support for Tamper capability for a particular door instance shall provide this
/// field.
/// 
@JsonKey(name: 'Tamper')
final DoorTamper? tamper;
  /// 
/// Fault information for door; it is of type DoorFault. A device that signals
/// support for Fault capability for a particular door instance shall provide this field.
/// 
@JsonKey(name: 'Fault')
final DoorFault? fault;
  /// 
/// The logical operating mode of the door; it is of type DoorMode. An ONVIF
/// compatible device shall report current operating mode in this field.
/// 
@JsonKey(name: 'DoorMode')
final DoorMode doorMode;
  DoorState({
        this.doorPhysicalState,
        this.lockPhysicalState,
        this.doubleLockPhysicalState,
        this.alarm,
        this.tamper,
        this.fault,
        required this.doorMode,
  });
}

/// 
/// The physical state of a Door.
/// 
enum DoorPhysicalState {
  @JsonValue("Unknown")
  Unknown,
  @JsonValue("Open")
  Open,
  @JsonValue("Closed")
  Closed,
  @JsonValue("Fault")
  Fault,
}

/// 
/// The physical state of a Lock (including Double Lock).
/// 
enum LockPhysicalState {
  @JsonValue("Unknown")
  Unknown,
  @JsonValue("Locked")
  Locked,
  @JsonValue("Unlocked")
  Unlocked,
  @JsonValue("Fault")
  Fault,
}

/// 
/// Describes the state of a Door with regard to alarms.
/// 
enum DoorAlarmState {
  @JsonValue("Normal")
  Normal,
  @JsonValue("DoorForcedOpen")
  DoorForcedOpen,
  @JsonValue("DoorOpenTooLong")
  DoorOpenTooLong,
}

/// 
/// Tampering information for a Door.
/// 
@JsonSerializable()
class DoorTamper  {
  /// Optional field; Details describing tampering state change (e.g., reason,
/// place and time).
/// NOTE: All fields (including this one) which are designed to give
/// end-user prompts can be localized to the customer's native language.
/// 
@JsonKey(name: 'Reason')
final String? reason;
  /// State of the tamper detector; it is of type DoorTamperState.
/// 
@JsonKey(name: 'State')
final DoorTamperState state;
  DoorTamper({
        this.reason,
        required this.state,
  });
}

/// 
/// Describes the state of a Tamper detector.
/// 
enum DoorTamperState {
  @JsonValue("Unknown")
  Unknown,
  @JsonValue("NotInTamper")
  NotInTamper,
  @JsonValue("TamperDetected")
  TamperDetected,
}

/// 
/// Fault information for a Door.
/// This can be extended with optional attributes in the future.
/// 
@JsonSerializable()
class DoorFault  {
  /// Optional reason for fault.
@JsonKey(name: 'Reason')
final String? reason;
  /// Overall fault state for the door; it is of type DoorFaultState. If there
/// are any faults, the value shall be: FaultDetected. Details of the detected fault shall
/// be found in the Reason field, and/or the various DoorState fields and/or in extensions
/// to this structure.
/// 
@JsonKey(name: 'State')
final DoorFaultState state;
  DoorFault({
        this.reason,
        required this.state,
  });
}

/// 
/// Describes the state of a Door fault.
/// 
enum DoorFaultState {
  @JsonValue("Unknown")
  Unknown,
  @JsonValue("NotInFault")
  NotInFault,
  @JsonValue("FaultDetected")
  FaultDetected,
}

/// 
/// The DoorMode describe the mode of operation from a logical perspective. 
/// Setting a door mode reflects the intent to set a door in a physical state.
/// 
enum DoorMode {
  @JsonValue("Unknown")
  Unknown,
  @JsonValue("Locked")
  Locked,
  @JsonValue("Unlocked")
  Unlocked,
  @JsonValue("Accessed")
  Accessed,
  @JsonValue("Blocked")
  Blocked,
  @JsonValue("LockedDown")
  LockedDown,
  @JsonValue("LockedOpen")
  LockedOpen,
  @JsonValue("DoubleLocked")
  DoubleLocked,
}

/// 
/// Extension for the AccessDoor command.
/// 
class AccessDoorExtension {}
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capability response message contains the requested DoorControl
/// service capabilities using a hierarchical XML capability structure.
/// 
@JsonKey(name: 'Capabilities')
final ServiceCapabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class GetDoorInfoList  {
  /// Maximum number of entries to return. If Limit is omitted or if the
/// value of Limit is higher than what the device supports, then the device shall
/// return its maximum amount of entries.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// Start returning entries from this start reference. If not specified,
/// entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetDoorInfoList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetDoorInfoListResponse  {
  /// StartReference to use in next call to get the following items. If
/// absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of DoorInfo items.
@JsonKey(name: 'DoorInfo')
final DoorInfo? doorInfo;
  GetDoorInfoListResponse({
        this.nextStartReference,
        this.doorInfo,
  });
}

@JsonSerializable()
class GetDoorInfo  {
  /// Tokens of DoorInfo items to get.
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetDoorInfo({
        required this.token,
  });
}

@JsonSerializable()
class GetDoorInfoResponse  {
  /// List of DoorInfo items.
@JsonKey(name: 'DoorInfo')
final DoorInfo? doorInfo;
  GetDoorInfoResponse({
        this.doorInfo,
  });
}

@JsonSerializable()
class GetDoorList  {
  /// Maximum number of entries to return. If not specified, less than one
/// or higher than what the device supports, the number of items is determined by the
/// device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// Start returning entries from this start reference. If not specified,
/// entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetDoorList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetDoorListResponse  {
  /// StartReference to use in next call to get the following items. If
/// absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of Door items.
@JsonKey(name: 'Door')
final Door? door;
  GetDoorListResponse({
        this.nextStartReference,
        this.door,
  });
}

@JsonSerializable()
class GetDoors  {
  /// Tokens of Door items to get.
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetDoors({
        required this.token,
  });
}

@JsonSerializable()
class GetDoorsResponse  {
  /// List of Door items.
@JsonKey(name: 'Door')
final Door? door;
  GetDoorsResponse({
        this.door,
  });
}

@JsonSerializable()
class CreateDoor  {
  /// Door item to create
@JsonKey(name: 'Door')
final Door door;
  CreateDoor({
        required this.door,
  });
}

@JsonSerializable()
class CreateDoorResponse  {
  /// Token of created Door item
@JsonKey(name: 'Token')
final ReferenceToken token;
  CreateDoorResponse({
        required this.token,
  });
}

@JsonSerializable()
class SetDoor  {
  /// The Door item to create or modify
@JsonKey(name: 'Door')
final Door door;
  SetDoor({
        required this.door,
  });
}

class SetDoorResponse {}
@JsonSerializable()
class ModifyDoor  {
  /// The details of the door
@JsonKey(name: 'Door')
final Door door;
  ModifyDoor({
        required this.door,
  });
}

class ModifyDoorResponse {}
@JsonSerializable()
class DeleteDoor  {
  /// The Token of the door to delete.
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteDoor({
        required this.token,
  });
}

class DeleteDoorResponse {}
@JsonSerializable()
class GetDoorState  {
  /// Token of the Door instance to get the state for.
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetDoorState({
        required this.token,
  });
}

@JsonSerializable()
class GetDoorStateResponse  {
  /// The state of the door.
@JsonKey(name: 'DoorState')
final DoorState doorState;
  GetDoorStateResponse({
        required this.doorState,
  });
}

@JsonSerializable()
class AccessDoor  {
  /// Token of the Door instance to control.
@JsonKey(name: 'Token')
final ReferenceToken token;
  /// Optional - Indicates that the configured extended time should be
/// used.
/// 
@JsonKey(name: 'UseExtendedTime')
final bool? useExtendedTime;
  /// Optional - overrides ReleaseTime if specified.
@JsonKey(name: 'AccessTime')
final Duration? accessTime;
  /// Optional - overrides OpenTime if specified.
/// 
@JsonKey(name: 'OpenTooLongTime')
final Duration? openTooLongTime;
  /// Optional - overrides PreAlarmTime if specified.
@JsonKey(name: 'PreAlarmTime')
final Duration? preAlarmTime;
  /// Future extension.
@JsonKey(name: 'Extension')
final AccessDoorExtension? extension_;
  AccessDoor({
        required this.token,
        this.useExtendedTime,
        this.accessTime,
        this.openTooLongTime,
        this.preAlarmTime,
        this.extension_,
  });
}

class AccessDoorResponse {}
@JsonSerializable()
class LockDoor  {
  /// Token of the Door instance to control.
@JsonKey(name: 'Token')
final ReferenceToken token;
  LockDoor({
        required this.token,
  });
}

class LockDoorResponse {}
@JsonSerializable()
class UnlockDoor  {
  /// Token of the Door instance to control.
@JsonKey(name: 'Token')
final ReferenceToken token;
  UnlockDoor({
        required this.token,
  });
}

class UnlockDoorResponse {}
@JsonSerializable()
class BlockDoor  {
  /// Token of the Door instance to control.
@JsonKey(name: 'Token')
final ReferenceToken token;
  BlockDoor({
        required this.token,
  });
}

class BlockDoorResponse {}
@JsonSerializable()
class LockDownDoor  {
  /// Token of the Door instance to control.
@JsonKey(name: 'Token')
final ReferenceToken token;
  LockDownDoor({
        required this.token,
  });
}

class LockDownDoorResponse {}
@JsonSerializable()
class LockDownReleaseDoor  {
  /// Token of the Door instance to control.
@JsonKey(name: 'Token')
final ReferenceToken token;
  LockDownReleaseDoor({
        required this.token,
  });
}

class LockDownReleaseDoorResponse {}
@JsonSerializable()
class LockOpenDoor  {
  /// Token of the Door instance to control.
@JsonKey(name: 'Token')
final ReferenceToken token;
  LockOpenDoor({
        required this.token,
  });
}

class LockOpenDoorResponse {}
@JsonSerializable()
class LockOpenReleaseDoor  {
  /// Token of the Door instance to control.
@JsonKey(name: 'Token')
final ReferenceToken token;
  LockOpenReleaseDoor({
        required this.token,
  });
}

class LockOpenReleaseDoorResponse {}
@JsonSerializable()
class DoubleLockDoor  {
  /// Token of the Door instance to control.
@JsonKey(name: 'Token')
final ReferenceToken token;
  DoubleLockDoor({
        required this.token,
  });
}

class DoubleLockDoorResponse {}
