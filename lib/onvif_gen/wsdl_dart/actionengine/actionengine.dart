/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';
class GetSupportedActions {}
@JsonSerializable()
class GetSupportedActionsResponse  {
  /// Array of supported Action types
@JsonKey(name: 'SupportedActions')
final SupportedActions supportedActions;
  GetSupportedActionsResponse({
        required this.supportedActions,
  });
}

class GetActions {}
@JsonSerializable()
class GetActionsResponse  {
  /// Array of current Action configurations
@JsonKey(name: 'Action')
final Action? action;
  GetActionsResponse({
        this.action,
  });
}

@JsonSerializable()
class CreateActions  {
  /// Array of Actions to be configured on service provider
@JsonKey(name: 'Action')
final ActionConfiguration action;
  CreateActions({
        required this.action,
  });
}

@JsonSerializable()
class CreateActionsResponse  {
  /// Array of configured Actions with service provider assigned unique identifiers
@JsonKey(name: 'Action')
final Action? action;
  CreateActionsResponse({
        this.action,
  });
}

@JsonSerializable()
class DeleteActions  {
  /// Array of tokens referencing existing Action configurations to be removed
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteActions({
        required this.token,
  });
}

class DeleteActionsResponse {}
@JsonSerializable()
class ModifyActions  {
  /// Array of Action configurations to update the existing action configurations
@JsonKey(name: 'Action')
final Action action;
  ModifyActions({
        required this.action,
  });
}

class ModifyActionsResponse {}
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  @JsonKey(name: 'Capabilities')
final ActionEngineCapabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

class GetActionTriggers {}
@JsonSerializable()
class GetActionTriggersResponse  {
  /// Array of current Action Trigger configurations
@JsonKey(name: 'ActionTrigger')
final ActionTrigger? actionTrigger;
  GetActionTriggersResponse({
        this.actionTrigger,
  });
}

@JsonSerializable()
class CreateActionTriggers  {
  /// Action Triggers to be configured
@JsonKey(name: 'ActionTrigger')
final ActionTriggerConfiguration actionTrigger;
  CreateActionTriggers({
        required this.actionTrigger,
  });
}

@JsonSerializable()
class CreateActionTriggersResponse  {
  /// Returns configured Action Triggers with service provider assigned unique identifers
@JsonKey(name: 'ActionTrigger')
final ActionTrigger? actionTrigger;
  CreateActionTriggersResponse({
        this.actionTrigger,
  });
}

@JsonSerializable()
class ModifyActionTriggers  {
  /// Array of Action Trigger configurations to be updated.
@JsonKey(name: 'ActionTrigger')
final ActionTrigger actionTrigger;
  ModifyActionTriggers({
        required this.actionTrigger,
  });
}

class ModifyActionTriggersResponse {}
@JsonSerializable()
class DeleteActionTriggers  {
  /// Array of tokens referencing existing Action Trigger configurations to be removed
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteActionTriggers({
        required this.token,
  });
}

class DeleteActionTriggersResponse {}
/// Describes the configuration parameters of an action.
@JsonSerializable()
class ActionConfigDescription  {
  /// Action configuration parameter descriptions 
@JsonKey(name: 'ParameterDescription')
final ItemListDescription parameterDescription;
  /// Action type name
@JsonKey(name: 'Name')
final String name;
  ActionConfigDescription({
        required this.parameterDescription,
        required this.name,
  });
}

/// SupportedActions data structure lists the available action types that service provider supports. For each action type, data structure contains the action configuration parameters.
@JsonSerializable()
class SupportedActions  {
  /// 
///                   Lists the location of all schemas that are referenced in the supported actions. If the action descriptions reference data types in the ONVIF schema file,the ONVIF schema file MUST be explicitly listed.
///                   
@JsonKey(name: 'ActionContentSchemaLocation')
final String? actionContentSchemaLocation;
  /// List of actions supported by Action Engine Service provider.
@JsonKey(name: 'ActionDescription')
final ActionConfigDescription? actionDescription;
  @JsonKey(name: 'Extension')
final SupportedActionsExtension? extension_;
  SupportedActions({
        this.actionContentSchemaLocation,
        this.actionDescription,
        this.extension_,
  });
}

class SupportedActionsExtension {}
/// Action Engine Capabilities data structure contains the maximum number of supported actions and number of actions in use for generic as well as specific action types
@JsonSerializable()
class ActionEngineCapabilities  {
  /// Limits for each action type 
@JsonKey(name: 'ActionCapabilities')
final ActionTypeLimits? actionCapabilities;
  @JsonKey(name: 'Extension')
final ActionEngineCapabilitiesExtension? extension_;
  /// The maximum number of trigger configurations that the service provider can concurrently support
@JsonKey(name: 'MaximumTriggers')
final int maximumTriggers;
  /// The maximum number of actions that the service provider can concurrently support
@JsonKey(name: 'MaximumActions')
final int maximumActions;
  ActionEngineCapabilities({
        this.actionCapabilities,
        this.extension_,
        required this.maximumTriggers,
        required this.maximumActions,
  });
}

class ActionEngineCapabilitiesExtension {}
/// ActionTypeLimits data structure contains maximum and current usage information for a specific action type in the service provider
@JsonSerializable()
class ActionTypeLimits  {
  /// Action Type
@JsonKey(name: 'Type')
final String type;
  /// For the specific action type, the maximum number of actions that could be concurrently supported by the service provider 
@JsonKey(name: 'Maximum')
final int maximum;
  /// For the specific action type, the number of actions in use by the service provider 
@JsonKey(name: 'InUse')
final int? inUse;
  ActionTypeLimits({
        required this.type,
        required this.maximum,
        this.inUse,
  });
}

/// Action Configuration data type contains the configuration settings of action configuration parameters, service requester given action Name, and service provider supported action type value
@JsonSerializable()
class ActionConfiguration  {
  /// Action configuration parameter settings.
@JsonKey(name: 'Parameters')
final ItemList parameters;
  /// User given name. 
@JsonKey(name: 'Name')
final String name;
  /// Denotes the action type. 
@JsonKey(name: 'Type')
final String type;
  ActionConfiguration({
        required this.parameters,
        required this.name,
        required this.type,
  });
}

/// Action data type contains the configuration settings of one action instance and service provider assigned unique identifier for this action configuration.
@JsonSerializable()
class Action  {
  /// Action configuration contains action type, user given action name, and configuratin parameter settings.
@JsonKey(name: 'Configuration')
final ActionConfiguration configuration;
  /// Unique Action identifier that service provider assigned to the action configuration. 
@JsonKey(name: 'Token')
final ReferenceToken token;
  Action({
        required this.configuration,
        required this.token,
  });
}

/// Action Trigger configuration data type contains mandatory Topic Expression (Section Topic Filter in [Core Specification]), optional Message content expression (Section Message Content Filter in [Core Specification]), and set of actions to be triggered.
@JsonSerializable()
class ActionTriggerConfiguration  {
  /// Topic expression, for example, to trigger only for relays. Trigger based on event topic. 
@JsonKey(name: 'TopicExpression')
final TopicExpressionType topicExpression;
  /// Content expression, for example, to trigger only when the relay value is on. Trigger based on content data in event.
@JsonKey(name: 'ContentExpression')
final QueryExpressionType? contentExpression;
  /// Reference to actions to be triggered when the conditions are satisfied. 
@JsonKey(name: 'ActionToken')
final ReferenceToken? actionToken;
  @JsonKey(name: 'Extension')
final ActionTriggerConfigurationExtension? extension_;
  ActionTriggerConfiguration({
        required this.topicExpression,
        this.contentExpression,
        this.actionToken,
        this.extension_,
  });
}

class ActionTriggerConfigurationExtension {}
/// Action Trigger data type contains the service provider assigned unique identifier for the configuration and action trigger configuration data.
@JsonSerializable()
class ActionTrigger  {
  /// Action Trigger Configuration
@JsonKey(name: 'Configuration')
final ActionTriggerConfiguration configuration;
  /// Unique Action Trigger identifier that service provider assigned to the action trigger configuration. 
@JsonKey(name: 'Token')
final ReferenceToken token;
  ActionTrigger({
        required this.configuration,
        required this.token,
  });
}

@JsonSerializable()
class onvif_action  {
  @JsonKey(name: 'ActionDescription')
final ActionConfigDescription actionDescription;
  onvif_action({
        required this.actionDescription,
  });
}

@JsonSerializable()
class EMailServerConfiguration  {
  /// SMTP EMail Server configuration
@JsonKey(name: 'SMTPConfig')
final SMTPConfig sMTPConfig;
  /// POP EMail Server configuration
@JsonKey(name: 'POPConfig')
final POPConfig pOPConfig;
  /// Credentials configuration
@JsonKey(name: 'AuthenticationConfig')
final AuthenticationConfig authenticationConfig;
  EMailServerConfiguration({
        required this.sMTPConfig,
        required this.pOPConfig,
        required this.authenticationConfig,
  });
}

@JsonSerializable()
class SMTPConfig  {
  /// Destination SMTP Address configuration
@JsonKey(name: 'HostAddress')
final HostAddress hostAddress;
  /// 
@JsonKey(name: 'portNo')
final int portNo;
  SMTPConfig({
        required this.hostAddress,
        required this.portNo,
  });
}

@JsonSerializable()
class POPConfig  {
  /// Destination POP Server Address configuration
@JsonKey(name: 'HostAddress')
final HostAddress hostAddress;
  POPConfig({
        required this.hostAddress,
  });
}

@JsonSerializable()
class HostAddress  {
  /// IP Address
@JsonKey(name: 'Value')
final String value;
  /// IP Address format type such as IPv4 or IPv6
@JsonKey(name: 'formatType')
final AddressFormatType formatType;
  HostAddress({
        required this.value,
        required this.formatType,
  });
}

enum AddressFormatType {
  @JsonValue("hostname")
  hostname,
  @JsonValue("ipv4")
  ipv4,
  @JsonValue("ipv6")
  ipv6,
  @JsonValue("Extended")
  Extended,
}

@JsonSerializable()
class UserCredentials  {
  /// Username
@JsonKey(name: 'username')
final String username;
  /// Password
@JsonKey(name: 'password')
final Uint8List? password;
  @JsonKey(name: 'Extension')
final UserCredentialsExtension? extension_;
  UserCredentials({
        required this.username,
        this.password,
        this.extension_,
  });
}

class UserCredentialsExtension {}
@JsonSerializable()
class AuthenticationConfig  {
  /// Username-password
@JsonKey(name: 'User')
final UserCredentials user;
  /// Email server authentication mode
@JsonKey(name: 'mode')
final EMailAuthenticationMode mode;
  AuthenticationConfig({
        required this.user,
        required this.mode,
  });
}

enum EMailAuthenticationMode {
  @JsonValue("none")
  none,
  @JsonValue("SMTP")
  SMTP,
  @JsonValue("POPSMTP")
  POPSMTP,
  @JsonValue("Extended")
  Extended,
}

@JsonSerializable()
class EMailReceiverConfiguration  {
  /// Configuration for E-mail TO
@JsonKey(name: 'TO')
final String tO;
  /// Configuration for E-mail CC
@JsonKey(name: 'CC')
final String? cC;
  /// 
@JsonKey(name: 'Extension')
final EMailReceiverConfigurationExtension? extension_;
  EMailReceiverConfiguration({
        required this.tO,
        this.cC,
        this.extension_,
  });
}

class EMailReceiverConfigurationExtension {}
@JsonSerializable()
class EMailAttachmentConfiguration  {
  /// 
@JsonKey(name: 'FileName')
final String? fileName;
  /// 
@JsonKey(name: 'doSuffix')
final FileSuffixType? doSuffix;
  /// 
@JsonKey(name: 'Extension')
final EMailAttachmentConfigurationExtension? extension_;
  EMailAttachmentConfiguration({
        this.fileName,
        this.doSuffix,
        this.extension_,
  });
}

class EMailAttachmentConfigurationExtension {}
@JsonSerializable()
class EMailBodyTextConfiguration  {
  /// Whether content of E-mail message contains event data
@JsonKey(name: 'includeEvent')
final bool? includeEvent;
  /// 
@JsonKey(name: 'type')
final String? type;
  EMailBodyTextConfiguration({
        this.includeEvent,
        this.type,
  });
}

@JsonSerializable()
class MediaSource  {
  /// MediaSource profile reference token
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  MediaSource({
        required this.profileToken,
  });
}

@JsonSerializable()
class HttpHostConfigurations  {
  /// Destination HTTP Server configuration
@JsonKey(name: 'HttpDestination')
final HttpDestinationConfiguration httpDestination;
  /// 
@JsonKey(name: 'Extension')
final HttpHostConfigurationsExtension? extension_;
  HttpHostConfigurations({
        required this.httpDestination,
        this.extension_,
  });
}

class HttpHostConfigurationsExtension {}
@JsonSerializable()
class HttpDestinationConfiguration  {
  /// Destination HTTP Server address configuration
@JsonKey(name: 'HostAddress')
final HttpHostAddress hostAddress;
  /// User Credentials configuration for destination HTTP Server
@JsonKey(name: 'HttpAuthentication')
final HttpAuthenticationConfiguration? httpAuthentication;
  /// 
@JsonKey(name: 'Extension')
final HttpDestinationConfigurationExtension? extension_;
  /// URI for POST Message destination
@JsonKey(name: 'uri')
final String? uri;
  /// HTTP/HTTPS protocol selection (default is http)
@JsonKey(name: 'protocol')
final HttpProtocolType? protocol;
  HttpDestinationConfiguration({
        required this.hostAddress,
        this.httpAuthentication,
        this.extension_,
        this.uri,
        this.protocol,
  });
}

enum HttpProtocolType {
  @JsonValue("http")
  http,
  @JsonValue("https")
  https,
  @JsonValue("Extended")
  Extended,
}

class HttpDestinationConfigurationExtension {}
@JsonSerializable()
class HttpAuthenticationConfiguration  {
  /// User credentials
@JsonKey(name: 'User')
final UserCredentials? user;
  /// 
@JsonKey(name: 'Extension')
final HttpAuthenticationConfigurationExtension? extension_;
  /// HTTP Authentication Method
@JsonKey(name: 'method')
final HttpAuthenticationMethodType? method;
  HttpAuthenticationConfiguration({
        this.user,
        this.extension_,
        this.method,
  });
}

class HttpAuthenticationConfigurationExtension {}
enum HttpAuthenticationMethodType {
  @JsonValue("none")
  none,
  @JsonValue("MD5Digest")
  MD5Digest,
  @JsonValue("Extended")
  Extended,
}

@JsonSerializable()
class HttpHostAddress  {
  /// Destination HTTP Server IP Address
@JsonKey(name: 'Value')
final String value;
  /// IPv4 or IPv6
@JsonKey(name: 'formatType')
final AddressFormatType formatType;
  /// Port Number if different from 80
@JsonKey(name: 'portNo')
final int? portNo;
  HttpHostAddress({
        required this.value,
        required this.formatType,
        this.portNo,
  });
}

@JsonSerializable()
class PostContentConfiguration  {
  /// MediaSource reference when the media is attached to POST message
@JsonKey(name: 'MediaReference')
final MediaSource? mediaReference;
  /// Configuration for POST Message content
@JsonKey(name: 'PostBody')
final PostBodyConfiguration postBody;
  PostContentConfiguration({
        this.mediaReference,
        required this.postBody,
  });
}

@JsonSerializable()
class PostBodyConfiguration  {
  /// 
@JsonKey(name: 'formData')
final String? formData;
  /// Whether include event into POST message
@JsonKey(name: 'includeEvent')
final bool? includeEvent;
  /// Whether attach media into POST message
@JsonKey(name: 'includeMedia')
final bool? includeMedia;
  PostBodyConfiguration({
        this.formData,
        this.includeEvent,
        this.includeMedia,
  });
}

@JsonSerializable()
class FtpHostConfigurations  {
  /// FTP Action destination configuration
@JsonKey(name: 'FtpDestination')
final FtpDestinationConfiguration ftpDestination;
  /// 
@JsonKey(name: 'Extension')
final FtpHostConfigurationsExtension? extension_;
  FtpHostConfigurations({
        required this.ftpDestination,
        this.extension_,
  });
}

class FtpHostConfigurationsExtension {}
@JsonSerializable()
class FtpDestinationConfiguration  {
  /// FTP Server IP Address
@JsonKey(name: 'HostAddress')
final FtpHostAddress hostAddress;
  /// Upload Directory Path
@JsonKey(name: 'UploadPath')
final String uploadPath;
  /// User credentials confguration for target FTP Server
@JsonKey(name: 'FtpAuthentication')
final FtpAuthenticationConfiguration ftpAuthentication;
  @JsonKey(name: 'Extension')
final FtpDestinationConfigurationExtension? extension_;
  FtpDestinationConfiguration({
        required this.hostAddress,
        required this.uploadPath,
        required this.ftpAuthentication,
        this.extension_,
  });
}

class FtpDestinationConfigurationExtension {}
@JsonSerializable()
class FtpAuthenticationConfiguration  {
  /// User Credentials
@JsonKey(name: 'User')
final UserCredentials? user;
  @JsonKey(name: 'Extension')
final FtpAuthenticationConfigurationExtension? extension_;
  FtpAuthenticationConfiguration({
        this.user,
        this.extension_,
  });
}

class FtpAuthenticationConfigurationExtension {}
@JsonSerializable()
class FtpHostAddress  {
  /// FTP Server IP Address
@JsonKey(name: 'Value')
final String value;
  /// IPv4 or IPv6
@JsonKey(name: 'formatType')
final AddressFormatType formatType;
  /// Port Number
@JsonKey(name: 'portNo')
final int? portNo;
  FtpHostAddress({
        required this.value,
        required this.formatType,
        this.portNo,
  });
}

@JsonSerializable()
class FtpContent  {
  /// 
@JsonKey(name: 'FtpContentConfig')
final FtpContentConfiguration ftpContentConfig;
  FtpContent({
        required this.ftpContentConfig,
  });
}

@JsonSerializable()
class FtpFileNameConfigurations  {
  /// Name of file
@JsonKey(name: 'file_name')
final String? file_name;
  /// Suffix of file
@JsonKey(name: 'suffix')
final FileSuffixType? suffix;
  FtpFileNameConfigurations({
        this.file_name,
        this.suffix,
  });
}

enum FileSuffixType {
  @JsonValue("none")
  none,
  @JsonValue("sequence")
  sequence,
  @JsonValue("dateTime")
  dateTime,
  @JsonValue("Extended")
  Extended,
}

@JsonSerializable()
class FtpContentConfiguration  {
  /// Type of FTP Upload action
@JsonKey(name: 'Type')
final String type;
  FtpContentConfiguration({
        required this.type,
  });
}

@JsonSerializable()
class FtpContentConfigurationUploadImages  {
  /// Upload Image action; how long?
@JsonKey(name: 'HowLong')
final Duration howLong;
  /// Upload Image action; sample interval?
@JsonKey(name: 'SampleInterval')
final Duration sampleInterval;
  /// Upload Image action; name of destination file
@JsonKey(name: 'FileName')
final FtpFileNameConfigurations fileName;
  FtpContentConfigurationUploadImages({
        required this.howLong,
        required this.sampleInterval,
        required this.fileName,
  });
}

@JsonSerializable()
class FtpContentConfigurationUploadFile  {
  /// Name of source file
@JsonKey(name: 'sourceFileName')
final String sourceFileName;
  /// Name of destination file
@JsonKey(name: 'destinationFileName')
final String destinationFileName;
  FtpContentConfigurationUploadFile({
        required this.sourceFileName,
        required this.destinationFileName,
  });
}

@JsonSerializable()
class SMSProviderConfiguration  {
  /// SMS Provider's URL 
@JsonKey(name: 'ProviderURL')
final String providerURL;
  /// Username and password
@JsonKey(name: 'User')
final UserCredentials user;
  SMSProviderConfiguration({
        required this.providerURL,
        required this.user,
  });
}

@JsonSerializable()
class SMSSenderConfiguration  {
  /// Sender's e-mail address
@JsonKey(name: 'EMail')
final String eMail;
  SMSSenderConfiguration({
        required this.eMail,
  });
}

@JsonSerializable()
class SMSMessage  {
  /// Text Message
@JsonKey(name: 'Text')
final String text;
  SMSMessage({
        required this.text,
  });
}

@JsonSerializable()
class TriggeredRecordingConfiguration  {
  /// Length of recording time before the triggering event
@JsonKey(name: 'PreRecordDuration')
final Duration preRecordDuration;
  /// Recording after alarm recording duration
@JsonKey(name: 'PostRecordDuration')
final Duration postRecordDuration;
  /// Record duration
@JsonKey(name: 'RecordDuration')
final Duration recordDuration;
  /// Recording frame rate
@JsonKey(name: 'RecordFrameRate')
final int? recordFrameRate;
  /// Whether Audio recording on/off
@JsonKey(name: 'DoRecordAudio')
final bool doRecordAudio;
  TriggeredRecordingConfiguration({
        required this.preRecordDuration,
        required this.postRecordDuration,
        required this.recordDuration,
        this.recordFrameRate,
        required this.doRecordAudio,
  });
}

@JsonSerializable()
class RecordingActionConfiguration  {
  /// Recording configuration
@JsonKey(name: 'RecordConfig')
final TriggeredRecordingConfiguration recordConfig;
  RecordingActionConfiguration({
        required this.recordConfig,
  });
}

