/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capabilities for the receiver service is returned in the Capabilities element.
@JsonKey(name: 'Capabilities')
final Capabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class Capabilities  {
  /// Indicates that the device can receive RTP multicast streams.
@JsonKey(name: 'RTP_Multicast')
final bool rTP_Multicast;
  /// Indicates that the device can receive RTP/TCP streams
@JsonKey(name: 'RTP_TCP')
final bool rTP_TCP;
  /// Indicates that the device can receive RTP/RTSP/TCP streams.
@JsonKey(name: 'RTP_RTSP_TCP')
final bool rTP_RTSP_TCP;
  /// The maximum number of receivers supported by the device.
@JsonKey(name: 'SupportedReceivers')
final int supportedReceivers;
  /// The maximum allowed length for RTSP URIs (Minimum and default value is 128 octet).
@JsonKey(name: 'MaximumRTSPURILength')
final int maximumRTSPURILength;
  Capabilities({
        required this.rTP_Multicast,
        required this.rTP_TCP,
        required this.rTP_RTSP_TCP,
        required this.supportedReceivers,
        required this.maximumRTSPURILength,
  });
}

class GetReceivers {}
@JsonSerializable()
class GetReceiversResponse  {
  /// A list of all receivers that currently exist on the device.
@JsonKey(name: 'Receivers')
final Receiver? receivers;
  GetReceiversResponse({
        this.receivers,
  });
}

@JsonSerializable()
class GetReceiver  {
  /// The token of the receiver to be retrieved.
@JsonKey(name: 'ReceiverToken')
final ReferenceToken receiverToken;
  GetReceiver({
        required this.receiverToken,
  });
}

@JsonSerializable()
class GetReceiverResponse  {
  /// The details of the receiver.
@JsonKey(name: 'Receiver')
final Receiver receiver;
  GetReceiverResponse({
        required this.receiver,
  });
}

@JsonSerializable()
class CreateReceiver  {
  /// The initial configuration for the new receiver.
@JsonKey(name: 'Configuration')
final ReceiverConfiguration configuration;
  CreateReceiver({
        required this.configuration,
  });
}

@JsonSerializable()
class CreateReceiverResponse  {
  /// The details of the receiver that was created.
@JsonKey(name: 'Receiver')
final Receiver receiver;
  CreateReceiverResponse({
        required this.receiver,
  });
}

@JsonSerializable()
class DeleteReceiver  {
  /// The token of the receiver to be deleted.
@JsonKey(name: 'ReceiverToken')
final ReferenceToken receiverToken;
  DeleteReceiver({
        required this.receiverToken,
  });
}

class DeleteReceiverResponse {}
@JsonSerializable()
class ConfigureReceiver  {
  /// The token of the receiver to be configured.
@JsonKey(name: 'ReceiverToken')
final ReferenceToken receiverToken;
  /// The new configuration for the receiver.
@JsonKey(name: 'Configuration')
final ReceiverConfiguration configuration;
  ConfigureReceiver({
        required this.receiverToken,
        required this.configuration,
  });
}

class ConfigureReceiverResponse {}
@JsonSerializable()
class SetReceiverMode  {
  /// The token of the receiver to be changed.
@JsonKey(name: 'ReceiverToken')
final ReferenceToken receiverToken;
  /// The new receiver mode. Options available are:
@JsonKey(name: 'Mode')
final ReceiverMode mode;
  SetReceiverMode({
        required this.receiverToken,
        required this.mode,
  });
}

class SetReceiverModeResponse {}
@JsonSerializable()
class GetReceiverState  {
  /// The token of the receiver to be queried.
@JsonKey(name: 'ReceiverToken')
final ReferenceToken receiverToken;
  GetReceiverState({
        required this.receiverToken,
  });
}

@JsonSerializable()
class GetReceiverStateResponse  {
  /// Description of the current receiver state.
@JsonKey(name: 'ReceiverState')
final ReceiverStateInformation receiverState;
  GetReceiverStateResponse({
        required this.receiverState,
  });
}

