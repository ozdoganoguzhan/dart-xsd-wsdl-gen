/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capabilities for the recording service is returned in the Capabilities element.
@JsonKey(name: 'Capabilities')
final Capabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class Capabilities  {
  /// Indication if the device supports dynamic creation and deletion of recordings
@JsonKey(name: 'DynamicRecordings')
final bool dynamicRecordings;
  /// Indication if the device supports dynamic creation and deletion of tracks
@JsonKey(name: 'DynamicTracks')
final bool dynamicTracks;
  /// Indication which encodings are supported for recording. The list may contain one or more enumeration values of tt:VideoEncoding and tt:AudioEncoding. For encodings that are neither defined in tt:VideoEncoding nor tt:AudioEncoding the device shall use the IANA defintions. Note, that a device without audio support shall not return audio encodings.  
@JsonKey(name: 'Encoding')
final EncodingTypes encoding;
  /// Maximum supported bit rate for all tracks of a recording in kBit/s.
@JsonKey(name: 'MaxRate')
final double maxRate;
  /// Maximum supported bit rate for all recordings in kBit/s.
@JsonKey(name: 'MaxTotalRate')
final double maxTotalRate;
  /// Maximum number of recordings supported. (Integer values only.)
@JsonKey(name: 'MaxRecordings')
final double maxRecordings;
  /// Maximum total number of supported recording jobs by the device.
@JsonKey(name: 'MaxRecordingJobs')
final int maxRecordingJobs;
  /// Indication if the device supports the GetRecordingOptions command.
@JsonKey(name: 'Options')
final bool options;
  /// Indication if the device supports recording metadata.
@JsonKey(name: 'MetadataRecording')
final bool metadataRecording;
  ///  
/// Indication that the device supports ExportRecordedData command for the listed export file formats.
/// The list shall return at least one export file format value. The value of 'ONVIF' refers to
/// ONVIF Export File Format specification.
/// 
@JsonKey(name: 'SupportedExportFileFormats')
final StringAttrList supportedExportFileFormats;
  Capabilities({
        required this.dynamicRecordings,
        required this.dynamicTracks,
        required this.encoding,
        required this.maxRate,
        required this.maxTotalRate,
        required this.maxRecordings,
        required this.maxRecordingJobs,
        required this.options,
        required this.metadataRecording,
        required this.supportedExportFileFormats,
  });
}

typedef EncodingTypes = List<String>;

@JsonSerializable()
class CreateRecording  {
  /// Initial configuration for the recording.
@JsonKey(name: 'RecordingConfiguration')
final RecordingConfiguration recordingConfiguration;
  CreateRecording({
        required this.recordingConfiguration,
  });
}

@JsonSerializable()
class CreateRecordingResponse  {
  /// The reference to the created recording.
@JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  CreateRecordingResponse({
        required this.recordingToken,
  });
}

@JsonSerializable()
class DeleteRecording  {
  /// The reference of the recording to be deleted.
@JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  DeleteRecording({
        required this.recordingToken,
  });
}

class DeleteRecordingResponse {}
class GetRecordings {}
@JsonSerializable()
class GetRecordingsResponse  {
  /// List of recording items.
@JsonKey(name: 'RecordingItem')
final GetRecordingsResponseItem? recordingItem;
  GetRecordingsResponse({
        this.recordingItem,
  });
}

@JsonSerializable()
class SetRecordingConfiguration  {
  /// Token of the recording that shall be changed.
@JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  /// The new configuration.
@JsonKey(name: 'RecordingConfiguration')
final RecordingConfiguration recordingConfiguration;
  SetRecordingConfiguration({
        required this.recordingToken,
        required this.recordingConfiguration,
  });
}

class SetRecordingConfigurationResponse {}
@JsonSerializable()
class GetRecordingConfiguration  {
  /// Token of the configuration to be retrieved.
@JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  GetRecordingConfiguration({
        required this.recordingToken,
  });
}

@JsonSerializable()
class GetRecordingConfigurationResponse  {
  /// Configuration of the recording.
@JsonKey(name: 'RecordingConfiguration')
final RecordingConfiguration recordingConfiguration;
  GetRecordingConfigurationResponse({
        required this.recordingConfiguration,
  });
}

@JsonSerializable()
class CreateTrack  {
  /// Identifies the recording to which a track shall be added.
@JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  /// The configuration of the new track.
@JsonKey(name: 'TrackConfiguration')
final TrackConfiguration trackConfiguration;
  CreateTrack({
        required this.recordingToken,
        required this.trackConfiguration,
  });
}

@JsonSerializable()
class CreateTrackResponse  {
  /// The TrackToken shall identify the newly created track. The
/// TrackToken shall be unique within the recoding to which
/// the new track belongs.
@JsonKey(name: 'TrackToken')
final TrackReference trackToken;
  CreateTrackResponse({
        required this.trackToken,
  });
}

@JsonSerializable()
class DeleteTrack  {
  /// Token of the recording the track belongs to.
@JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  /// Token of the track to be deleted.
@JsonKey(name: 'TrackToken')
final TrackReference trackToken;
  DeleteTrack({
        required this.recordingToken,
        required this.trackToken,
  });
}

class DeleteTrackResponse {}
@JsonSerializable()
class GetTrackConfiguration  {
  /// Token of the recording the track belongs to.
@JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  /// Token of the track.
@JsonKey(name: 'TrackToken')
final TrackReference trackToken;
  GetTrackConfiguration({
        required this.recordingToken,
        required this.trackToken,
  });
}

@JsonSerializable()
class GetTrackConfigurationResponse  {
  /// Configuration of the track.
@JsonKey(name: 'TrackConfiguration')
final TrackConfiguration trackConfiguration;
  GetTrackConfigurationResponse({
        required this.trackConfiguration,
  });
}

@JsonSerializable()
class SetTrackConfiguration  {
  /// Token of the recording the track belongs to.
@JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  /// Token of the track to be modified.
@JsonKey(name: 'TrackToken')
final TrackReference trackToken;
  /// New configuration for the track.
@JsonKey(name: 'TrackConfiguration')
final TrackConfiguration trackConfiguration;
  SetTrackConfiguration({
        required this.recordingToken,
        required this.trackToken,
        required this.trackConfiguration,
  });
}

class SetTrackConfigurationResponse {}
@JsonSerializable()
class CreateRecordingJob  {
  /// The initial configuration of the new recording job.
@JsonKey(name: 'JobConfiguration')
final RecordingJobConfiguration jobConfiguration;
  CreateRecordingJob({
        required this.jobConfiguration,
  });
}

@JsonSerializable()
class CreateRecordingJobResponse  {
  /// The JobToken shall identify the created recording job.
@JsonKey(name: 'JobToken')
final RecordingJobReference jobToken;
  /// 
/// The JobConfiguration structure shall be the configuration as it is used by the device. This may be different from the
/// JobConfiguration passed to CreateRecordingJob.
@JsonKey(name: 'JobConfiguration')
final RecordingJobConfiguration jobConfiguration;
  CreateRecordingJobResponse({
        required this.jobToken,
        required this.jobConfiguration,
  });
}

@JsonSerializable()
class DeleteRecordingJob  {
  /// The token of the job to be deleted.
@JsonKey(name: 'JobToken')
final RecordingJobReference jobToken;
  DeleteRecordingJob({
        required this.jobToken,
  });
}

class DeleteRecordingJobResponse {}
class GetRecordingJobs {}
@JsonSerializable()
class GetRecordingJobsResponse  {
  /// List of recording jobs.
@JsonKey(name: 'JobItem')
final GetRecordingJobsResponseItem? jobItem;
  GetRecordingJobsResponse({
        this.jobItem,
  });
}

@JsonSerializable()
class SetRecordingJobConfiguration  {
  /// Token of the job to be modified.
@JsonKey(name: 'JobToken')
final RecordingJobReference jobToken;
  /// New configuration of the recording job.
@JsonKey(name: 'JobConfiguration')
final RecordingJobConfiguration jobConfiguration;
  SetRecordingJobConfiguration({
        required this.jobToken,
        required this.jobConfiguration,
  });
}

@JsonSerializable()
class SetRecordingJobConfigurationResponse  {
  /// The JobConfiguration structure shall be the configuration
/// as it is used by the device. This may be different from the JobConfiguration passed to SetRecordingJobConfiguration.
@JsonKey(name: 'JobConfiguration')
final RecordingJobConfiguration jobConfiguration;
  SetRecordingJobConfigurationResponse({
        required this.jobConfiguration,
  });
}

@JsonSerializable()
class GetRecordingJobConfiguration  {
  /// Token of the recording job.
@JsonKey(name: 'JobToken')
final RecordingJobReference jobToken;
  GetRecordingJobConfiguration({
        required this.jobToken,
  });
}

@JsonSerializable()
class GetRecordingJobConfigurationResponse  {
  /// Current configuration of the recording job.
@JsonKey(name: 'JobConfiguration')
final RecordingJobConfiguration jobConfiguration;
  GetRecordingJobConfigurationResponse({
        required this.jobConfiguration,
  });
}

@JsonSerializable()
class SetRecordingJobMode  {
  /// Token of the recording job.
@JsonKey(name: 'JobToken')
final RecordingJobReference jobToken;
  /// The new mode for the recording job.
@JsonKey(name: 'Mode')
final RecordingJobMode mode;
  SetRecordingJobMode({
        required this.jobToken,
        required this.mode,
  });
}

class SetRecordingJobModeResponse {}
@JsonSerializable()
class GetRecordingJobState  {
  /// Token of the recording job.
@JsonKey(name: 'JobToken')
final RecordingJobReference jobToken;
  GetRecordingJobState({
        required this.jobToken,
  });
}

@JsonSerializable()
class GetRecordingJobStateResponse  {
  /// The current state of the recording job.
@JsonKey(name: 'State')
final RecordingJobStateInformation state;
  GetRecordingJobStateResponse({
        required this.state,
  });
}

@JsonSerializable()
class GetRecordingOptions  {
  /// Token of the recording.
@JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  GetRecordingOptions({
        required this.recordingToken,
  });
}

@JsonSerializable()
class GetRecordingOptionsResponse  {
  /// Configuration of the recording.
@JsonKey(name: 'Options')
final RecordingOptions options;
  GetRecordingOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class ExportRecordedData  {
  /// Optional parameter that specifies start time for the exporting.
@JsonKey(name: 'StartPoint')
final DateTime? startPoint;
  /// Optional parameter that specifies end time for the exporting.
@JsonKey(name: 'EndPoint')
final DateTime? endPoint;
  /// Indicates the selection criterion on the existing recordings. .
@JsonKey(name: 'SearchScope')
final SearchScope searchScope;
  /// Indicates which export file format to be used.
@JsonKey(name: 'FileFormat')
final String fileFormat;
  /// Indicates the target storage and relative directory path.
@JsonKey(name: 'StorageDestination')
final StorageReferencePath storageDestination;
  ExportRecordedData({
        this.startPoint,
        this.endPoint,
        required this.searchScope,
        required this.fileFormat,
        required this.storageDestination,
  });
}

@JsonSerializable()
class ExportRecordedDataResponse  {
  /// Unique operation token for client to associate the relevant events.
@JsonKey(name: 'OperationToken')
final ReferenceToken operationToken;
  /// List of exported file names. The device can also use AsyncronousOperationStatus event to publish this list.
@JsonKey(name: 'FileNames')
final String? fileNames;
  ExportRecordedDataResponse({
        required this.operationToken,
        this.fileNames,
  });
}

@JsonSerializable()
class StopExportRecordedData  {
  /// Unique ExportRecordedData operation token
@JsonKey(name: 'OperationToken')
final ReferenceToken operationToken;
  StopExportRecordedData({
        required this.operationToken,
  });
}

@JsonSerializable()
class StopExportRecordedDataResponse  {
  /// Progress percentage of ExportRecordedData operation.
@JsonKey(name: 'Progress')
final double progress;
  ///  
@JsonKey(name: 'FileProgressStatus')
final ArrayOfFileProgress fileProgressStatus;
  StopExportRecordedDataResponse({
        required this.progress,
        required this.fileProgressStatus,
  });
}

@JsonSerializable()
class GetExportRecordedDataState  {
  /// Unique ExportRecordedData operation token
@JsonKey(name: 'OperationToken')
final ReferenceToken operationToken;
  GetExportRecordedDataState({
        required this.operationToken,
  });
}

@JsonSerializable()
class GetExportRecordedDataStateResponse  {
  /// Progress percentage of ExportRecordedData operation.
@JsonKey(name: 'Progress')
final double progress;
  ///  
@JsonKey(name: 'FileProgressStatus')
final ArrayOfFileProgress fileProgressStatus;
  GetExportRecordedDataStateResponse({
        required this.progress,
        required this.fileProgressStatus,
  });
}

@JsonSerializable()
class RecordingOptions  {
  @JsonKey(name: 'Job')
final JobOptions job;
  @JsonKey(name: 'Track')
final TrackOptions track;
  RecordingOptions({
        required this.job,
        required this.track,
  });
}

@JsonSerializable()
class JobOptions  {
  /// Number of spare jobs that can be created for the recording.
@JsonKey(name: 'Spare')
final int spare;
  /// A device that supports recording of a restricted set of Media/Media2 Service Profiles returns the list of profiles that can be recorded on the given Recording.
@JsonKey(name: 'CompatibleSources')
final StringAttrList compatibleSources;
  JobOptions({
        required this.spare,
        required this.compatibleSources,
  });
}

@JsonSerializable()
class TrackOptions  {
  /// Total spare number of tracks that can be added to this recording.
@JsonKey(name: 'SpareTotal')
final int spareTotal;
  /// Number of spare Video tracks that can be added to this recording.
@JsonKey(name: 'SpareVideo')
final int spareVideo;
  /// Number of spare Aduio tracks that can be added to this recording.
@JsonKey(name: 'SpareAudio')
final int spareAudio;
  /// Number of spare Metadata tracks that can be added to this recording.
@JsonKey(name: 'SpareMetadata')
final int spareMetadata;
  TrackOptions({
        required this.spareTotal,
        required this.spareVideo,
        required this.spareAudio,
        required this.spareMetadata,
  });
}

