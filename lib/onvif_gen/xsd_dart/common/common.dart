/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

/// Unique identifier for a physical or logical resource.
/// Tokens should be assigned such that they are unique within a device. Tokens must be at least unique within its class.
/// Length up to 64 characters.
@JsonSerializable()
class ReferenceToken  {
  @JsonKey(name: 'val')
final String val;
  ReferenceToken({
        required this.val,
  });
}

/// Range of values greater equal Min value and less equal Max value.
@JsonSerializable()
class IntRange  {
  @JsonKey(name: 'Min')
final int min;
  @JsonKey(name: 'Max')
final int max;
  IntRange({
        required this.min,
        required this.max,
  });
}

@JsonSerializable()
class Vector2D  {
  @JsonKey(name: 'x')
final double x;
  @JsonKey(name: 'y')
final double y;
  /// 
///   Pan/tilt coordinate space selector. The following options are defined:
///  http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace
///  http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace
///  http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace
///  http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace
/// 
/// 
@JsonKey(name: 'space')
final String? space;
  Vector2D({
        required this.x,
        required this.y,
        this.space,
  });
}

@JsonSerializable()
class Vector1D  {
  @JsonKey(name: 'x')
final double x;
  /// 
/// Zoom coordinate space selector. The following options are defined:
///  http://www.onvif.org/ver10/tptz/ZoomSpaces/PositionGenericSpace
///  http://www.onvif.org/ver10/tptz/ZoomSpaces/TranslationGenericSpace
///  http://www.onvif.org/ver10/tptz/ZoomSpaces/VelocityGenericSpace
///  http://www.onvif.org/ver10/tptz/ZoomSpaces/ZoomGenericSpeedSpace
/// 
/// 
@JsonKey(name: 'space')
final String? space;
  Vector1D({
        required this.x,
        this.space,
  });
}

@JsonSerializable()
class PTZVector  {
  /// Pan and tilt position. The x component corresponds to pan and the y component to tilt.
@JsonKey(name: 'PanTilt')
final Vector2D? panTilt;
  /// 
///             A zoom position.
///           
@JsonKey(name: 'Zoom')
final Vector1D? zoom;
  PTZVector({
        this.panTilt,
        this.zoom,
  });
}

@JsonSerializable()
class PTZStatus  {
  /// 
///             Specifies the absolute position of the PTZ unit together with the Space references. The default absolute spaces of the corresponding PTZ configuration MUST be referenced within the Position element.
///           
@JsonKey(name: 'Position')
final PTZVector? position;
  /// 
///             Indicates if the Pan/Tilt/Zoom device unit is currently moving, idle or in an unknown state.
///           
@JsonKey(name: 'MoveStatus')
final PTZMoveStatus? moveStatus;
  /// 
///             States a current PTZ error.
///           
@JsonKey(name: 'Error')
final String? error;
  /// 
///             Specifies the UTC time when this status was generated.
///           
@JsonKey(name: 'UtcTime')
final DateTime utcTime;
  PTZStatus({
        this.position,
        this.moveStatus,
        this.error,
        required this.utcTime,
  });
}

@JsonSerializable()
class PTZMoveStatus  {
  /// 
///           
@JsonKey(name: 'PanTilt')
final MoveStatus? panTilt;
  /// 
///           
@JsonKey(name: 'Zoom')
final MoveStatus? zoom;
  PTZMoveStatus({
        this.panTilt,
        this.zoom,
  });
}

enum MoveStatus {
  @JsonValue("IDLE")
  IDLE,
  @JsonValue("MOVING")
  MOVING,
  @JsonValue("UNKNOWN")
  UNKNOWN,
}

@JsonSerializable()
class Vector  {
  @JsonKey(name: 'x')
final double x;
  @JsonKey(name: 'y')
final double y;
  Vector({
        required this.x,
        required this.y,
  });
}

@JsonSerializable()
class Rectangle  {
  @JsonKey(name: 'bottom')
final double bottom;
  @JsonKey(name: 'top')
final double top;
  @JsonKey(name: 'right')
final double right;
  @JsonKey(name: 'left')
final double left;
  Rectangle({
        required this.bottom,
        required this.top,
        required this.right,
        required this.left,
  });
}

@JsonSerializable()
class Polygon  {
  @JsonKey(name: 'Point')
final Vector point;
  Polygon({
        required this.point,
  });
}

@JsonSerializable()
class Color  {
  @JsonKey(name: 'X')
final double x;
  @JsonKey(name: 'Y')
final double y;
  @JsonKey(name: 'Z')
final double z;
  /// 
/// Acceptable values:
/// 
/// http://www.onvif.org/ver10/colorspace/YCbCr - YCbCr
/// X attribute = Y value
/// Y attribute = Cb value
/// Z attribute = Cr value
/// 
/// http://www.onvif.org/ver10/colorspace/RGB - RGB
/// X attribute = R value
/// Y attribute = G value
/// Z attribute = B value
/// 
/// 
/// If the Colorspace attribute is absent, YCbCr is implied.
/// 
/// Deprecated values:
/// 
/// http://www.onvif.org/ver10/colorspace/CIELUV - CIE LUV
/// http://www.onvif.org/ver10/colorspace/CIELAB - CIE 1976 (L*a*b*)
/// http://www.onvif.org/ver10/colorspace/HSV - HSV
/// 
/// 
@JsonKey(name: 'Colorspace')
final String colorspace;
  Color({
        required this.x,
        required this.y,
        required this.z,
        required this.colorspace,
  });
}

@JsonSerializable()
class ColorCovariance  {
  @JsonKey(name: 'XX')
final double xX;
  @JsonKey(name: 'YY')
final double yY;
  @JsonKey(name: 'ZZ')
final double zZ;
  @JsonKey(name: 'XY')
final double xY;
  @JsonKey(name: 'XZ')
final double xZ;
  @JsonKey(name: 'YZ')
final double yZ;
  /// 
/// Acceptable values are the same as in tt:Color.
/// 
@JsonKey(name: 'Colorspace')
final String colorspace;
  ColorCovariance({
        required this.xX,
        required this.yY,
        required this.zZ,
        required this.xY,
        required this.xZ,
        required this.yZ,
        required this.colorspace,
  });
}

@JsonSerializable()
class Transformation  {
  @JsonKey(name: 'Translate')
final Vector? translate;
  @JsonKey(name: 'Scale')
final Vector? scale;
  @JsonKey(name: 'Extension')
final TransformationExtension? extension_;
  Transformation({
        this.translate,
        this.scale,
        this.extension_,
  });
}

class TransformationExtension {}
@JsonSerializable()
class GeoLocation  {
  /// East west location as angle.
@JsonKey(name: 'lon')
final double lon;
  /// North south location as angle.
@JsonKey(name: 'lat')
final double lat;
  /// Hight in meters above sea level.
@JsonKey(name: 'elevation')
final double elevation;
  GeoLocation({
        required this.lon,
        required this.lat,
        required this.elevation,
  });
}

@JsonSerializable()
class GeoOrientation  {
  /// Rotation around the x axis.
@JsonKey(name: 'roll')
final double roll;
  /// Rotation around the y axis.
@JsonKey(name: 'pitch')
final double pitch;
  /// Rotation around the z axis.
@JsonKey(name: 'yaw')
final double yaw;
  GeoOrientation({
        required this.roll,
        required this.pitch,
        required this.yaw,
  });
}

@JsonSerializable()
class LocalLocation  {
  /// East west location as angle.
@JsonKey(name: 'x')
final double x;
  /// North south location as angle.
@JsonKey(name: 'y')
final double y;
  /// Offset in meters from the sea level.
@JsonKey(name: 'z')
final double z;
  LocalLocation({
        required this.x,
        required this.y,
        required this.z,
  });
}

@JsonSerializable()
class LocalOrientation  {
  /// Rotation around the y axis.
@JsonKey(name: 'pan')
final double pan;
  /// Rotation around the z axis.
@JsonKey(name: 'tilt')
final double tilt;
  /// Rotation around the x axis.
@JsonKey(name: 'roll')
final double roll;
  LocalOrientation({
        required this.pan,
        required this.tilt,
        required this.roll,
  });
}

enum Entity {
  @JsonValue("Device")
  Device,
  @JsonValue("VideoSource")
  VideoSource,
  @JsonValue("AudioSource")
  AudioSource,
}

@JsonSerializable()
class LocationEntity  {
  /// Location on earth.
@JsonKey(name: 'GeoLocation')
final GeoLocation? geoLocation;
  /// Orientation relative to earth.
@JsonKey(name: 'GeoOrientation')
final GeoOrientation? geoOrientation;
  /// Indoor location offset.
@JsonKey(name: 'LocalLocation')
final LocalLocation? localLocation;
  /// Indoor orientation offset.
@JsonKey(name: 'LocalOrientation')
final LocalOrientation? localOrientation;
  /// Entity type the entry refers to, use a value from the tt:Entity enumeration.
@JsonKey(name: 'Entity')
final String entity;
  /// Optional entity token.
@JsonKey(name: 'Token')
final ReferenceToken token;
  /// If this value is true the entity cannot be deleted.
@JsonKey(name: 'Fixed')
final bool fixed;
  /// Optional reference to the XAddr of another devices DeviceManagement service.
@JsonKey(name: 'GeoSource')
final String geoSource;
  /// If set the geo location is obtained internally.
@JsonKey(name: 'AutoGeo')
final bool autoGeo;
  LocationEntity({
        this.geoLocation,
        this.geoOrientation,
        this.localLocation,
        this.localOrientation,
        required this.entity,
        required this.token,
        required this.fixed,
        required this.geoSource,
        required this.autoGeo,
  });
}

