/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';
/// 
/// The service capabilities reflect optional functionality of a service. The information is static
/// and does not change during device operation. The following capabilities are available:
/// 
@JsonSerializable()
class ServiceCapabilities  {
  /// 
/// The maximum number of entries returned by a single Get<Entity>List or Get<Entity>
/// request.
/// The device shall never return more than this number of entities in a single response.
/// 
@JsonKey(name: 'MaxLimit')
final PositiveInteger maxLimit;
  /// 
/// Indicates the maximum number of authentication profiles the device supports. The device
/// shall
/// support at least one authentication profile.
/// 
@JsonKey(name: 'MaxAuthenticationProfiles')
final PositiveInteger maxAuthenticationProfiles;
  /// 
/// Indicates the maximum number of authentication policies per authentication profile supported
/// by the device.
/// 
@JsonKey(name: 'MaxPoliciesPerAuthenticationProfile')
final PositiveInteger maxPoliciesPerAuthenticationProfile;
  /// 
/// Indicates the maximum number of security levels the device supports. The device shall
/// support at least one
/// security level.
/// 
@JsonKey(name: 'MaxSecurityLevels')
final PositiveInteger maxSecurityLevels;
  /// 
/// Indicates the maximum number of recognition groups per security level supported by the
/// device.
/// 
@JsonKey(name: 'MaxRecognitionGroupsPerSecurityLevel')
final PositiveInteger maxRecognitionGroupsPerSecurityLevel;
  /// 
/// Indicates the maximum number of recognition methods per recognition group supported by the
/// device.
/// 
@JsonKey(name: 'MaxRecognitionMethodsPerRecognitionGroup')
final PositiveInteger maxRecognitionMethodsPerRecognitionGroup;
  /// 
/// Indicates that the client is allowed to supply the token when creating authentication
/// profiles and
/// security levels. To enable the use of the commands SetAuthenticationProfile and
/// SetSecurityLevel, the
/// value must be set to true.
/// 
@JsonKey(name: 'ClientSuppliedTokenSupported')
final bool clientSuppliedTokenSupported;
  /// 
/// A list of supported authentication modes (including custom modes).
/// This field is optional, and when omitted, the client shall assume that the
/// device supports "pt:SingleCredential" only.
/// 
@JsonKey(name: 'SupportedAuthenticationModes')
final StringAttrList supportedAuthenticationModes;
  ServiceCapabilities({
        required this.maxLimit,
        required this.maxAuthenticationProfiles,
        required this.maxPoliciesPerAuthenticationProfile,
        required this.maxSecurityLevels,
        required this.maxRecognitionGroupsPerSecurityLevel,
        required this.maxRecognitionMethodsPerRecognitionGroup,
        required this.clientSuppliedTokenSupported,
        required this.supportedAuthenticationModes,
  });
}

/// 
/// The AuthenticationProfileInfo structure contains information of a specific authentication
/// profile instance.
/// 

/// 
/// The AuthenticationProfile structure shall include all properties of the
/// AuthenticationProfileInfo structure
/// and also a default security level, an authentication mode, and a list of AuthenticationProfile
/// instances.
/// 
class AuthenticationProfile {}
class AuthenticationProfileExtension {}
/// 
/// The authentication policy is an association of a security level and a schedule. It defines when
/// a certain security level is required to grant access to a credential holder. Each security 
/// level is given a unique priority. If authentication policies have overlapping schedules, 
/// the security level with the highest priority is used.
/// 
@JsonSerializable()
class AuthenticationPolicy  {
  /// Reference to the schedule used by the authentication policy.
/// 
@JsonKey(name: 'ScheduleToken')
final ReferenceToken scheduleToken;
  /// 
/// A list of security level constraint structures defining the conditions
/// for what security level to use.
/// Minimum one security level constraint must be specified.
/// 
@JsonKey(name: 'SecurityLevelConstraint')
final SecurityLevelConstraint securityLevelConstraint;
  @JsonKey(name: 'Extension')
final AuthenticationPolicyExtension? extension_;
  AuthenticationPolicy({
        required this.scheduleToken,
        required this.securityLevelConstraint,
        this.extension_,
  });
}

class AuthenticationPolicyExtension {}
/// 
/// This structure defines what security level should be active depending on the state of the
/// schedule.
/// 
@JsonSerializable()
class SecurityLevelConstraint  {
  /// 
/// Corresponds to the Active field in the ScheduleState structure in
/// [ONVIF Schedule Service Specification].
/// 
@JsonKey(name: 'ActiveRegularSchedule')
final bool activeRegularSchedule;
  /// 
/// Corresponds to the SpecialDay field in the ScheduleState structure in
/// [ONVIF Schedule Service Specification].
/// This field will be ignored if the device do not support special days.
/// 
@JsonKey(name: 'ActiveSpecialDaySchedule')
final bool activeSpecialDaySchedule;
  /// 
/// Defines the mode of authentication. Authentication modes starting with the prefix
/// pt: are reserved to define ONVIF-specific authentication modes. For custom defined
/// authentication modes, free text can be used.
/// The following authentication modes are defined by ONVIF:
/// pt:SingleCredential - Normal mode where only one credential holder is required to be granted access.
/// pt:DualCredential - Two credential holders are required to be granted access
/// 
@JsonKey(name: 'AuthenticationMode')
final String? authenticationMode;
  /// 
/// Reference to the security level used by the authentication policy.
/// 
@JsonKey(name: 'SecurityLevelToken')
final ReferenceToken securityLevelToken;
  @JsonKey(name: 'Extension')
final SecurityLevelConstraintExtension? extension_;
  SecurityLevelConstraint({
        required this.activeRegularSchedule,
        required this.activeSpecialDaySchedule,
        this.authenticationMode,
        required this.securityLevelToken,
        this.extension_,
  });
}

class SecurityLevelConstraintExtension {}
/// 
/// Recognition is the action of identifying authorized users requesting access by the comparison of
/// presented
/// credential data with recorded credential data. A recognition method is either memorized,
/// biometric or held
/// within a physical credential. A recognition type is either a recognition method or a physical
/// input such as
/// a request-to-exit button.
/// 
@JsonSerializable()
class RecognitionMethod  {
  /// The requested type of recognition.
@JsonKey(name: 'RecognitionType')
final String recognitionType;
  /// 
/// The order value defines when this recognition method will be requested in relation 
/// to the other recognition methods in the same security level. A lower number indicates 
/// that the recognition method will be requested before recognition methods with a higher number.
/// 
@JsonKey(name: 'Order')
final int order;
  @JsonKey(name: 'Extension')
final RecognitionMethodExtension? extension_;
  RecognitionMethod({
        required this.recognitionType,
        required this.order,
        this.extension_,
  });
}

class RecognitionMethodExtension {}
/// 
/// 
@JsonSerializable()
class RecognitionGroup  {
  /// A list of recognition methods to request for at the access point.
/// 
@JsonKey(name: 'RecognitionMethod')
final RecognitionMethod? recognitionMethod;
  @JsonKey(name: 'Extension')
final RecognitionGroupExtension? extension_;
  RecognitionGroup({
        this.recognitionMethod,
        this.extension_,
  });
}

class RecognitionGroupExtension {}
/// 
/// The SecurityLevelInfo structure contains information of a specific security level instance.
/// 

/// 
/// The SecurityLevel structure shall include all properties of the SecurityLevelInfo structure and
/// also a set
/// of recognition groups.
/// 
/// The recognition groups are used to define a logical OR between the groups. Each recognition
/// group consists
/// of one or more recognition methods.
/// 
class SecurityLevel {}
class SecurityLevelExtension {}
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capability response message contains the requested access rules
/// service capabilities using a hierarchical XML capability structure.
/// 
@JsonKey(name: 'Capabilities')
final ServiceCapabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class GetAuthenticationProfileInfo  {
  /// Tokens of AuthenticationProfileInfo items to get.
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetAuthenticationProfileInfo({
        required this.token,
  });
}

@JsonSerializable()
class GetAuthenticationProfileInfoResponse  {
  /// List of AuthenticationProfileInfo items.
@JsonKey(name: 'AuthenticationProfileInfo')
final AuthenticationProfileInfo? authenticationProfileInfo;
  GetAuthenticationProfileInfoResponse({
        this.authenticationProfileInfo,
  });
}

@JsonSerializable()
class GetAuthenticationProfileInfoList  {
  /// Maximum number of entries to return. If not specified, less than one
/// or higher than what the device supports, the number of items is determined by the
/// device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// Start returning entries from this start reference. If not specified,
/// entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetAuthenticationProfileInfoList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetAuthenticationProfileInfoListResponse  {
  /// StartReference to use in next call to get the following items. If
/// absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of AuthenticationProfileInfo items.
@JsonKey(name: 'AuthenticationProfileInfo')
final AuthenticationProfileInfo? authenticationProfileInfo;
  GetAuthenticationProfileInfoListResponse({
        this.nextStartReference,
        this.authenticationProfileInfo,
  });
}

@JsonSerializable()
class GetAuthenticationProfiles  {
  /// Tokens of AuthenticationProfile items to get.
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetAuthenticationProfiles({
        required this.token,
  });
}

@JsonSerializable()
class GetAuthenticationProfilesResponse  {
  /// List of AuthenticationProfile items.
@JsonKey(name: 'AuthenticationProfile')
final AuthenticationProfile? authenticationProfile;
  GetAuthenticationProfilesResponse({
        this.authenticationProfile,
  });
}

@JsonSerializable()
class GetAuthenticationProfileList  {
  /// Maximum number of entries to return. If not specified, less than one
/// or higher than what the device supports, the number of items is determined by the
/// device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// Start returning entries from this start reference. If not specified,
/// entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetAuthenticationProfileList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetAuthenticationProfileListResponse  {
  /// StartReference to use in next call to get the following items. If
/// absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of AuthenticationProfile items.
@JsonKey(name: 'AuthenticationProfile')
final AuthenticationProfile? authenticationProfile;
  GetAuthenticationProfileListResponse({
        this.nextStartReference,
        this.authenticationProfile,
  });
}

@JsonSerializable()
class CreateAuthenticationProfile  {
  /// The AuthenticationProfile to create.
@JsonKey(name: 'AuthenticationProfile')
final AuthenticationProfile authenticationProfile;
  CreateAuthenticationProfile({
        required this.authenticationProfile,
  });
}

@JsonSerializable()
class CreateAuthenticationProfileResponse  {
  /// The Token of created AuthenticationProfile.
@JsonKey(name: 'Token')
final ReferenceToken token;
  CreateAuthenticationProfileResponse({
        required this.token,
  });
}

@JsonSerializable()
class SetAuthenticationProfile  {
  /// The AuthenticationProfile to create or modify.
@JsonKey(name: 'AuthenticationProfile')
final AuthenticationProfile authenticationProfile;
  SetAuthenticationProfile({
        required this.authenticationProfile,
  });
}

class SetAuthenticationProfileResponse {}
@JsonSerializable()
class ModifyAuthenticationProfile  {
  /// The AuthenticationProfile to modify.
@JsonKey(name: 'AuthenticationProfile')
final AuthenticationProfile authenticationProfile;
  ModifyAuthenticationProfile({
        required this.authenticationProfile,
  });
}

class ModifyAuthenticationProfileResponse {}
@JsonSerializable()
class DeleteAuthenticationProfile  {
  /// The token of the AuthenticationProfile to delete.
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteAuthenticationProfile({
        required this.token,
  });
}

class DeleteAuthenticationProfileResponse {}
@JsonSerializable()
class GetSecurityLevelInfo  {
  /// Tokens of SecurityLevelInfo items to get.
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetSecurityLevelInfo({
        required this.token,
  });
}

@JsonSerializable()
class GetSecurityLevelInfoResponse  {
  /// List of SecurityLevelInfo items.
@JsonKey(name: 'SecurityLevelInfo')
final SecurityLevelInfo? securityLevelInfo;
  GetSecurityLevelInfoResponse({
        this.securityLevelInfo,
  });
}

@JsonSerializable()
class GetSecurityLevelInfoList  {
  /// Maximum number of entries to return. If not specified, less than one
/// or higher than what the device supports, the number of items is determined by the
/// device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// Start returning entries from this start reference. If not specified,
/// entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetSecurityLevelInfoList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetSecurityLevelInfoListResponse  {
  /// StartReference to use in next call to get the following items. If
/// absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of SecurityLevelInfo items.
@JsonKey(name: 'SecurityLevelInfo')
final SecurityLevelInfo? securityLevelInfo;
  GetSecurityLevelInfoListResponse({
        this.nextStartReference,
        this.securityLevelInfo,
  });
}

@JsonSerializable()
class GetSecurityLevels  {
  /// Tokens of SecurityLevel items to get.
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetSecurityLevels({
        required this.token,
  });
}

@JsonSerializable()
class GetSecurityLevelsResponse  {
  /// List of SecurityLevel items.
@JsonKey(name: 'SecurityLevel')
final SecurityLevel? securityLevel;
  GetSecurityLevelsResponse({
        this.securityLevel,
  });
}

@JsonSerializable()
class GetSecurityLevelList  {
  /// Maximum number of entries to return. If not specified, less than one
/// or higher than what the device supports, the number of items is determined by the
/// device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// Start returning entries from this start reference. If not specified,
/// entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetSecurityLevelList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetSecurityLevelListResponse  {
  /// StartReference to use in next call to get the following items. If
/// absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of SecurityLevel items.
@JsonKey(name: 'SecurityLevel')
final SecurityLevel? securityLevel;
  GetSecurityLevelListResponse({
        this.nextStartReference,
        this.securityLevel,
  });
}

@JsonSerializable()
class CreateSecurityLevel  {
  /// The SecurityLevel to create.
@JsonKey(name: 'SecurityLevel')
final SecurityLevel securityLevel;
  CreateSecurityLevel({
        required this.securityLevel,
  });
}

@JsonSerializable()
class CreateSecurityLevelResponse  {
  /// The Token of created SecurityLevel.
@JsonKey(name: 'Token')
final ReferenceToken token;
  CreateSecurityLevelResponse({
        required this.token,
  });
}

@JsonSerializable()
class SetSecurityLevel  {
  /// The SecurityLevel to create or modify.
@JsonKey(name: 'SecurityLevel')
final SecurityLevel securityLevel;
  SetSecurityLevel({
        required this.securityLevel,
  });
}

class SetSecurityLevelResponse {}
@JsonSerializable()
class ModifySecurityLevel  {
  /// The SecurityLevel to modify.
@JsonKey(name: 'SecurityLevel')
final SecurityLevel securityLevel;
  ModifySecurityLevel({
        required this.securityLevel,
  });
}

class ModifySecurityLevelResponse {}
@JsonSerializable()
class DeleteSecurityLevel  {
  /// The token of the SecurityLevel to delete.
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteSecurityLevel({
        required this.token,
  });
}

class DeleteSecurityLevelResponse {}
