/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capabilities for the media service is returned in the Capabilities element.
@JsonKey(name: 'Capabilities')
final Capabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class Capabilities  {
  /// Media profile capabilities.
@JsonKey(name: 'ProfileCapabilities')
final ProfileCapabilities profileCapabilities;
  /// Streaming capabilities.
@JsonKey(name: 'StreamingCapabilities')
final StreamingCapabilities streamingCapabilities;
  /// Indicates if GetSnapshotUri is supported.
@JsonKey(name: 'SnapshotUri')
final bool snapshotUri;
  /// Indicates whether or not Rotation feature is supported.
@JsonKey(name: 'Rotation')
final bool rotation;
  /// Indicates the support for changing video source mode.
@JsonKey(name: 'VideoSourceMode')
final bool videoSourceMode;
  /// Indicates if OSD is supported.
@JsonKey(name: 'OSD')
final bool oSD;
  /// Indicates the support for temporary osd text configuration. 
@JsonKey(name: 'TemporaryOSDText')
final bool temporaryOSDText;
  /// Indicates the support for the Efficient XML Interchange (EXI) binary XML format.
@JsonKey(name: 'EXICompression')
final bool eXICompression;
  Capabilities({
        required this.profileCapabilities,
        required this.streamingCapabilities,
        required this.snapshotUri,
        required this.rotation,
        required this.videoSourceMode,
        required this.oSD,
        required this.temporaryOSDText,
        required this.eXICompression,
  });
}

@JsonSerializable()
class ProfileCapabilities  {
  /// Maximum number of profiles supported.
@JsonKey(name: 'MaximumNumberOfProfiles')
final int maximumNumberOfProfiles;
  ProfileCapabilities({
        required this.maximumNumberOfProfiles,
  });
}

@JsonSerializable()
class StreamingCapabilities  {
  /// Indicates support for RTP multicast.
@JsonKey(name: 'RTPMulticast')
final bool rTPMulticast;
  /// Indicates support for RTP over TCP.
@JsonKey(name: 'RTP_TCP')
final bool rTP_TCP;
  /// Indicates support for RTP/RTSP/TCP.
@JsonKey(name: 'RTP_RTSP_TCP')
final bool rTP_RTSP_TCP;
  /// Indicates support for non aggregate RTSP control.
@JsonKey(name: 'NonAggregateControl')
final bool nonAggregateControl;
  ///  Indicates the device does not support live media streaming via RTSP.
@JsonKey(name: 'NoRTSPStreaming')
final bool noRTSPStreaming;
  StreamingCapabilities({
        required this.rTPMulticast,
        required this.rTP_TCP,
        required this.rTP_RTSP_TCP,
        required this.nonAggregateControl,
        required this.noRTSPStreaming,
  });
}

class GetVideoSources {}
@JsonSerializable()
class GetVideoSourcesResponse  {
  /// List of existing Video Sources
@JsonKey(name: 'VideoSources')
final VideoSource? videoSources;
  GetVideoSourcesResponse({
        this.videoSources,
  });
}

class GetAudioSources {}
@JsonSerializable()
class GetAudioSourcesResponse  {
  /// List of existing Audio Sources
@JsonKey(name: 'AudioSources')
final AudioSource? audioSources;
  GetAudioSourcesResponse({
        this.audioSources,
  });
}

class GetAudioOutputs {}
@JsonSerializable()
class GetAudioOutputsResponse  {
  /// List of existing Audio Outputs
@JsonKey(name: 'AudioOutputs')
final AudioOutput? audioOutputs;
  GetAudioOutputsResponse({
        this.audioOutputs,
  });
}

@JsonSerializable()
class CreateProfile  {
  /// friendly name of the profile to be created
@JsonKey(name: 'Name')
final String name;
  /// Optional token, specifying the unique identifier of the new profile. A device supports at least a token length of 12 characters and characters "A-Z" | "a-z" | "0-9" | "-.".
@JsonKey(name: 'Token')
final ReferenceToken? token;
  CreateProfile({
        required this.name,
        this.token,
  });
}

@JsonSerializable()
class CreateProfileResponse  {
  /// returns the new created profile
@JsonKey(name: 'Profile')
final Profile profile;
  CreateProfileResponse({
        required this.profile,
  });
}

@JsonSerializable()
class GetProfile  {
  /// this command requests a specific profile
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetProfile({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetProfileResponse  {
  /// returns the requested media profile
@JsonKey(name: 'Profile')
final Profile profile;
  GetProfileResponse({
        required this.profile,
  });
}

class GetProfiles {}
@JsonSerializable()
class GetProfilesResponse  {
  /// lists all profiles that exist in the media service 
@JsonKey(name: 'Profiles')
final Profile? profiles;
  GetProfilesResponse({
        this.profiles,
  });
}

@JsonSerializable()
class AddVideoEncoderConfiguration  {
  /// Reference to the profile where the configuration should be added
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// Contains a reference to the VideoEncoderConfiguration to add
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  AddVideoEncoderConfiguration({
        required this.profileToken,
        required this.configurationToken,
  });
}

class AddVideoEncoderConfigurationResponse {}
@JsonSerializable()
class RemoveVideoEncoderConfiguration  {
  /// Contains a reference to the media profile from which the
/// VideoEncoderConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  RemoveVideoEncoderConfiguration({
        required this.profileToken,
  });
}

class RemoveVideoEncoderConfigurationResponse {}
@JsonSerializable()
class AddVideoSourceConfiguration  {
  /// Reference to the profile where the configuration should be added
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// Contains a reference to the VideoSourceConfiguration to add
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  AddVideoSourceConfiguration({
        required this.profileToken,
        required this.configurationToken,
  });
}

class AddVideoSourceConfigurationResponse {}
@JsonSerializable()
class RemoveVideoSourceConfiguration  {
  /// Contains a reference to the media profile from which the
/// VideoSourceConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  RemoveVideoSourceConfiguration({
        required this.profileToken,
  });
}

class RemoveVideoSourceConfigurationResponse {}
@JsonSerializable()
class AddAudioEncoderConfiguration  {
  /// Reference to the profile where the configuration should be added
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// Contains a reference to the AudioEncoderConfiguration to add
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  AddAudioEncoderConfiguration({
        required this.profileToken,
        required this.configurationToken,
  });
}

class AddAudioEncoderConfigurationResponse {}
@JsonSerializable()
class RemoveAudioEncoderConfiguration  {
  /// Contains a reference to the media profile from which the
/// AudioEncoderConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  RemoveAudioEncoderConfiguration({
        required this.profileToken,
  });
}

class RemoveAudioEncoderConfigurationResponse {}
@JsonSerializable()
class AddAudioSourceConfiguration  {
  /// Reference to the profile where the configuration should be added
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// Contains a reference to the AudioSourceConfiguration to add
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  AddAudioSourceConfiguration({
        required this.profileToken,
        required this.configurationToken,
  });
}

class AddAudioSourceConfigurationResponse {}
@JsonSerializable()
class RemoveAudioSourceConfiguration  {
  /// Contains a reference to the media profile from which the
/// AudioSourceConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  RemoveAudioSourceConfiguration({
        required this.profileToken,
  });
}

class RemoveAudioSourceConfigurationResponse {}
@JsonSerializable()
class AddPTZConfiguration  {
  /// Reference to the profile where the configuration should be added
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// Contains a reference to the PTZConfiguration to add
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  AddPTZConfiguration({
        required this.profileToken,
        required this.configurationToken,
  });
}

class AddPTZConfigurationResponse {}
@JsonSerializable()
class RemovePTZConfiguration  {
  /// Contains a reference to the media profile from which the
/// PTZConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  RemovePTZConfiguration({
        required this.profileToken,
  });
}

class RemovePTZConfigurationResponse {}
@JsonSerializable()
class AddVideoAnalyticsConfiguration  {
  /// Reference to the profile where the configuration should be added
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// Contains a reference to the VideoAnalyticsConfiguration to add
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  AddVideoAnalyticsConfiguration({
        required this.profileToken,
        required this.configurationToken,
  });
}

class AddVideoAnalyticsConfigurationResponse {}
@JsonSerializable()
class RemoveVideoAnalyticsConfiguration  {
  /// Contains a reference to the media profile from which the
/// VideoAnalyticsConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  RemoveVideoAnalyticsConfiguration({
        required this.profileToken,
  });
}

class RemoveVideoAnalyticsConfigurationResponse {}
@JsonSerializable()
class AddMetadataConfiguration  {
  /// Reference to the profile where the configuration should be added
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// Contains a reference to the MetadataConfiguration to add
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  AddMetadataConfiguration({
        required this.profileToken,
        required this.configurationToken,
  });
}

class AddMetadataConfigurationResponse {}
@JsonSerializable()
class RemoveMetadataConfiguration  {
  /// Contains a reference to the media profile from which the
/// MetadataConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  RemoveMetadataConfiguration({
        required this.profileToken,
  });
}

class RemoveMetadataConfigurationResponse {}
@JsonSerializable()
class AddAudioOutputConfiguration  {
  /// Reference to the profile where the configuration should be added
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// Contains a reference to the AudioOutputConfiguration to add
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  AddAudioOutputConfiguration({
        required this.profileToken,
        required this.configurationToken,
  });
}

class AddAudioOutputConfigurationResponse {}
@JsonSerializable()
class RemoveAudioOutputConfiguration  {
  /// Contains a reference to the media profile from which the
/// AudioOutputConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  RemoveAudioOutputConfiguration({
        required this.profileToken,
  });
}

class RemoveAudioOutputConfigurationResponse {}
@JsonSerializable()
class AddAudioDecoderConfiguration  {
  /// This element contains a reference to the profile where the configuration should be added.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// This element contains a reference to the AudioDecoderConfiguration to add.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  AddAudioDecoderConfiguration({
        required this.profileToken,
        required this.configurationToken,
  });
}

class AddAudioDecoderConfigurationResponse {}
@JsonSerializable()
class RemoveAudioDecoderConfiguration  {
  /// This element contains a  reference to the media profile from which the AudioDecoderConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  RemoveAudioDecoderConfiguration({
        required this.profileToken,
  });
}

class RemoveAudioDecoderConfigurationResponse {}
@JsonSerializable()
class DeleteProfile  {
  /// This element contains a  reference to the profile that should be deleted.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  DeleteProfile({
        required this.profileToken,
  });
}

class DeleteProfileResponse {}
class GetVideoEncoderConfigurations {}
@JsonSerializable()
class GetVideoEncoderConfigurationsResponse  {
  /// This element contains a list of video encoder configurations.
@JsonKey(name: 'Configurations')
final VideoEncoderConfiguration? configurations;
  GetVideoEncoderConfigurationsResponse({
        this.configurations,
  });
}

class GetVideoSourceConfigurations {}
@JsonSerializable()
class GetVideoSourceConfigurationsResponse  {
  /// This element contains a list of video source configurations.
@JsonKey(name: 'Configurations')
final VideoSourceConfiguration? configurations;
  GetVideoSourceConfigurationsResponse({
        this.configurations,
  });
}

class GetAudioEncoderConfigurations {}
@JsonSerializable()
class GetAudioEncoderConfigurationsResponse  {
  /// This element contains a list of audio encoder configurations.
@JsonKey(name: 'Configurations')
final AudioEncoderConfiguration? configurations;
  GetAudioEncoderConfigurationsResponse({
        this.configurations,
  });
}

class GetAudioSourceConfigurations {}
@JsonSerializable()
class GetAudioSourceConfigurationsResponse  {
  /// This element contains a list of audio source configurations.
@JsonKey(name: 'Configurations')
final AudioSourceConfiguration? configurations;
  GetAudioSourceConfigurationsResponse({
        this.configurations,
  });
}

class GetVideoAnalyticsConfigurations {}
@JsonSerializable()
class GetVideoAnalyticsConfigurationsResponse  {
  /// This element contains a list of VideoAnalytics configurations.
@JsonKey(name: 'Configurations')
final VideoAnalyticsConfiguration? configurations;
  GetVideoAnalyticsConfigurationsResponse({
        this.configurations,
  });
}

class GetMetadataConfigurations {}
@JsonSerializable()
class GetMetadataConfigurationsResponse  {
  /// This element contains a list of metadata configurations
@JsonKey(name: 'Configurations')
final MetadataConfiguration? configurations;
  GetMetadataConfigurationsResponse({
        this.configurations,
  });
}

class GetAudioOutputConfigurations {}
@JsonSerializable()
class GetAudioOutputConfigurationsResponse  {
  /// This element contains a list of audio output configurations
@JsonKey(name: 'Configurations')
final AudioOutputConfiguration? configurations;
  GetAudioOutputConfigurationsResponse({
        this.configurations,
  });
}

class GetAudioDecoderConfigurations {}
@JsonSerializable()
class GetAudioDecoderConfigurationsResponse  {
  /// This element contains a list of audio decoder configurations
@JsonKey(name: 'Configurations')
final AudioDecoderConfiguration? configurations;
  GetAudioDecoderConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetVideoSourceConfiguration  {
  /// Token of the requested video source configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetVideoSourceConfiguration({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetVideoSourceConfigurationResponse  {
  /// The requested video source configuration.
@JsonKey(name: 'Configuration')
final VideoSourceConfiguration configuration;
  GetVideoSourceConfigurationResponse({
        required this.configuration,
  });
}

@JsonSerializable()
class GetVideoEncoderConfiguration  {
  /// Token of the requested video encoder configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetVideoEncoderConfiguration({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetVideoEncoderConfigurationResponse  {
  /// The requested video encoder configuration.
@JsonKey(name: 'Configuration')
final VideoEncoderConfiguration configuration;
  GetVideoEncoderConfigurationResponse({
        required this.configuration,
  });
}

@JsonSerializable()
class GetAudioSourceConfiguration  {
  /// Token of the requested audio source configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetAudioSourceConfiguration({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetAudioSourceConfigurationResponse  {
  /// The requested audio source configuration.
@JsonKey(name: 'Configuration')
final AudioSourceConfiguration configuration;
  GetAudioSourceConfigurationResponse({
        required this.configuration,
  });
}

@JsonSerializable()
class GetAudioEncoderConfiguration  {
  /// Token of the requested audio encoder configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetAudioEncoderConfiguration({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetAudioEncoderConfigurationResponse  {
  /// The requested audio encoder configuration
@JsonKey(name: 'Configuration')
final AudioEncoderConfiguration configuration;
  GetAudioEncoderConfigurationResponse({
        required this.configuration,
  });
}

@JsonSerializable()
class GetVideoAnalyticsConfiguration  {
  /// Token of the requested video analytics configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetVideoAnalyticsConfiguration({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetVideoAnalyticsConfigurationResponse  {
  /// The requested video analytics configuration.
@JsonKey(name: 'Configuration')
final VideoAnalyticsConfiguration configuration;
  GetVideoAnalyticsConfigurationResponse({
        required this.configuration,
  });
}

@JsonSerializable()
class GetMetadataConfiguration  {
  /// Token of the requested metadata configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetMetadataConfiguration({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetMetadataConfigurationResponse  {
  /// The requested metadata configuration.
@JsonKey(name: 'Configuration')
final MetadataConfiguration configuration;
  GetMetadataConfigurationResponse({
        required this.configuration,
  });
}

@JsonSerializable()
class GetAudioOutputConfiguration  {
  /// Token of the requested audio output configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetAudioOutputConfiguration({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetAudioOutputConfigurationResponse  {
  /// The requested audio output configuration.
@JsonKey(name: 'Configuration')
final AudioOutputConfiguration configuration;
  GetAudioOutputConfigurationResponse({
        required this.configuration,
  });
}

@JsonSerializable()
class GetAudioDecoderConfiguration  {
  /// Token of the requested audio decoder configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetAudioDecoderConfiguration({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetAudioDecoderConfigurationResponse  {
  /// The requested audio decoder configuration
@JsonKey(name: 'Configuration')
final AudioDecoderConfiguration configuration;
  GetAudioDecoderConfigurationResponse({
        required this.configuration,
  });
}

@JsonSerializable()
class GetCompatibleVideoEncoderConfigurations  {
  /// Contains the token of an existing media profile the configurations shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetCompatibleVideoEncoderConfigurations({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetCompatibleVideoEncoderConfigurationsResponse  {
  /// Contains a list of video encoder configurations that are compatible with the specified media profile.
@JsonKey(name: 'Configurations')
final VideoEncoderConfiguration? configurations;
  GetCompatibleVideoEncoderConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetCompatibleVideoSourceConfigurations  {
  /// Contains the token of an existing media profile the configurations shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetCompatibleVideoSourceConfigurations({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetCompatibleVideoSourceConfigurationsResponse  {
  /// Contains a list of video source configurations that are compatible with the specified media profile.
@JsonKey(name: 'Configurations')
final VideoSourceConfiguration? configurations;
  GetCompatibleVideoSourceConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetCompatibleAudioEncoderConfigurations  {
  /// Contains the token of an existing media profile the configurations shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetCompatibleAudioEncoderConfigurations({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetCompatibleAudioEncoderConfigurationsResponse  {
  /// Contains a list of audio encoder configurations that are compatible with the specified media profile.
@JsonKey(name: 'Configurations')
final AudioEncoderConfiguration? configurations;
  GetCompatibleAudioEncoderConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetCompatibleAudioSourceConfigurations  {
  /// Contains the token of an existing media profile the configurations shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetCompatibleAudioSourceConfigurations({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetCompatibleAudioSourceConfigurationsResponse  {
  /// Contains a list of audio source configurations that are compatible with the specified media profile.
@JsonKey(name: 'Configurations')
final AudioSourceConfiguration? configurations;
  GetCompatibleAudioSourceConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetCompatibleVideoAnalyticsConfigurations  {
  /// Contains the token of an existing media profile the configurations shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetCompatibleVideoAnalyticsConfigurations({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetCompatibleVideoAnalyticsConfigurationsResponse  {
  /// Contains a list of video analytics configurations that are compatible with the specified media profile.
@JsonKey(name: 'Configurations')
final VideoAnalyticsConfiguration? configurations;
  GetCompatibleVideoAnalyticsConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetCompatibleMetadataConfigurations  {
  /// Contains the token of an existing media profile the configurations shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetCompatibleMetadataConfigurations({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetCompatibleMetadataConfigurationsResponse  {
  /// Contains a list of metadata configurations that are compatible with the specified media profile.
@JsonKey(name: 'Configurations')
final MetadataConfiguration? configurations;
  GetCompatibleMetadataConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetCompatibleAudioOutputConfigurations  {
  /// Contains the token of an existing media profile the configurations shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetCompatibleAudioOutputConfigurations({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetCompatibleAudioOutputConfigurationsResponse  {
  /// Contains a list of audio output configurations that are compatible with the specified media profile.
@JsonKey(name: 'Configurations')
final AudioOutputConfiguration? configurations;
  GetCompatibleAudioOutputConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetCompatibleAudioDecoderConfigurations  {
  /// Contains the token of an existing media profile the configurations shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetCompatibleAudioDecoderConfigurations({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetCompatibleAudioDecoderConfigurationsResponse  {
  /// Contains a list of audio decoder configurations that are compatible with the specified media profile. 
@JsonKey(name: 'Configurations')
final AudioDecoderConfiguration? configurations;
  GetCompatibleAudioDecoderConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class SetVideoEncoderConfiguration  {
  /// Contains the modified video encoder configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final VideoEncoderConfiguration configuration;
  /// The ForcePersistence element is obsolete and should always be assumed to be true.
@JsonKey(name: 'ForcePersistence')
final bool forcePersistence;
  SetVideoEncoderConfiguration({
        required this.configuration,
        required this.forcePersistence,
  });
}

class SetVideoEncoderConfigurationResponse {}
@JsonSerializable()
class SetVideoSourceConfiguration  {
  /// Contains the modified video source configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final VideoSourceConfiguration configuration;
  /// The ForcePersistence element is obsolete and should always be assumed to be true.
@JsonKey(name: 'ForcePersistence')
final bool forcePersistence;
  SetVideoSourceConfiguration({
        required this.configuration,
        required this.forcePersistence,
  });
}

class SetVideoSourceConfigurationResponse {}
@JsonSerializable()
class SetAudioEncoderConfiguration  {
  /// Contains the modified audio encoder configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final AudioEncoderConfiguration configuration;
  /// The ForcePersistence element is obsolete and should always be assumed to be true.
@JsonKey(name: 'ForcePersistence')
final bool forcePersistence;
  SetAudioEncoderConfiguration({
        required this.configuration,
        required this.forcePersistence,
  });
}

class SetAudioEncoderConfigurationResponse {}
@JsonSerializable()
class SetAudioSourceConfiguration  {
  /// Contains the modified audio source configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final AudioSourceConfiguration configuration;
  /// The ForcePersistence element is obsolete and should always be assumed to be true.
@JsonKey(name: 'ForcePersistence')
final bool forcePersistence;
  SetAudioSourceConfiguration({
        required this.configuration,
        required this.forcePersistence,
  });
}

class SetAudioSourceConfigurationResponse {}
@JsonSerializable()
class SetVideoAnalyticsConfiguration  {
  /// Contains the modified video analytics configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final VideoAnalyticsConfiguration configuration;
  /// The ForcePersistence element is obsolete and should always be assumed to be true.
@JsonKey(name: 'ForcePersistence')
final bool forcePersistence;
  SetVideoAnalyticsConfiguration({
        required this.configuration,
        required this.forcePersistence,
  });
}

class SetVideoAnalyticsConfigurationResponse {}
@JsonSerializable()
class SetMetadataConfiguration  {
  /// Contains the modified metadata configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final MetadataConfiguration configuration;
  /// The ForcePersistence element is obsolete and should always be assumed to be true.
@JsonKey(name: 'ForcePersistence')
final bool forcePersistence;
  SetMetadataConfiguration({
        required this.configuration,
        required this.forcePersistence,
  });
}

class SetMetadataConfigurationResponse {}
@JsonSerializable()
class SetAudioOutputConfiguration  {
  /// Contains the modified audio output configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final AudioOutputConfiguration configuration;
  /// The ForcePersistence element is obsolete and should always be assumed to be true.
@JsonKey(name: 'ForcePersistence')
final bool forcePersistence;
  SetAudioOutputConfiguration({
        required this.configuration,
        required this.forcePersistence,
  });
}

class SetAudioOutputConfigurationResponse {}
@JsonSerializable()
class SetAudioDecoderConfiguration  {
  /// Contains the modified audio decoder configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final AudioDecoderConfiguration configuration;
  /// The ForcePersistence element is obsolete and should always be assumed to be true.
@JsonKey(name: 'ForcePersistence')
final bool forcePersistence;
  SetAudioDecoderConfiguration({
        required this.configuration,
        required this.forcePersistence,
  });
}

class SetAudioDecoderConfigurationResponse {}
@JsonSerializable()
class GetVideoSourceConfigurationOptions  {
  /// Optional video source configurationToken that specifies an existing configuration that the options are intended for.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken? profileToken;
  GetVideoSourceConfigurationOptions({
        this.configurationToken,
        this.profileToken,
  });
}

@JsonSerializable()
class GetVideoSourceConfigurationOptionsResponse  {
  /// This message contains the video source configuration options. If a video source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final VideoSourceConfigurationOptions options;
  GetVideoSourceConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetVideoEncoderConfigurationOptions  {
  /// Optional video encoder configuration token that specifies an existing configuration that the options are intended for.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken? profileToken;
  GetVideoEncoderConfigurationOptions({
        this.configurationToken,
        this.profileToken,
  });
}

@JsonSerializable()
class GetVideoEncoderConfigurationOptionsResponse  {
  @JsonKey(name: 'Options')
final VideoEncoderConfigurationOptions options;
  GetVideoEncoderConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetAudioSourceConfigurationOptions  {
  /// Optional audio source configuration token that specifies an existing configuration that the options are intended for.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken? profileToken;
  GetAudioSourceConfigurationOptions({
        this.configurationToken,
        this.profileToken,
  });
}

@JsonSerializable()
class GetAudioSourceConfigurationOptionsResponse  {
  /// This message contains the audio source configuration options. If a audio source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final AudioSourceConfigurationOptions options;
  GetAudioSourceConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetAudioEncoderConfigurationOptions  {
  /// Optional audio encoder configuration token that specifies an existing configuration that the options are intended for.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken? profileToken;
  GetAudioEncoderConfigurationOptions({
        this.configurationToken,
        this.profileToken,
  });
}

@JsonSerializable()
class GetAudioEncoderConfigurationOptionsResponse  {
  /// This message contains the audio encoder configuration options. If a audio encoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final AudioEncoderConfigurationOptions options;
  GetAudioEncoderConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetMetadataConfigurationOptions  {
  /// Optional metadata configuration token that specifies an existing configuration that the options are intended for.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken? profileToken;
  GetMetadataConfigurationOptions({
        this.configurationToken,
        this.profileToken,
  });
}

@JsonSerializable()
class GetMetadataConfigurationOptionsResponse  {
  /// This message contains the metadata configuration options. If a metadata configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final MetadataConfigurationOptions options;
  GetMetadataConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetAudioOutputConfigurationOptions  {
  /// Optional audio output configuration token that specifies an existing configuration that the options are intended for.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken? profileToken;
  GetAudioOutputConfigurationOptions({
        this.configurationToken,
        this.profileToken,
  });
}

@JsonSerializable()
class GetAudioOutputConfigurationOptionsResponse  {
  /// This message contains the audio output configuration options. If a audio output configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final AudioOutputConfigurationOptions options;
  GetAudioOutputConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetAudioDecoderConfigurationOptions  {
  /// Optional audio decoder configuration token that specifies an existing configuration that the options are intended for.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken? profileToken;
  GetAudioDecoderConfigurationOptions({
        this.configurationToken,
        this.profileToken,
  });
}

@JsonSerializable()
class GetAudioDecoderConfigurationOptionsResponse  {
  /// This message contains the audio decoder configuration options. If a audio decoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final AudioDecoderConfigurationOptions options;
  GetAudioDecoderConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetGuaranteedNumberOfVideoEncoderInstances  {
  /// Token of the video source configuration
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetGuaranteedNumberOfVideoEncoderInstances({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetGuaranteedNumberOfVideoEncoderInstancesResponse  {
  /// The minimum guaranteed total number of encoder instances (applications) per VideoSourceConfiguration. The device is able to deliver the TotalNumber of streams
@JsonKey(name: 'TotalNumber')
final int totalNumber;
  /// If a device limits the number of instances for respective Video Codecs the response contains the information how many Jpeg streams can be set up at the same time per VideoSource.
@JsonKey(name: 'JPEG')
final int? jPEG;
  /// If a device limits the number of instances for respective Video Codecs the response contains the information how many H264 streams can be set up at the same time per VideoSource.
@JsonKey(name: 'H264')
final int? h264;
  /// If a device limits the number of instances for respective Video Codecs the response contains the information how many Mpeg4 streams can be set up at the same time per VideoSource.
@JsonKey(name: 'MPEG4')
final int? mPEG4;
  GetGuaranteedNumberOfVideoEncoderInstancesResponse({
        required this.totalNumber,
        this.jPEG,
        this.h264,
        this.mPEG4,
  });
}

@JsonSerializable()
class GetStreamUri  {
  /// Stream Setup that should be used with the uri
@JsonKey(name: 'StreamSetup')
final StreamSetup streamSetup;
  /// The ProfileToken element indicates the media profile to use and will define the configuration of the content of the stream.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetStreamUri({
        required this.streamSetup,
        required this.profileToken,
  });
}

@JsonSerializable()
class GetStreamUriResponse  {
  /// 
@JsonKey(name: 'MediaUri')
final MediaUri mediaUri;
  GetStreamUriResponse({
        required this.mediaUri,
  });
}

@JsonSerializable()
class StartMulticastStreaming  {
  /// Contains the token of the Profile that is used to define the multicast stream.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  StartMulticastStreaming({
        required this.profileToken,
  });
}

class StartMulticastStreamingResponse {}
@JsonSerializable()
class StopMulticastStreaming  {
  /// Contains the token of the Profile that is used to define the multicast stream.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  StopMulticastStreaming({
        required this.profileToken,
  });
}

class StopMulticastStreamingResponse {}
@JsonSerializable()
class SetSynchronizationPoint  {
  /// Contains a Profile reference for which a Synchronization Point is requested.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  SetSynchronizationPoint({
        required this.profileToken,
  });
}

class SetSynchronizationPointResponse {}
@JsonSerializable()
class GetSnapshotUri  {
  /// The ProfileToken element indicates the media profile to use and will define the source and dimensions of the snapshot.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetSnapshotUri({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetSnapshotUriResponse  {
  /// 
@JsonKey(name: 'MediaUri')
final MediaUri mediaUri;
  GetSnapshotUriResponse({
        required this.mediaUri,
  });
}

@JsonSerializable()
class GetVideoSourceModes  {
  /// Contains a video source reference for which a video source mode is requested.
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  GetVideoSourceModes({
        required this.videoSourceToken,
  });
}

@JsonSerializable()
class GetVideoSourceModesResponse  {
  /// Return the information for specified video source mode.
@JsonKey(name: 'VideoSourceModes')
final VideoSourceMode videoSourceModes;
  GetVideoSourceModesResponse({
        required this.videoSourceModes,
  });
}

@JsonSerializable()
class SetVideoSourceMode  {
  /// Contains a video source reference for which a video source mode is requested.
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  /// Indicate video source mode.
@JsonKey(name: 'VideoSourceModeToken')
final ReferenceToken videoSourceModeToken;
  SetVideoSourceMode({
        required this.videoSourceToken,
        required this.videoSourceModeToken,
  });
}

@JsonSerializable()
class SetVideoSourceModeResponse  {
  /// The response contains information about rebooting after returning response. When Reboot is set true, a device will reboot automatically after setting mode.
@JsonKey(name: 'Reboot')
final bool reboot;
  SetVideoSourceModeResponse({
        required this.reboot,
  });
}

/// Indication which encodings are supported for this video source. The list may contain one or more enumeration values of tt:VideoEncoding.
typedef EncodingTypes = List<String>;

@JsonSerializable()
class VideoSourceMode  {
  /// Max frame rate in frames per second for this video source mode.
@JsonKey(name: 'MaxFramerate')
final double maxFramerate;
  /// Max horizontal and vertical resolution for this video source mode.
@JsonKey(name: 'MaxResolution')
final VideoResolution maxResolution;
  /// Indication which encodings are supported for this video source. The list may contain one or more enumeration values of tt:VideoEncoding.
@JsonKey(name: 'Encodings')
final EncodingTypes encodings;
  /// After setting the mode if a device starts to reboot this value is true. If a device change the mode without rebooting this value is false. If true, configured parameters may not be guaranteed by the device after rebooting.
@JsonKey(name: 'Reboot')
final bool reboot;
  /// Informative description of this video source mode. This field should be described in English.
@JsonKey(name: 'Description')
final Description? description;
  @JsonKey(name: 'Extension')
final VideoSourceModeExtension? extension_;
  /// Indicate token for video source mode.
@JsonKey(name: 'token')
final ReferenceToken token;
  /// Indication of whether this mode is active. If active this value is true. In case of non-indication, it means as false. The value of true shall be had by only one video source mode.
@JsonKey(name: 'Enabled')
final bool enabled;
  VideoSourceMode({
        required this.maxFramerate,
        required this.maxResolution,
        required this.encodings,
        required this.reboot,
        this.description,
        this.extension_,
        required this.token,
        required this.enabled,
  });
}

class VideoSourceModeExtension {}
@JsonSerializable()
class GetOSDs  {
  /// Token of the Video Source Configuration, which has OSDs associated with are requested. If token not exist, request all available OSDs.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  GetOSDs({
        this.configurationToken,
  });
}

@JsonSerializable()
class GetOSDsResponse  {
  /// This element contains a list of requested OSDs.
@JsonKey(name: 'OSDs')
final OSDConfiguration? oSDs;
  GetOSDsResponse({
        this.oSDs,
  });
}

@JsonSerializable()
class GetOSD  {
  /// The GetOSD command fetches the OSD configuration if the OSD token is known.
@JsonKey(name: 'OSDToken')
final ReferenceToken oSDToken;
  GetOSD({
        required this.oSDToken,
  });
}

@JsonSerializable()
class GetOSDResponse  {
  /// The requested OSD configuration.
@JsonKey(name: 'OSD')
final OSDConfiguration oSD;
  GetOSDResponse({
        required this.oSD,
  });
}

@JsonSerializable()
class SetOSD  {
  /// Contains the modified OSD configuration.
@JsonKey(name: 'OSD')
final OSDConfiguration oSD;
  SetOSD({
        required this.oSD,
  });
}

class SetOSDResponse {}
@JsonSerializable()
class GetOSDOptions  {
  /// Video Source Configuration Token that specifies an existing video source configuration that the options shall be compatible with.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetOSDOptions({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetOSDOptionsResponse  {
  /// 
@JsonKey(name: 'OSDOptions')
final OSDConfigurationOptions oSDOptions;
  GetOSDOptionsResponse({
        required this.oSDOptions,
  });
}

@JsonSerializable()
class CreateOSD  {
  /// Contain the initial OSD configuration for create.
@JsonKey(name: 'OSD')
final OSDConfiguration oSD;
  CreateOSD({
        required this.oSD,
  });
}

@JsonSerializable()
class CreateOSDResponse  {
  /// Returns Token of the newly created OSD
@JsonKey(name: 'OSDToken')
final ReferenceToken oSDToken;
  CreateOSDResponse({
        required this.oSDToken,
  });
}

@JsonSerializable()
class DeleteOSD  {
  /// This element contains a reference to the OSD configuration that should be deleted.
@JsonKey(name: 'OSDToken')
final ReferenceToken oSDToken;
  DeleteOSD({
        required this.oSDToken,
  });
}

class DeleteOSDResponse {}
