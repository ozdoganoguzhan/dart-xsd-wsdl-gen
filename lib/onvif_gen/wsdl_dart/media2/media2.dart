/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capabilities for the media service is returned in the Capabilities element.
@JsonKey(name: 'Capabilities')
final Capabilities2 capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class Capabilities2  {
  /// Media profile capabilities.
@JsonKey(name: 'ProfileCapabilities')
final ProfileCapabilities profileCapabilities;
  /// Streaming capabilities.
@JsonKey(name: 'StreamingCapabilities')
final StreamingCapabilities streamingCapabilities;
  /// Indicates if GetSnapshotUri is supported.
@JsonKey(name: 'SnapshotUri')
final bool snapshotUri;
  /// Indicates whether or not Rotation feature is supported.
@JsonKey(name: 'Rotation')
final bool rotation;
  /// Indicates the support for changing video source mode.
@JsonKey(name: 'VideoSourceMode')
final bool videoSourceMode;
  /// Indicates if OSD is supported.
@JsonKey(name: 'OSD')
final bool oSD;
  /// Indicates the support for temporary osd text configuration. 
@JsonKey(name: 'TemporaryOSDText')
final bool temporaryOSDText;
  /// Indicates if Masking is supported.
@JsonKey(name: 'Mask')
final bool mask;
  /// Indicates that privacy masks are only supported at the video source level and not the video source configuration level. 
/// If this is true any addition, deletion or change of a privacy mask done for one video source configuration will automatically be 
/// applied by the device to a corresponding privacy mask for all other video source configuration associated with the same video source.
@JsonKey(name: 'SourceMask')
final bool sourceMask;
  Capabilities2({
        required this.profileCapabilities,
        required this.streamingCapabilities,
        required this.snapshotUri,
        required this.rotation,
        required this.videoSourceMode,
        required this.oSD,
        required this.temporaryOSDText,
        required this.mask,
        required this.sourceMask,
  });
}

@JsonSerializable()
class ProfileCapabilities  {
  /// Maximum number of profiles supported.
@JsonKey(name: 'MaximumNumberOfProfiles')
final int maximumNumberOfProfiles;
  /// The configurations supported by the device as defined by tr2:ConfigurationEnumeration. The enumeration value "All" shall not be included in this list.
@JsonKey(name: 'ConfigurationsSupported')
final StringAttrList configurationsSupported;
  ProfileCapabilities({
        required this.maximumNumberOfProfiles,
        required this.configurationsSupported,
  });
}

@JsonSerializable()
class StreamingCapabilities  {
  ///  Indicates support for live media streaming via RTSP.
@JsonKey(name: 'RTSPStreaming')
final bool rTSPStreaming;
  /// Indicates support for RTP multicast.
@JsonKey(name: 'RTPMulticast')
final bool rTPMulticast;
  /// Indicates support for RTP/RTSP/TCP.
@JsonKey(name: 'RTP_RTSP_TCP')
final bool rTP_RTSP_TCP;
  /// Indicates support for non aggregate RTSP control.
@JsonKey(name: 'NonAggregateControl')
final bool nonAggregateControl;
  /// If streaming over WebSocket is supported, this shall return the RTSP WebSocket URI as described in Streaming Specification Section 5.1.1.5.
@JsonKey(name: 'RTSPWebSocketUri')
final String rTSPWebSocketUri;
  /// Indicates support for non-RTSP controlled multicast streaming.
@JsonKey(name: 'AutoStartMulticast')
final bool autoStartMulticast;
  StreamingCapabilities({
        required this.rTSPStreaming,
        required this.rTPMulticast,
        required this.rTP_RTSP_TCP,
        required this.nonAggregateControl,
        required this.rTSPWebSocketUri,
        required this.autoStartMulticast,
  });
}

enum ConfigurationEnumeration {
  @JsonValue("All")
  All,
  @JsonValue("VideoSource")
  VideoSource,
  @JsonValue("VideoEncoder")
  VideoEncoder,
  @JsonValue("AudioSource")
  AudioSource,
  @JsonValue("AudioEncoder")
  AudioEncoder,
  @JsonValue("AudioOutput")
  AudioOutput,
  @JsonValue("AudioDecoder")
  AudioDecoder,
  @JsonValue("Metadata")
  Metadata,
  @JsonValue("Analytics")
  Analytics,
  @JsonValue("PTZ")
  PTZ,
}

@JsonSerializable()
class ConfigurationRef  {
  /// Type of the configuration as defined by tr2:ConfigurationEnumeration.
@JsonKey(name: 'Type')
final String type;
  /// Reference token of an existing configuration.
/// Token shall be included in the AddConfiguration request along with the type.
/// Token shall be included in the CreateProfile request when Configuration elements are included and type is selected.
/// Token is optional for RemoveConfiguration request. If no token is provided in RemoveConfiguration request, device shall
/// remove the configuration of the type included in the profile.
@JsonKey(name: 'Token')
final ReferenceToken? token;
  ConfigurationRef({
        required this.type,
        this.token,
  });
}

/// 
/// A set of media configurations. 
/// 
@JsonSerializable()
class ConfigurationSet  {
  /// Optional configuration of the Video input.
@JsonKey(name: 'VideoSource')
final VideoSourceConfiguration? videoSource;
  /// Optional configuration of the Audio input.
@JsonKey(name: 'AudioSource')
final AudioSourceConfiguration? audioSource;
  /// Optional configuration of the Video encoder.
@JsonKey(name: 'VideoEncoder')
final VideoEncoder2Configuration? videoEncoder;
  /// Optional configuration of the Audio encoder.
@JsonKey(name: 'AudioEncoder')
final AudioEncoder2Configuration? audioEncoder;
  /// Optional configuration of the analytics module and rule engine.
@JsonKey(name: 'Analytics')
final VideoAnalyticsConfiguration? analytics;
  /// Optional configuration of the pan tilt zoom unit.
@JsonKey(name: 'PTZ')
final PTZConfiguration? pTZ;
  /// Optional configuration of the metadata stream.
@JsonKey(name: 'Metadata')
final MetadataConfiguration? metadata;
  /// Optional configuration of the Audio output.
@JsonKey(name: 'AudioOutput')
final AudioOutputConfiguration? audioOutput;
  /// Optional configuration of the Audio decoder.
@JsonKey(name: 'AudioDecoder')
final AudioDecoderConfiguration? audioDecoder;
  ConfigurationSet({
        this.videoSource,
        this.audioSource,
        this.videoEncoder,
        this.audioEncoder,
        this.analytics,
        this.pTZ,
        this.metadata,
        this.audioOutput,
        this.audioDecoder,
  });
}

/// 
/// A media profile consists of a set of media configurations. 
/// 
@JsonSerializable()
class MediaProfile  {
  /// User readable name of the profile.
@JsonKey(name: 'Name')
final String name;
  /// The configurations assigned to the profile.
@JsonKey(name: 'Configurations')
final ConfigurationSet? configurations;
  /// Unique identifier of the profile.
@JsonKey(name: 'token')
final ReferenceToken token;
  /// A value of true signals that the profile cannot be deleted. Default is false.
@JsonKey(name: 'fixed')
final bool fixed;
  MediaProfile({
        required this.name,
        this.configurations,
        required this.token,
        required this.fixed,
  });
}

@JsonSerializable()
class CreateProfile  {
  /// friendly name of the profile to be created
@JsonKey(name: 'Name')
final String name;
  /// Optional set of configurations to be assigned to the profile. List entries with tr2:ConfigurationEnumeration value "All" shall be ignored.
@JsonKey(name: 'Configuration')
final ConfigurationRef? configuration;
  CreateProfile({
        required this.name,
        this.configuration,
  });
}

@JsonSerializable()
class CreateProfileResponse  {
  /// Token assigned by the device for the newly created profile.
@JsonKey(name: 'Token')
final ReferenceToken token;
  CreateProfileResponse({
        required this.token,
  });
}

@JsonSerializable()
class GetProfiles  {
  /// Optional token of the requested profile.
@JsonKey(name: 'Token')
final ReferenceToken? token;
  /// The types shall be provided as defined by tr2:ConfigurationEnumeration.
@JsonKey(name: 'Type')
final String? type;
  GetProfiles({
        this.token,
        this.type,
  });
}

@JsonSerializable()
class GetProfilesResponse  {
  /// Lists all profiles that exist in the media service. The response provides the requested types of Configurations as far as available. 
/// If a profile doesn't contain a type no error shall be provided.
@JsonKey(name: 'Profiles')
final MediaProfile? profiles;
  GetProfilesResponse({
        this.profiles,
  });
}

@JsonSerializable()
class AddConfiguration  {
  /// Reference to the profile where the configuration should be added
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// Optional item. If present updates the Name property of the profile.
@JsonKey(name: 'Name')
final String? name;
  /// 
/// List of configurations to be added. The types shall be provided in the order defined by tr2:ConfigurationEnumeration. List entries with tr2:ConfigurationEnumeration value "All" shall be ignored.
/// 
@JsonKey(name: 'Configuration')
final ConfigurationRef? configuration;
  AddConfiguration({
        required this.profileToken,
        this.name,
        this.configuration,
  });
}

class AddConfigurationResponse {}
@JsonSerializable()
class RemoveConfiguration  {
  /// This element contains a  reference to the media profile from which the AudioDecoderConfiguration shall be removed.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  /// List of configurations to be removed. The types shall be provided in the order defined by tr2:ConfigurationEnumeration. Tokens appearing in the configuration list shall be ignored. Presence of the "All" type shall result in an empty profile.
@JsonKey(name: 'Configuration')
final ConfigurationRef configuration;
  RemoveConfiguration({
        required this.profileToken,
        required this.configuration,
  });
}

class RemoveConfigurationResponse {}
@JsonSerializable()
class DeleteProfile  {
  /// This element contains a  reference to the profile that should be deleted.
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteProfile({
        required this.token,
  });
}

class DeleteProfileResponse {}
@JsonSerializable()
class GetConfiguration  {
  /// Token of the requested configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  /// Contains the token of an existing media profile the configurations shall be compatible with.
@JsonKey(name: 'ProfileToken')
final ReferenceToken? profileToken;
  GetConfiguration({
        this.configurationToken,
        this.profileToken,
  });
}

@JsonSerializable()
class GetVideoEncoderConfigurationsResponse  {
  /// This element contains a list of video encoder configurations.
@JsonKey(name: 'Configurations')
final VideoEncoder2Configuration? configurations;
  GetVideoEncoderConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetVideoSourceConfigurationsResponse  {
  /// This element contains a list of video source configurations.
@JsonKey(name: 'Configurations')
final VideoSourceConfiguration? configurations;
  GetVideoSourceConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetAudioEncoderConfigurationsResponse  {
  /// This element contains a list of audio encoder configurations.
@JsonKey(name: 'Configurations')
final AudioEncoder2Configuration? configurations;
  GetAudioEncoderConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetAudioSourceConfigurationsResponse  {
  /// This element contains a list of audio source configurations.
@JsonKey(name: 'Configurations')
final AudioSourceConfiguration? configurations;
  GetAudioSourceConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetAnalyticsConfigurationsResponse  {
  /// This element contains a list of Analytics configurations.
@JsonKey(name: 'Configurations')
final VideoAnalyticsConfiguration? configurations;
  GetAnalyticsConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetMetadataConfigurationsResponse  {
  /// This element contains a list of metadata configurations
@JsonKey(name: 'Configurations')
final MetadataConfiguration? configurations;
  GetMetadataConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetAudioOutputConfigurationsResponse  {
  /// This element contains a list of audio output configurations
@JsonKey(name: 'Configurations')
final AudioOutputConfiguration? configurations;
  GetAudioOutputConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class GetAudioDecoderConfigurationsResponse  {
  /// This element contains a list of audio decoder configurations
@JsonKey(name: 'Configurations')
final AudioDecoderConfiguration? configurations;
  GetAudioDecoderConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class SetVideoEncoderConfiguration  {
  /// Contains the modified video encoder configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final VideoEncoder2Configuration configuration;
  SetVideoEncoderConfiguration({
        required this.configuration,
  });
}

class SetConfigurationResponse {}
@JsonSerializable()
class SetVideoSourceConfiguration  {
  /// Contains the modified video source configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final VideoSourceConfiguration configuration;
  SetVideoSourceConfiguration({
        required this.configuration,
  });
}

@JsonSerializable()
class SetAudioEncoderConfiguration  {
  /// Contains the modified audio encoder configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final AudioEncoder2Configuration configuration;
  SetAudioEncoderConfiguration({
        required this.configuration,
  });
}

@JsonSerializable()
class SetAudioSourceConfiguration  {
  /// Contains the modified audio source configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final AudioSourceConfiguration configuration;
  SetAudioSourceConfiguration({
        required this.configuration,
  });
}

@JsonSerializable()
class SetMetadataConfiguration  {
  /// Contains the modified metadata configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final MetadataConfiguration configuration;
  SetMetadataConfiguration({
        required this.configuration,
  });
}

@JsonSerializable()
class SetAudioOutputConfiguration  {
  /// Contains the modified audio output configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final AudioOutputConfiguration configuration;
  SetAudioOutputConfiguration({
        required this.configuration,
  });
}

@JsonSerializable()
class SetAudioDecoderConfiguration  {
  /// Contains the modified audio decoder configuration. The configuration shall exist in the device.
@JsonKey(name: 'Configuration')
final AudioDecoderConfiguration configuration;
  SetAudioDecoderConfiguration({
        required this.configuration,
  });
}

@JsonSerializable()
class GetVideoSourceConfigurationOptionsResponse  {
  /// This message contains the video source configuration options. If a video source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final VideoSourceConfigurationOptions options;
  GetVideoSourceConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetVideoEncoderConfigurationOptionsResponse  {
  @JsonKey(name: 'Options')
final VideoEncoder2ConfigurationOptions options;
  GetVideoEncoderConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetAudioSourceConfigurationOptionsResponse  {
  /// This message contains the audio source configuration options. If a audio source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final AudioSourceConfigurationOptions options;
  GetAudioSourceConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetAudioEncoderConfigurationOptionsResponse  {
  /// This message contains the audio encoder configuration options. If a audio encoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final AudioEncoder2ConfigurationOptions options;
  GetAudioEncoderConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetMetadataConfigurationOptionsResponse  {
  /// This message contains the metadata configuration options. If a metadata configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final MetadataConfigurationOptions options;
  GetMetadataConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetAudioOutputConfigurationOptionsResponse  {
  /// This message contains the audio output configuration options. If a audio output configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final AudioOutputConfigurationOptions options;
  GetAudioOutputConfigurationOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class GetAudioDecoderConfigurationOptionsResponse  {
  /// This message contains the audio decoder configuration options. If a audio decoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
@JsonKey(name: 'Options')
final AudioEncoder2ConfigurationOptions options;
  GetAudioDecoderConfigurationOptionsResponse({
        required this.options,
  });
}

enum TransportProtocol {
  @JsonValue("RtspUnicast")
  RtspUnicast,
  @JsonValue("RtspMulticast")
  RtspMulticast,
  @JsonValue("RTSP")
  RTSP,
  @JsonValue("RtspOverHttp")
  RtspOverHttp,
}

@JsonSerializable()
class GetVideoEncoderInstances  {
  /// Token of the video source configuration
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetVideoEncoderInstances({
        required this.configurationToken,
  });
}

@JsonSerializable()
class EncoderInstance  {
  /// Video Media Subtype for the video format. For definitions see tt:VideoEncodingMimeNames and  IANA Media Types.
@JsonKey(name: 'Encoding')
final String encoding;
  /// The minimum guaranteed number of encoder instances (applications) for the VideoSourceConfiguration.
@JsonKey(name: 'Number')
final int number;
  EncoderInstance({
        required this.encoding,
        required this.number,
  });
}

@JsonSerializable()
class EncoderInstanceInfo  {
  /// If a device limits the number of instances for respective Video Codecs the response contains the information how many streams can be set up at the same time per VideoSource.
@JsonKey(name: 'Codec')
final EncoderInstance? codec;
  /// The minimum guaranteed total number of encoder instances (applications) per VideoSourceConfiguration. The device is able to deliver the Total number of streams
@JsonKey(name: 'Total')
final int total;
  EncoderInstanceInfo({
        this.codec,
        required this.total,
  });
}

@JsonSerializable()
class GetVideoEncoderInstancesResponse  {
  /// The minimum guaranteed total number of encoder instances (applications) per VideoSourceConfiguration.
@JsonKey(name: 'Info')
final EncoderInstanceInfo info;
  GetVideoEncoderInstancesResponse({
        required this.info,
  });
}

@JsonSerializable()
class GetStreamUri  {
  /// Defines the network protocol for streaming as defined by tr2:TransportProtocol
@JsonKey(name: 'Protocol')
final String protocol;
  /// The ProfileToken element indicates the media profile to use and will define the configuration of the content of the stream.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetStreamUri({
        required this.protocol,
        required this.profileToken,
  });
}

@JsonSerializable()
class GetStreamUriResponse  {
  /// Stable Uri to be used for requesting the media stream
@JsonKey(name: 'Uri')
final String uri;
  GetStreamUriResponse({
        required this.uri,
  });
}

@JsonSerializable()
class SetSynchronizationPoint  {
  /// Contains a Profile reference for which a Synchronization Point is requested.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  SetSynchronizationPoint({
        required this.profileToken,
  });
}

class SetSynchronizationPointResponse {}
@JsonSerializable()
class GetSnapshotUri  {
  /// The ProfileToken element indicates the media profile to use and will define the source and dimensions of the snapshot.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  GetSnapshotUri({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetSnapshotUriResponse  {
  /// Stable Uri to be used for requesting snapshot images.
@JsonKey(name: 'Uri')
final String uri;
  GetSnapshotUriResponse({
        required this.uri,
  });
}

@JsonSerializable()
class StartStopMulticastStreaming  {
  /// Contains the token of the Profile that is used to define the multicast stream.
@JsonKey(name: 'ProfileToken')
final ReferenceToken profileToken;
  StartStopMulticastStreaming({
        required this.profileToken,
  });
}

@JsonSerializable()
class GetVideoSourceModes  {
  /// Contains a video source reference for which a video source mode is requested.
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  GetVideoSourceModes({
        required this.videoSourceToken,
  });
}

@JsonSerializable()
class GetVideoSourceModesResponse  {
  /// Return the information for specified video source mode.
@JsonKey(name: 'VideoSourceModes')
final VideoSourceMode videoSourceModes;
  GetVideoSourceModesResponse({
        required this.videoSourceModes,
  });
}

@JsonSerializable()
class SetVideoSourceMode  {
  /// Contains a video source reference for which a video source mode is requested.
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  /// Indicate video source mode.
@JsonKey(name: 'VideoSourceModeToken')
final ReferenceToken videoSourceModeToken;
  SetVideoSourceMode({
        required this.videoSourceToken,
        required this.videoSourceModeToken,
  });
}

@JsonSerializable()
class SetVideoSourceModeResponse  {
  /// The response contains information about rebooting after returning response. When Reboot is set true, a device will reboot automatically after setting mode.
@JsonKey(name: 'Reboot')
final bool reboot;
  SetVideoSourceModeResponse({
        required this.reboot,
  });
}

/// List of one or more encodings supported for this video source.  For name definitions see tt:VideoEncodingMimeNames, and see IANA Media Types.
typedef EncodingTypes = List<String>;

@JsonSerializable()
class VideoSourceMode  {
  /// Max frame rate in frames per second for this video source mode.
@JsonKey(name: 'MaxFramerate')
final double maxFramerate;
  /// Max horizontal and vertical resolution for this video source mode.
@JsonKey(name: 'MaxResolution')
final VideoResolution maxResolution;
  /// List of one or more encodings supported for this video source.  For name definitions see tt:VideoEncodingMimeNames, and see IANA Media Types.
@JsonKey(name: 'Encodings')
final EncodingTypes encodings;
  /// After setting the mode if a device starts to reboot this value is true. If a device change the mode without rebooting this value is false. If true, configured parameters may not be guaranteed by the device after rebooting.
@JsonKey(name: 'Reboot')
final bool reboot;
  /// Informative description of this video source mode. This field should be described in English.
@JsonKey(name: 'Description')
final Description? description;
  /// Indicate token for video source mode.
@JsonKey(name: 'token')
final ReferenceToken token;
  /// Indication of whether this mode is active. If active this value is true. In case of non-indication, it means as false. The value of true shall be had by only one video source mode.
@JsonKey(name: 'Enabled')
final bool enabled;
  VideoSourceMode({
        required this.maxFramerate,
        required this.maxResolution,
        required this.encodings,
        required this.reboot,
        this.description,
        required this.token,
        required this.enabled,
  });
}

@JsonSerializable()
class GetOSDs  {
  /// The GetOSDs command fetches the OSD configuration if the OSD token is known.
@JsonKey(name: 'OSDToken')
final ReferenceToken? oSDToken;
  /// Token of the Video Source Configuration, which has OSDs associated with are requested. If token not exist, request all available OSDs.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  GetOSDs({
        this.oSDToken,
        this.configurationToken,
  });
}

@JsonSerializable()
class GetOSDsResponse  {
  /// This element contains a list of requested OSDs.
@JsonKey(name: 'OSDs')
final OSDConfiguration? oSDs;
  GetOSDsResponse({
        this.oSDs,
  });
}

@JsonSerializable()
class SetOSD  {
  /// Contains the modified OSD configuration.
@JsonKey(name: 'OSD')
final OSDConfiguration oSD;
  SetOSD({
        required this.oSD,
  });
}

@JsonSerializable()
class GetOSDOptions  {
  /// Video Source Configuration Token that specifies an existing video source configuration that the options shall be compatible with.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetOSDOptions({
        required this.configurationToken,
  });
}

@JsonSerializable()
class GetOSDOptionsResponse  {
  /// 
@JsonKey(name: 'OSDOptions')
final OSDConfigurationOptions oSDOptions;
  GetOSDOptionsResponse({
        required this.oSDOptions,
  });
}

@JsonSerializable()
class CreateOSD  {
  /// Contain the initial OSD configuration for create.
@JsonKey(name: 'OSD')
final OSDConfiguration oSD;
  CreateOSD({
        required this.oSD,
  });
}

@JsonSerializable()
class CreateOSDResponse  {
  /// Returns Token of the newly created OSD
@JsonKey(name: 'OSDToken')
final ReferenceToken oSDToken;
  CreateOSDResponse({
        required this.oSDToken,
  });
}

@JsonSerializable()
class DeleteOSD  {
  /// This element contains a reference to the OSD configuration that should be deleted.
@JsonKey(name: 'OSDToken')
final ReferenceToken oSDToken;
  DeleteOSD({
        required this.oSDToken,
  });
}

enum MaskType {
  @JsonValue("Color")
  Color,
  @JsonValue("Pixelated")
  Pixelated,
  @JsonValue("Blurred")
  Blurred,
}

@JsonSerializable()
class Mask  {
  /// Token of the VideoSourceConfiguration the Mask is associated with.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  /// Geometric representation of the mask area.
@JsonKey(name: 'Polygon')
final Polygon polygon;
  /// Type of masking as defined by tr2:MaskType:
/// 
/// Color - The masked area is colored with color defined by the Color field.
/// Pixelated - The masked area is filled in mosaic style to hide details.
/// Blurred - The masked area is low pass filtered to hide details.
/// 
@JsonKey(name: 'Type')
final String type;
  /// Color of the masked area.
@JsonKey(name: 'Color')
final Color? color;
  /// If set the mask will cover the image, otherwise it will be fully transparent.
@JsonKey(name: 'Enabled')
final bool enabled;
  /// Token of the mask.
@JsonKey(name: 'token')
final ReferenceToken token;
  Mask({
        required this.configurationToken,
        required this.polygon,
        required this.type,
        this.color,
        required this.enabled,
        required this.token,
  });
}

@JsonSerializable()
class GetMasks  {
  /// Optional mask token of an existing mask.
@JsonKey(name: 'Token')
final ReferenceToken? token;
  /// Optional token of a Video Source Configuration.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken? configurationToken;
  GetMasks({
        this.token,
        this.configurationToken,
  });
}

@JsonSerializable()
class GetMasksResponse  {
  /// List of Mask configurations.
@JsonKey(name: 'Masks')
final Mask? masks;
  GetMasksResponse({
        this.masks,
  });
}

@JsonSerializable()
class SetMask  {
  /// Mask to be updated.
@JsonKey(name: 'Mask')
final Mask mask;
  SetMask({
        required this.mask,
  });
}

@JsonSerializable()
class GetMaskOptions  {
  /// Video Source Configuration Token that specifies an existing video source configuration that the options shall be compatible with.
@JsonKey(name: 'ConfigurationToken')
final ReferenceToken configurationToken;
  GetMaskOptions({
        required this.configurationToken,
  });
}

@JsonSerializable()
class MaskOptions  {
  /// Maximum supported number of masks per VideoSourceConfiguration.
@JsonKey(name: 'MaxMasks')
final int maxMasks;
  /// Maximum supported number of points per mask.
@JsonKey(name: 'MaxPoints')
final int maxPoints;
  /// Information which types of tr2:MaskType are supported. Valid values are 'Color', 'Pixelated' and 'Blurred'.
@JsonKey(name: 'Types')
final String types;
  /// Colors supported.
@JsonKey(name: 'Color')
final ColorOptions color;
  /// Information whether the polygon must have four points and a rectangular shape.
@JsonKey(name: 'RectangleOnly')
final bool rectangleOnly;
  /// Indicates the device capability of change in color of privacy mask for one video source configuration will automatically be applied to all the privacy masks associated with the same video source configuration.
@JsonKey(name: 'SingleColorOnly')
final bool singleColorOnly;
  MaskOptions({
        required this.maxMasks,
        required this.maxPoints,
        required this.types,
        required this.color,
        required this.rectangleOnly,
        required this.singleColorOnly,
  });
}

@JsonSerializable()
class GetMaskOptionsResponse  {
  /// 
@JsonKey(name: 'Options')
final MaskOptions options;
  GetMaskOptionsResponse({
        required this.options,
  });
}

@JsonSerializable()
class CreateMask  {
  /// Contain the initial mask configuration for create.
@JsonKey(name: 'Mask')
final Mask mask;
  CreateMask({
        required this.mask,
  });
}

@JsonSerializable()
class CreateMaskResponse  {
  /// Returns Token of the newly created Mask
@JsonKey(name: 'Token')
final ReferenceToken token;
  CreateMaskResponse({
        required this.token,
  });
}

@JsonSerializable()
class DeleteMask  {
  /// This element contains a reference to the Mask configuration that should be deleted.
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteMask({
        required this.token,
  });
}

