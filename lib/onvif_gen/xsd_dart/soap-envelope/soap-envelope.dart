import '../xml/xml.dart';
/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

class Envelope {}
/// 
///   Elements replacing the wildcard MUST be namespace qualified, but can be in the targetNamespace
///   
class Header {}
class Body {}
/// 
///     Fault reporting structure
///   
@JsonSerializable()
class Fault  {
  @JsonKey(name: 'Code')
final faultcode code;
  @JsonKey(name: 'Reason')
final faultreason reason;
  @JsonKey(name: 'Node')
final String? node;
  @JsonKey(name: 'Role')
final String? role;
  @JsonKey(name: 'Detail')
final detail? detail;
  Fault({
        required this.code,
        required this.reason,
        this.node,
        this.role,
        this.detail,
  });
}

@JsonSerializable()
class faultreason  {
  @JsonKey(name: 'Text')
final reasontext text;
  faultreason({
        required this.text,
  });
}

@JsonSerializable()
class reasontext  {
  @JsonKey(name: 'value')
final String value;
  reasontext({
        required this.value,
  });
}

@JsonSerializable()
class faultcode  {
  @JsonKey(name: 'Value')
final faultcodeEnum value;
  @JsonKey(name: 'Subcode')
final subcode? subcode;
  faultcode({
        required this.value,
        this.subcode,
  });
}

enum faultcodeEnum {
  @JsonValue("tns:DataEncodingUnknown")
  DataEncodingUnknown,
  @JsonValue("tns:MustUnderstand")
  MustUnderstand,
  @JsonValue("tns:Receiver")
  Receiver,
  @JsonValue("tns:Sender")
  Sender,
  @JsonValue("tns:VersionMismatch")
  VersionMismatch,
}

@JsonSerializable()
class subcode  {
  @JsonKey(name: 'Value')
final String value;
  @JsonKey(name: 'Subcode')
final subcode? subcode;
  subcode({
        required this.value,
        this.subcode,
  });
}

class detail {}
@JsonSerializable()
class NotUnderstoodType  {
  @JsonKey(name: 'qname')
final String qname;
  NotUnderstoodType({
        required this.qname,
  });
}

@JsonSerializable()
class SupportedEnvType  {
  @JsonKey(name: 'qname')
final String qname;
  SupportedEnvType({
        required this.qname,
  });
}

@JsonSerializable()
class UpgradeType  {
  @JsonKey(name: 'SupportedEnvelope')
final SupportedEnvType supportedEnvelope;
  UpgradeType({
        required this.supportedEnvelope,
  });
}

