import '../common/common.dart';
import '../b-2/b-2.dart';
/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

@JsonSerializable()
class Appearance  {
  @JsonKey(name: 'Transformation')
final Transformation? transformation;
  @JsonKey(name: 'Shape')
final ShapeDescriptor? shape;
  @JsonKey(name: 'Color')
final ColorDescriptor? color;
  @JsonKey(name: 'Class')
final ClassDescriptor? class_;
  @JsonKey(name: 'Extension')
final AppearanceExtension? extension_;
  @JsonKey(name: 'GeoLocation')
final GeoLocation? geoLocation;
  @JsonKey(name: 'VehicleInfo')
final VehicleInfo? vehicleInfo;
  @JsonKey(name: 'LicensePlateInfo')
final LicensePlateInfo? licensePlateInfo;
  Appearance({
        this.transformation,
        this.shape,
        this.color,
        this.class_,
        this.extension_,
        this.geoLocation,
        this.vehicleInfo,
        this.licensePlateInfo,
  });
}

class AppearanceExtension {}
enum VehicleType {
  @JsonValue("Bus")
  Bus,
  @JsonValue("Car")
  Car,
  @JsonValue("Truck")
  Truck,
  @JsonValue("Bicycle")
  Bicycle,
  @JsonValue("Motorcycle")
  Motorcycle,
}

enum PlateType {
  @JsonValue("Normal")
  Normal,
  @JsonValue("Police")
  Police,
  @JsonValue("Diplomat")
  Diplomat,
  @JsonValue("Temporary")
  Temporary,
}

@JsonSerializable()
class VehicleInfo  {
  @JsonKey(name: 'Type')
final StringLikelihood type;
  @JsonKey(name: 'Brand')
final StringLikelihood? brand;
  @JsonKey(name: 'Model')
final StringLikelihood? model;
  VehicleInfo({
        required this.type,
        this.brand,
        this.model,
  });
}

@JsonSerializable()
class LicensePlateInfo  {
  /// A string of vehicle license plate number.
@JsonKey(name: 'PlateNumber')
final StringLikelihood plateNumber;
  /// A description of the vehicle license plate, e.g., "Normal", "Police", "Diplomat"
@JsonKey(name: 'PlateType')
final StringLikelihood? plateType;
  /// Describe the country of the license plate, in order to avoid the same license plate number.
@JsonKey(name: 'CountryCode')
final StringLikelihood? countryCode;
  /// State province or authority that issue the license plate.
@JsonKey(name: 'IssuingEntity')
final StringLikelihood? issuingEntity;
  LicensePlateInfo({
        required this.plateNumber,
        this.plateType,
        this.countryCode,
        this.issuingEntity,
  });
}

@JsonSerializable()
class ShapeDescriptor  {
  @JsonKey(name: 'BoundingBox')
final Rectangle boundingBox;
  @JsonKey(name: 'CenterOfGravity')
final Vector centerOfGravity;
  @JsonKey(name: 'Polygon')
final Polygon? polygon;
  @JsonKey(name: 'Extension')
final ShapeDescriptorExtension? extension_;
  ShapeDescriptor({
        required this.boundingBox,
        required this.centerOfGravity,
        this.polygon,
        this.extension_,
  });
}

class ShapeDescriptorExtension {}
@JsonSerializable()
class ColorDescriptor  {
  @JsonKey(name: 'Extension')
final ColorDescriptorExtension? extension_;
  ColorDescriptor({
        this.extension_,
  });
}

class ColorDescriptorExtension {}
enum ClassType {
  @JsonValue("Animal")
  Animal,
  @JsonValue("Face")
  Face,
  @JsonValue("Human")
  Human,
  @JsonValue("Vehical")
  Vehical,
  @JsonValue("Other")
  Other,
}

@JsonSerializable()
class StringLikelihood  {
  @JsonKey(name: 'value')
final String value;
  @JsonKey(name: 'Likelihood')
final double likelihood;
  StringLikelihood({
        required this.value,
        required this.likelihood,
  });
}

@JsonSerializable()
class ClassDescriptor  {
  @JsonKey(name: 'Extension')
final ClassDescriptorExtension? extension_;
  /// ONVIF recommends to use this 'Type' element instead of 'ClassCandidate' and 'Extension' above for new design.
@JsonKey(name: 'Type')
final StringLikelihood? type;
  ClassDescriptor({
        this.extension_,
        this.type,
  });
}

@JsonSerializable()
class ClassDescriptorExtension  {
  @JsonKey(name: 'OtherTypes')
final OtherType otherTypes;
  @JsonKey(name: 'Extension')
final ClassDescriptorExtension2? extension_;
  ClassDescriptorExtension({
        required this.otherTypes,
        this.extension_,
  });
}

class ClassDescriptorExtension2 {}
@JsonSerializable()
class OtherType  {
  /// Object Class Type
@JsonKey(name: 'Type')
final String type;
  /// A likelihood/probability that the corresponding object belongs to this class. The sum of the likelihoods shall NOT exceed 1
@JsonKey(name: 'Likelihood')
final double likelihood;
  OtherType({
        required this.type,
        required this.likelihood,
  });
}


class ObjectExtension {}
@JsonSerializable()
class Frame  {
  @JsonKey(name: 'PTZStatus')
final PTZStatus? pTZStatus;
  @JsonKey(name: 'Transformation')
final Transformation? transformation;
  @JsonKey(name: 'Object')
final Object? object;
  @JsonKey(name: 'ObjectTree')
final ObjectTree? objectTree;
  @JsonKey(name: 'Extension')
final FrameExtension? extension_;
  @JsonKey(name: 'UtcTime')
final DateTime utcTime;
  Frame({
        this.pTZStatus,
        this.transformation,
        this.object,
        this.objectTree,
        this.extension_,
        required this.utcTime,
  });
}

@JsonSerializable()
class FrameExtension  {
  @JsonKey(name: 'MotionInCells')
final MotionInCells? motionInCells;
  @JsonKey(name: 'Extension')
final FrameExtension2? extension_;
  FrameExtension({
        this.motionInCells,
        this.extension_,
  });
}

class FrameExtension2 {}
@JsonSerializable()
class Merge  {
  @JsonKey(name: 'from')
final ObjectId from;
  @JsonKey(name: 'to')
final ObjectId to;
  Merge({
        required this.from,
        required this.to,
  });
}

@JsonSerializable()
class Split  {
  @JsonKey(name: 'from')
final ObjectId from;
  @JsonKey(name: 'to')
final ObjectId to;
  Split({
        required this.from,
        required this.to,
  });
}

@JsonSerializable()
class Rename  {
  @JsonKey(name: 'from')
final ObjectId from;
  @JsonKey(name: 'to')
final ObjectId to;
  Rename({
        required this.from,
        required this.to,
  });
}

@JsonSerializable()
class ObjectId  {
  @JsonKey(name: 'ObjectId')
final int objectId;
  ObjectId({
        required this.objectId,
  });
}

@JsonSerializable()
class Behaviour  {
  @JsonKey(name: 'Extension')
final BehaviourExtension? extension_;
  @JsonKey(name: 'Speed')
final double? speed;
  Behaviour({
        this.extension_,
        this.speed,
  });
}

class BehaviourExtension {}
@JsonSerializable()
class ObjectTree  {
  @JsonKey(name: 'Rename')
final Rename? rename;
  @JsonKey(name: 'Split')
final Split? split;
  @JsonKey(name: 'Merge')
final Merge? merge;
  @JsonKey(name: 'Delete')
final ObjectId? delete;
  @JsonKey(name: 'Extension')
final ObjectTreeExtension? extension_;
  ObjectTree({
        this.rename,
        this.split,
        this.merge,
        this.delete,
        this.extension_,
  });
}

class ObjectTreeExtension {}
@JsonSerializable()
class MotionInCells  {
  /// Number of columns of the cell grid (x dimension)
@JsonKey(name: 'Columns')
final int columns;
  /// Number of rows of the cell grid (y dimension)
@JsonKey(name: 'Rows')
final int rows;
  /// A “1” denotes a cell where motion is detected and a “0” an empty cell. The first cell is in the upper left corner. Then the cell order goes first from left to right and then from up to down.  If the number of cells is not a multiple of 8 the last byte is filled with zeros. The information is run length encoded according to Packbit coding in ISO 12369 (TIFF, Revision 6.0).
@JsonKey(name: 'Cells')
final Uint8List cells;
  MotionInCells({
        required this.columns,
        required this.rows,
        required this.cells,
  });
}

class MetadataStream {}
@JsonSerializable()
class MetadataStreamExtension  {
  @JsonKey(name: 'AudioAnalyticsStream')
final AudioAnalyticsStream? audioAnalyticsStream;
  @JsonKey(name: 'Extension')
final MetadataStreamExtension2? extension_;
  MetadataStreamExtension({
        this.audioAnalyticsStream,
        this.extension_,
  });
}

class MetadataStreamExtension2 {}
@JsonSerializable()
class AudioAnalyticsStream  {
  @JsonKey(name: 'AudioDescriptor')
final AudioDescriptor? audioDescriptor;
  @JsonKey(name: 'Extension')
final AudioAnalyticsStreamExtension? extension_;
  AudioAnalyticsStream({
        this.audioDescriptor,
        this.extension_,
  });
}

@JsonSerializable()
class AudioDescriptor  {
  @JsonKey(name: 'UtcTime')
final DateTime utcTime;
  AudioDescriptor({
        required this.utcTime,
  });
}

class AudioAnalyticsStreamExtension {}
class VideoAnalyticsStream {}
class VideoAnalyticsStreamExtension {}
class PTZStream {}
class PTZStreamExtension {}
class EventStream {}
class EventStreamExtension {}
