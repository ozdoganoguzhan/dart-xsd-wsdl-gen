/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capabilities for the uplink service is returned in the Capabilities element.
@JsonKey(name: 'Capabilities')
final Capabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class Capabilities  {
  /// Maximum number of uplink connections that can be configured.
@JsonKey(name: 'MaxUplinks')
final int maxUplinks;
  Capabilities({
        required this.maxUplinks,
  });
}

enum ConnectionStatus {
  @JsonValue("Offline")
  Offline,
  @JsonValue("Connecting")
  Connecting,
  @JsonValue("Connected")
  Connected,
}

@JsonSerializable()
class Configuration  {
  /// Uniform resource locator by which the remote client can be reached.
@JsonKey(name: 'RemoteAddress')
final String remoteAddress;
  /// ID of the certificate to be used for client authentication.
@JsonKey(name: 'CertificateID')
final String certificateID;
  /// Authorization level that will be assigned to the uplink connection.
@JsonKey(name: 'UserLevel')
final String userLevel;
  /// Current connection status (see tup:ConnectionStatus for possible values).
@JsonKey(name: 'Status')
final String? status;
  Configuration({
        required this.remoteAddress,
        required this.certificateID,
        required this.userLevel,
        this.status,
  });
}

class GetUplinks {}
@JsonSerializable()
class GetUplinksResponse  {
  /// List of configured uplinks.
@JsonKey(name: 'Configuration')
final Configuration? configuration;
  GetUplinksResponse({
        this.configuration,
  });
}

@JsonSerializable()
class SetUplink  {
  /// SConfiguration to be added or modified.
@JsonKey(name: 'Configuration')
final Configuration configuration;
  SetUplink({
        required this.configuration,
  });
}

class SetUplinkResponse {}
@JsonSerializable()
class DeleteUplink  {
  /// Uniform resource locator of the configuration to be deleted.
@JsonKey(name: 'RemoteAddress')
final String remoteAddress;
  DeleteUplink({
        required this.remoteAddress,
  });
}

class DeleteUplinkResponse {}
