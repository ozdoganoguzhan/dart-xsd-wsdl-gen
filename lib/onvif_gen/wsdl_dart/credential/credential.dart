/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

/// 
/// The service capabilities reflect optional functionality of a service. The information is static
/// and does not change during device operation. The following capabilities are available:
/// 
@JsonSerializable()
class ServiceCapabilities  {
  /// 
/// A list of identifier types that the device supports. Identifiers types starting with
/// the prefix pt: are reserved to define ONVIF specific types. For custom defined identifier types 
///                 shall all share the "pt:<Name>" syntax.
/// 
@JsonKey(name: 'SupportedIdentifierType')
final String supportedIdentifierType;
  @JsonKey(name: 'Extension')
final ServiceCapabilitiesExtension? extension_;
  /// 
/// The maximum number of entries returned by a single Get<Entity>List or Get<Entity>
/// request. The device shall never return more than this number of entities in a single response.
/// 
@JsonKey(name: 'MaxLimit')
final PositiveInteger maxLimit;
  /// 
/// Indicates that the device supports credential validity.
/// 
@JsonKey(name: 'CredentialValiditySupported')
final bool credentialValiditySupported;
  /// 
/// Indicates that the device supports validity on the association between a credential and an
/// access profile.
/// 
@JsonKey(name: 'CredentialAccessProfileValiditySupported')
final bool credentialAccessProfileValiditySupported;
  /// 
/// Indicates that the device supports both date and time value for validity. If set to false,
/// then the time value is ignored.
/// 
@JsonKey(name: 'ValiditySupportsTimeValue')
final bool validitySupportsTimeValue;
  /// 
/// The maximum number of credential supported by the device.
/// 
@JsonKey(name: 'MaxCredentials')
final PositiveInteger maxCredentials;
  /// 
/// The maximum number of access profiles for a credential.
/// 
@JsonKey(name: 'MaxAccessProfilesPerCredential')
final PositiveInteger maxAccessProfilesPerCredential;
  /// 
/// Indicates the device supports resetting of anti-passback violations and notifying on
/// anti-passback violations.
/// 
@JsonKey(name: 'ResetAntipassbackSupported')
final bool resetAntipassbackSupported;
  /// 
/// Indicates that the client is allowed to supply the token when creating credentials. 
/// To enable the use of the command SetCredential, the value must be set to true.
/// 
@JsonKey(name: 'ClientSuppliedTokenSupported')
final bool clientSuppliedTokenSupported;
  /// 
/// The default time period that the credential will temporary be suspended (e.g. by using
/// the wrong PIN a predetermined number of times).
/// The time period is defined as an [ISO 8601] duration string (e.g. “PT5M”).
/// 
@JsonKey(name: 'DefaultCredentialSuspensionDuration')
final Duration defaultCredentialSuspensionDuration;
  ServiceCapabilities({
        required this.supportedIdentifierType,
        this.extension_,
        required this.maxLimit,
        required this.credentialValiditySupported,
        required this.credentialAccessProfileValiditySupported,
        required this.validitySupportsTimeValue,
        required this.maxCredentials,
        required this.maxAccessProfilesPerCredential,
        required this.resetAntipassbackSupported,
        required this.clientSuppliedTokenSupported,
        required this.defaultCredentialSuspensionDuration,
  });
}

@JsonSerializable()
class ServiceCapabilitiesExtension  {
  /// 
///                 A list of exemptions that the device supports. Supported exemptions starting with the
///                 prefix pt: are reserved to define ONVIF specific exemption types and these reserved
///                 exemption types shall all share "pt:<Name>" syntax.
///               
@JsonKey(name: 'SupportedExemptionType')
final String? supportedExemptionType;
  ServiceCapabilitiesExtension({
        this.supportedExemptionType,
  });
}

/// 
/// The CredentialInfo type represents the credential as a logical object. The structure contains
/// the basic information of a specific credential instance. The device shall provide the following
/// fields for each credential.
/// 

/// 
/// A Credential is a physical/tangible object, a piece of knowledge, or a facet of a person's
/// physical being, that enables an individual access to a given physical facility or computer-based
/// information system. A credential holds one or more credential identifiers. To gain access one or
/// more identifiers may be required.
/// 
class Credential {}
class CredentialExtension {}
/// A credential identifier is a card number, unique card information, PIN or
/// biometric information such as fingerprint, iris, vein, face recognition, that can be validated
/// in an access point.
/// 
@JsonSerializable()
class CredentialIdentifier  {
  /// Contains the details of the credential identifier type. Is of type
/// CredentialIdentifierType.
/// 
@JsonKey(name: 'Type')
final CredentialIdentifierType type;
  /// If set to true, this credential identifier is not considered for 
///               authentication. For example if the access point requests Card plus PIN, and the credential 
///               identifier of type PIN is exempted from authentication, then the access point will not prompt 
///               for the PIN.
///               
@JsonKey(name: 'ExemptedFromAuthentication')
final bool exemptedFromAuthentication;
  /// The value of the identifier in hexadecimal representation.
/// 
@JsonKey(name: 'Value')
final Uint8List value;
  CredentialIdentifier({
        required this.type,
        required this.exemptedFromAuthentication,
        required this.value,
  });
}

/// Specifies the name of credential identifier type and its format for the credential
/// value.
/// 
@JsonSerializable()
class CredentialIdentifierType  {
  /// The name of the credential identifier type, such as pt:Card, pt:PIN,
/// etc.
/// 
@JsonKey(name: 'Name')
final String name;
  /// Specifies the format of the credential value for the specified identifier
/// type name.
/// 
@JsonKey(name: 'FormatType')
final String formatType;
  CredentialIdentifierType({
        required this.name,
        required this.formatType,
  });
}

/// 
/// The association between a credential and an access profile.
/// 
@JsonSerializable()
class CredentialAccessProfile  {
  /// The reference token of the associated access profile.
@JsonKey(name: 'AccessProfileToken')
final ReferenceToken accessProfileToken;
  /// The start date/time of the validity for the association between the
/// credential and the access profile. If the ValiditySupportsTimeValue capability is set to
/// false, then only date is supported (time is ignored).
/// 
@JsonKey(name: 'ValidFrom')
final DateTime? validFrom;
  /// The end date/time of the validity for the association between the
/// credential and the access profile. If the ValiditySupportsTimeValue capability is set to
/// false, then only date is supported (time is ignored).
/// 
@JsonKey(name: 'ValidTo')
final DateTime? validTo;
  CredentialAccessProfile({
        required this.accessProfileToken,
        this.validFrom,
        this.validTo,
  });
}

/// 
/// The CredentialState structure contains information about the state of the credential and
/// optionally the reason of why the credential was disabled.
/// 
@JsonSerializable()
class CredentialState  {
  /// True if the credential is enabled or false if the credential is
/// disabled.
/// 
@JsonKey(name: 'Enabled')
final bool enabled;
  /// Predefined ONVIF reasons as mentioned in the section 5.4.2.7 
/// of credential service specification document. For any other reason, free
/// text can be used.
/// 
@JsonKey(name: 'Reason')
final String? reason;
  /// A structure indicating the anti-passback state. This field shall be
/// supported if the ResetAntipassbackSupported capability is set to true.
/// 
@JsonKey(name: 'AntipassbackState')
final AntipassbackState? antipassbackState;
  @JsonKey(name: 'Extension')
final CredentialStateExtension? extension_;
  CredentialState({
        required this.enabled,
        this.reason,
        this.antipassbackState,
        this.extension_,
  });
}

class CredentialStateExtension {}
/// 
/// A structure containing anti-passback related state information.
/// 
@JsonSerializable()
class AntipassbackState  {
  /// Indicates if anti-passback is violated for the credential.
/// 
@JsonKey(name: 'AntipassbackViolated')
final bool antipassbackViolated;
  AntipassbackState({
        required this.antipassbackViolated,
  });
}

/// Contains information about a format type.
@JsonSerializable()
class CredentialIdentifierFormatTypeInfo  {
  /// A format type supported by the device. A list of supported format types is
/// provided in [ISO 16484-5:2014-09 Annex P]. The BACnet type "CUSTOM" is not used in this
/// specification. Instead device manufacturers can define their own format types.
/// 
@JsonKey(name: 'FormatType')
final String formatType;
  /// User readable description of the credential identifier format type. It
/// shall be up to 1024 characters. For custom types, it is recommended to describe how the
/// octet string is encoded (following the structure in column Authentication Factor Value
/// Encoding of [ISO 16484-5:2014-09 Annex P]).
/// 
@JsonKey(name: 'Description')
final Description description;
  @JsonKey(name: 'Extension')
final CredentialIdentifierFormatTypeInfoExtension? extension_;
  CredentialIdentifierFormatTypeInfo({
        required this.formatType,
        required this.description,
        this.extension_,
  });
}

class CredentialIdentifierFormatTypeInfoExtension {}
/// Contains information about a format type.
@JsonSerializable()
class CredentialData  {
  /// A format type supported by the device. A list of supported format types is
/// provided in [ISO 16484-5:2014-09 Annex P]. The BACnet type "CUSTOM" is not used in this
/// specification. Instead device manufacturers can define their own format types.
/// 
@JsonKey(name: 'Credential')
final Credential credential;
  /// User readable description of the credential identifier format type. It
/// shall be up to 1024 characters. For custom types, it is recommended to describe how the
/// octet string is encoded (following the structure in column Authentication Factor Value
/// Encoding of [ISO 16484-5:2014-09 Annex P]).
/// 
@JsonKey(name: 'CredentialState')
final CredentialState credentialState;
  @JsonKey(name: 'Extension')
final CredentialDataExtension? extension_;
  CredentialData({
        required this.credential,
        required this.credentialState,
        this.extension_,
  });
}

class CredentialDataExtension {}
/// Contains information about a format type.
@JsonSerializable()
class FaultResponse  {
  /// A format type supported by the device. A list of supported format types is
/// provided in [ISO 16484-5:2014-09 Annex P]. The BACnet type "CUSTOM" is not used in this
/// specification. Instead device manufacturers can define their own format types.
/// 
@JsonKey(name: 'Token')
final ReferenceToken token;
  /// User readable description of the credential identifier format type. It
/// shall be up to 1024 characters. For custom types, it is recommended to describe how the
/// octet string is encoded (following the structure in column Authentication Factor Value
/// Encoding of [ISO 16484-5:2014-09 Annex P]).
/// 
@JsonKey(name: 'Fault')
final String fault;
  @JsonKey(name: 'Extension')
final FaultResponseExtension? extension_;
  FaultResponse({
        required this.token,
        required this.fault,
        this.extension_,
  });
}

class FaultResponseExtension {}
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capability response message contains the requested credential
/// service capabilities using a hierarchical XML capability structure.
/// 
@JsonKey(name: 'Capabilities')
final ServiceCapabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class GetSupportedFormatTypes  {
  /// Name of the credential identifier type
@JsonKey(name: 'CredentialIdentifierTypeName')
final String credentialIdentifierTypeName;
  GetSupportedFormatTypes({
        required this.credentialIdentifierTypeName,
  });
}

@JsonSerializable()
class GetSupportedFormatTypesResponse  {
  /// Identifier format type
@JsonKey(name: 'FormatTypeInfo')
final CredentialIdentifierFormatTypeInfo formatTypeInfo;
  GetSupportedFormatTypesResponse({
        required this.formatTypeInfo,
  });
}

@JsonSerializable()
class GetCredentialInfo  {
  /// Tokens of CredentialInfo items to get.
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetCredentialInfo({
        required this.token,
  });
}

@JsonSerializable()
class GetCredentialInfoResponse  {
  /// List of CredentialInfo items.
@JsonKey(name: 'CredentialInfo')
final CredentialInfo? credentialInfo;
  GetCredentialInfoResponse({
        this.credentialInfo,
  });
}

@JsonSerializable()
class GetCredentialInfoList  {
  /// Maximum number of entries to return. If not specified, less than one
/// or higher than what the device supports, the number of items is determined by the
/// device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// Start returning entries from this start reference. If not specified,
/// entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetCredentialInfoList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetCredentialInfoListResponse  {
  /// StartReference to use in next call to get the following items. If
/// absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of CredentialInfo items.
@JsonKey(name: 'CredentialInfo')
final CredentialInfo? credentialInfo;
  GetCredentialInfoListResponse({
        this.nextStartReference,
        this.credentialInfo,
  });
}

@JsonSerializable()
class GetCredentials  {
  /// Token of Credentials to get
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetCredentials({
        required this.token,
  });
}

@JsonSerializable()
class GetCredentialsResponse  {
  /// List of Credential items.
@JsonKey(name: 'Credential')
final Credential? credential;
  GetCredentialsResponse({
        this.credential,
  });
}

@JsonSerializable()
class GetCredentialList  {
  /// Maximum number of entries to return. If not specified, less than one
/// or higher than what the device supports, the number of items is determined by the
/// device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// Start returning entries from this start reference. If not specified,
/// entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetCredentialList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetCredentialListResponse  {
  /// StartReference to use in next call to get the following items. If
/// absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of Credential items.
@JsonKey(name: 'Credential')
final Credential? credential;
  GetCredentialListResponse({
        this.nextStartReference,
        this.credential,
  });
}

@JsonSerializable()
class CreateCredential  {
  /// The credential to create.
@JsonKey(name: 'Credential')
final Credential credential;
  /// The state of the credential.
@JsonKey(name: 'State')
final CredentialState state;
  CreateCredential({
        required this.credential,
        required this.state,
  });
}

@JsonSerializable()
class CreateCredentialResponse  {
  /// The token of the created credential
@JsonKey(name: 'Token')
final ReferenceToken token;
  CreateCredentialResponse({
        required this.token,
  });
}

@JsonSerializable()
class ModifyCredential  {
  /// Details of the credential.
@JsonKey(name: 'Credential')
final Credential credential;
  ModifyCredential({
        required this.credential,
  });
}

class ModifyCredentialResponse {}
@JsonSerializable()
class SetCredential  {
  /// Details of the credential.
@JsonKey(name: 'CredentialData')
final CredentialData credentialData;
  SetCredential({
        required this.credentialData,
  });
}

class SetCredentialResponse {}
@JsonSerializable()
class DeleteCredential  {
  /// The token of the credential to delete.
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteCredential({
        required this.token,
  });
}

class DeleteCredentialResponse {}
@JsonSerializable()
class GetCredentialState  {
  /// Token of Credential
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetCredentialState({
        required this.token,
  });
}

@JsonSerializable()
class GetCredentialStateResponse  {
  /// State of the credential.
@JsonKey(name: 'State')
final CredentialState state;
  GetCredentialStateResponse({
        required this.state,
  });
}

@JsonSerializable()
class EnableCredential  {
  /// The token of the credential
@JsonKey(name: 'Token')
final ReferenceToken token;
  /// Reason for enabling the credential.
@JsonKey(name: 'Reason')
final String? reason;
  EnableCredential({
        required this.token,
        this.reason,
  });
}

class EnableCredentialResponse {}
@JsonSerializable()
class DisableCredential  {
  /// Token of the Credential
@JsonKey(name: 'Token')
final ReferenceToken token;
  /// Reason for disabling the credential
@JsonKey(name: 'Reason')
final String? reason;
  DisableCredential({
        required this.token,
        this.reason,
  });
}

class DisableCredentialResponse {}
@JsonSerializable()
class ResetAntipassbackViolation  {
  /// Token of the Credential
@JsonKey(name: 'CredentialToken')
final ReferenceToken credentialToken;
  ResetAntipassbackViolation({
        required this.credentialToken,
  });
}

class ResetAntipassbackViolationResponse {}
@JsonSerializable()
class GetCredentialIdentifiers  {
  /// Token of the Credential
@JsonKey(name: 'CredentialToken')
final ReferenceToken credentialToken;
  GetCredentialIdentifiers({
        required this.credentialToken,
  });
}

@JsonSerializable()
class GetCredentialIdentifiersResponse  {
  /// Identifier of the credential
@JsonKey(name: 'CredentialIdentifier')
final CredentialIdentifier? credentialIdentifier;
  GetCredentialIdentifiersResponse({
        this.credentialIdentifier,
  });
}

@JsonSerializable()
class SetCredentialIdentifier  {
  /// Token of the Credential
@JsonKey(name: 'CredentialToken')
final ReferenceToken credentialToken;
  /// Identifier of the credential
@JsonKey(name: 'CredentialIdentifier')
final CredentialIdentifier credentialIdentifier;
  SetCredentialIdentifier({
        required this.credentialToken,
        required this.credentialIdentifier,
  });
}

class SetCredentialIdentifierResponse {}
@JsonSerializable()
class DeleteCredentialIdentifier  {
  /// Token of the Credential
@JsonKey(name: 'CredentialToken')
final ReferenceToken credentialToken;
  /// Identifier type name of a credential
@JsonKey(name: 'CredentialIdentifierTypeName')
final String credentialIdentifierTypeName;
  DeleteCredentialIdentifier({
        required this.credentialToken,
        required this.credentialIdentifierTypeName,
  });
}

class DeleteCredentialIdentifierResponse {}
@JsonSerializable()
class GetCredentialAccessProfiles  {
  /// Token of the Credential
@JsonKey(name: 'CredentialToken')
final ReferenceToken credentialToken;
  GetCredentialAccessProfiles({
        required this.credentialToken,
  });
}

@JsonSerializable()
class GetCredentialAccessProfilesResponse  {
  /// Access Profiles of the credential
@JsonKey(name: 'CredentialAccessProfile')
final CredentialAccessProfile? credentialAccessProfile;
  GetCredentialAccessProfilesResponse({
        this.credentialAccessProfile,
  });
}

@JsonSerializable()
class SetCredentialAccessProfiles  {
  /// Token of the Credential
@JsonKey(name: 'CredentialToken')
final ReferenceToken credentialToken;
  /// Access Profiles of the credential
@JsonKey(name: 'CredentialAccessProfile')
final CredentialAccessProfile credentialAccessProfile;
  SetCredentialAccessProfiles({
        required this.credentialToken,
        required this.credentialAccessProfile,
  });
}

class SetCredentialAccessProfilesResponse {}
@JsonSerializable()
class DeleteCredentialAccessProfiles  {
  /// Token of the Credential
@JsonKey(name: 'CredentialToken')
final ReferenceToken credentialToken;
  /// Tokens of Access Profiles
@JsonKey(name: 'AccessProfileToken')
final ReferenceToken accessProfileToken;
  DeleteCredentialAccessProfiles({
        required this.credentialToken,
        required this.accessProfileToken,
  });
}

class DeleteCredentialAccessProfilesResponse {}
