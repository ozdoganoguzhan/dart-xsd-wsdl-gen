/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

/// 
/// The service capabilities reflect optional functionality of a service.
/// The information is static and does not change during device operation.
/// The following capabilities are available:
/// 
@JsonSerializable()
class ServiceCapabilities  {
  /// 
/// The maximum number of entries returned by a single Get<Entity>List or
/// Get<Entity> request. The device shall never return more than this number
/// of entities in a single response.
/// 
@JsonKey(name: 'MaxLimit')
final PositiveInteger maxLimit;
  /// 
/// Indicates the maximum number of schedules the device supports.
/// The device shall support at least one schedule.
/// 
@JsonKey(name: 'MaxSchedules')
final PositiveInteger maxSchedules;
  /// 
/// Indicates the maximum number of time periods per day the device supports
/// in a schedule including special days schedule. The device shall support
/// at least one time period per day.
/// 
@JsonKey(name: 'MaxTimePeriodsPerDay')
final PositiveInteger maxTimePeriodsPerDay;
  /// 
/// Indicates the maximum number of special day group entities the device supports.
/// The device shall support at least one ‘SpecialDayGroup’ entity.
/// 
@JsonKey(name: 'MaxSpecialDayGroups')
final PositiveInteger maxSpecialDayGroups;
  /// 
/// Indicates the maximum number of days per ‘SpecialDayGroup’ entity the device
/// supports. The device shall support at least one day per ‘SpecialDayGroup’ entity.
/// 
@JsonKey(name: 'MaxDaysInSpecialDayGroup')
final PositiveInteger maxDaysInSpecialDayGroup;
  /// 
/// Indicates the maximum number of ‘SpecialDaysSchedule’ entities referred by a
/// schedule that the device supports.
/// 
@JsonKey(name: 'MaxSpecialDaysSchedules')
final PositiveInteger maxSpecialDaysSchedules;
  /// 
/// For schedules:
/// If this capability is supported, then all iCalendar recurrence types shall
/// be supported by the device. The device shall also support the start and end dates (or
/// iCalendar occurrence count) in recurring events (see iCalendar examples in section 3).
/// If this capability is not supported, then only the weekly iCalendar recurrence
/// type shall be supported. Non-recurring events and other recurring types are
/// not supported. The device shall only accept a start date with the year ‘1970’
/// (the month and day is needed to reflect the week day of the recurrence)
/// and will not accept an occurrence count (or iCalendar until date) in recurring events.
/// For special days (only applicable if SpecialDaysSupported is set to true):
/// If this capability is supported, then all iCalendar recurrence types shall
/// be supported by the device. The device shall also support the start and
/// end dates (or occurrence count) in recurring events.
/// If this capability is not supported, then only non-recurring special days are supported.
/// 
@JsonKey(name: 'ExtendedRecurrenceSupported')
final bool extendedRecurrenceSupported;
  /// 
/// If this capability is supported, then the device shall support special days.
/// 
@JsonKey(name: 'SpecialDaysSupported')
final bool specialDaysSupported;
  /// 
/// If this capability is set to true, the device shall implement the
/// GetScheduleState command, and shall notify subscribing clients whenever
/// schedules become active or inactive.
/// 
@JsonKey(name: 'StateReportingSupported')
final bool stateReportingSupported;
  /// 
/// Indicates that the client is allowed to supply the token when creating schedules and special day groups.
/// To enable the use of the commands SetSchedule and SetSpecialDayGroup, the value must be set to true.
/// 
@JsonKey(name: 'ClientSuppliedTokenSupported')
final bool clientSuppliedTokenSupported;
  ServiceCapabilities({
        required this.maxLimit,
        required this.maxSchedules,
        required this.maxTimePeriodsPerDay,
        required this.maxSpecialDayGroups,
        required this.maxDaysInSpecialDayGroup,
        required this.maxSpecialDaysSchedules,
        required this.extendedRecurrenceSupported,
        required this.specialDaysSupported,
        required this.stateReportingSupported,
        required this.clientSuppliedTokenSupported,
  });
}

/// 
/// The ScheduleInfo type represents the schedule as a physical object.
/// The structure contains information of a specific schedule instance.
/// 

/// 
/// The schedule structure shall include all properties of the ScheduleInfo structure
/// and also the standard events (iCalendar format) and a list of SpecialDaysSchedule instances.
/// 
class Schedule {}
class ScheduleExtension {}
/// 
/// A override schedule that defines alternate time periods for a group of special days.
/// 
@JsonSerializable()
class SpecialDaysSchedule  {
  /// 
/// Indicates the list of special days in a schedule.
/// 
@JsonKey(name: 'GroupToken')
final ReferenceToken groupToken;
  /// 
/// Indicates the alternate time periods for the list of special days
/// (overrides the regular schedule). For example, the regular schedule indicates
/// that it is active from 8AM to 5PM on Mondays. However, this particular
/// Monday is a special day, and the alternate time periods state that the
/// schedule is active from 9 AM to 11 AM and 1 PM to 4 PM.
/// If no time periods are defined, then no access is allowed.
/// Is of type TimePeriod.
/// 
@JsonKey(name: 'TimeRange')
final TimePeriod? timeRange;
  @JsonKey(name: 'Extension')
final SpecialDaysScheduleExtension? extension_;
  SpecialDaysSchedule({
        required this.groupToken,
        this.timeRange,
        this.extension_,
  });
}

class SpecialDaysScheduleExtension {}
/// 
/// The ScheduleState contains state information for a schedule.
/// 
@JsonSerializable()
class ScheduleState  {
  /// 
/// Indicates that the current time is within the boundaries of the schedule
/// or its special days schedules’ time periods. For example, if this
/// schedule is being used for triggering automatic recording on a video source,
/// the Active flag will be true when the schedule-based recording is supposed to record.
/// 
@JsonKey(name: 'Active')
final bool active;
  /// 
/// Indicates that the current time is within the boundaries of its special
/// days schedules’ time periods. For example, if this schedule is being used
/// for recording at a lower frame rate on a video source during special days,
/// the SpecialDay flag will be true. If special days are not supported by the device,
/// this field may be omitted and interpreted as false by the client.
/// 
@JsonKey(name: 'SpecialDay')
final bool? specialDay;
  @JsonKey(name: 'Extension')
final ScheduleStateExtension? extension_;
  ScheduleState({
        required this.active,
        this.specialDay,
        this.extension_,
  });
}

class ScheduleStateExtension {}
/// 
/// A time period defines a start and end time. For full day access, the
/// start time ="00:00:00" with no defined end time. For a time period with no
/// end time, the schedule runs until midnight. The end time must always be greater
/// than the start time, otherwise an InvalidArgVal error messages is generated by the device.
/// 
@JsonSerializable()
class TimePeriod  {
  /// 
/// Indicates the start time.
/// 
@JsonKey(name: 'From')
final time from;
  /// 
/// Indicates the end time. Is optional, if omitted, the period ends at midnight.
/// The end time is exclusive, meaning that that exact moment in time is not
/// part of the period. To determine if a moment in time (t) is part of a time period,
/// the formula StartTime ≤ t < EndTime is used.
/// 
@JsonKey(name: 'Until')
final time? until;
  @JsonKey(name: 'Extension')
final TimePeriodExtension? extension_;
  TimePeriod({
        required this.from,
        this.until,
        this.extension_,
  });
}

class TimePeriodExtension {}
/// 
/// The SpecialDayGroupInfo structure contains the basic information about the special days list.
/// 

/// 
/// The special day group structure shall include all properties of the SpecialDayGroupInfo
/// structure and also a set of special days. A special day group are days (or parts of days)
/// that require the regular schedule to be overridden with an alternate schedule.
/// For example holidays, half-days, working Sundays, etc.
/// 
class SpecialDayGroup {}
class SpecialDayGroupExtension {}
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// 
/// The capability response message contains the requested schedule service
/// capabilities using a hierarchical XML capability structure.
/// 
@JsonKey(name: 'Capabilities')
final ServiceCapabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class GetScheduleState  {
  /// 
/// Token of schedule instance to get ScheduleState.
/// 
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetScheduleState({
        required this.token,
  });
}

@JsonSerializable()
class GetScheduleStateResponse  {
  /// 
/// ScheduleState item.
/// 
@JsonKey(name: 'ScheduleState')
final ScheduleState scheduleState;
  GetScheduleStateResponse({
        required this.scheduleState,
  });
}

@JsonSerializable()
class GetScheduleInfo  {
  /// 
/// Tokens of ScheduleInfo items to get.
/// 
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetScheduleInfo({
        required this.token,
  });
}

@JsonSerializable()
class GetScheduleInfoResponse  {
  /// 
/// List of ScheduleInfo items.
/// 
@JsonKey(name: 'ScheduleInfo')
final ScheduleInfo? scheduleInfo;
  GetScheduleInfoResponse({
        this.scheduleInfo,
  });
}

@JsonSerializable()
class GetScheduleInfoList  {
  /// 
/// Maximum number of entries to return. If not specified, less than one
/// or higher than what the device supports, the number of items is
/// determined by the device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// 
/// Start returning entries from this start reference.
/// If not specified, entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetScheduleInfoList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetScheduleInfoListResponse  {
  /// 
/// StartReference to use in next call to get the following items.
/// If absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// 
/// List of ScheduleInfo items.
/// 
@JsonKey(name: 'ScheduleInfo')
final ScheduleInfo? scheduleInfo;
  GetScheduleInfoListResponse({
        this.nextStartReference,
        this.scheduleInfo,
  });
}

@JsonSerializable()
class GetSchedules  {
  /// Tokens of Schedule items to get
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetSchedules({
        required this.token,
  });
}

@JsonSerializable()
class GetSchedulesResponse  {
  /// List of schedule items.
@JsonKey(name: 'Schedule')
final Schedule? schedule;
  GetSchedulesResponse({
        this.schedule,
  });
}

@JsonSerializable()
class GetScheduleList  {
  /// 
/// Maximum number of entries to return.
/// If not specified, less than one or higher than what the device supports,
/// the number of items is determined by the device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// 
/// Start returning entries from this start reference.
/// If not specified, entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetScheduleList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetScheduleListResponse  {
  /// 
/// StartReference to use in next call to get the following items.
/// If absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of Schedule items.
@JsonKey(name: 'Schedule')
final Schedule? schedule;
  GetScheduleListResponse({
        this.nextStartReference,
        this.schedule,
  });
}

@JsonSerializable()
class CreateSchedule  {
  /// The Schedule to create
@JsonKey(name: 'Schedule')
final Schedule schedule;
  CreateSchedule({
        required this.schedule,
  });
}

@JsonSerializable()
class CreateScheduleResponse  {
  /// The token of created Schedule
@JsonKey(name: 'Token')
final ReferenceToken token;
  CreateScheduleResponse({
        required this.token,
  });
}

@JsonSerializable()
class SetSchedule  {
  /// The Schedule to modify/create
@JsonKey(name: 'Schedule')
final Schedule schedule;
  SetSchedule({
        required this.schedule,
  });
}

class SetScheduleResponse {}
@JsonSerializable()
class ModifySchedule  {
  /// The Schedule to modify/update
@JsonKey(name: 'Schedule')
final Schedule schedule;
  ModifySchedule({
        required this.schedule,
  });
}

class ModifyScheduleResponse {}
@JsonSerializable()
class DeleteSchedule  {
  /// The token of the schedule to delete.
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteSchedule({
        required this.token,
  });
}

class DeleteScheduleResponse {}
@JsonSerializable()
class GetSpecialDayGroupInfo  {
  /// Tokens of SpecialDayGroupInfo items to get.
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetSpecialDayGroupInfo({
        required this.token,
  });
}

@JsonSerializable()
class GetSpecialDayGroupInfoResponse  {
  /// List of SpecialDayGroupInfo items.
@JsonKey(name: 'SpecialDayGroupInfo')
final SpecialDayGroupInfo? specialDayGroupInfo;
  GetSpecialDayGroupInfoResponse({
        this.specialDayGroupInfo,
  });
}

@JsonSerializable()
class GetSpecialDayGroupInfoList  {
  /// 
/// Maximum number of entries to return. If not specified, less than
/// one or higher than what the device supports, the number
/// of items is determined by the device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// 
/// Start returning entries from this start reference.
/// If not specified, entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetSpecialDayGroupInfoList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetSpecialDayGroupInfoListResponse  {
  /// 
/// StartReference to use in next call to get the following items.
/// If absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of SpecialDayGroupInfo items.
@JsonKey(name: 'SpecialDayGroupInfo')
final SpecialDayGroupInfo? specialDayGroupInfo;
  GetSpecialDayGroupInfoListResponse({
        this.nextStartReference,
        this.specialDayGroupInfo,
  });
}

@JsonSerializable()
class GetSpecialDayGroups  {
  /// Tokens of the SpecialDayGroup items to get
@JsonKey(name: 'Token')
final ReferenceToken token;
  GetSpecialDayGroups({
        required this.token,
  });
}

@JsonSerializable()
class GetSpecialDayGroupsResponse  {
  /// List of SpecialDayGroup items.
@JsonKey(name: 'SpecialDayGroup')
final SpecialDayGroup? specialDayGroup;
  GetSpecialDayGroupsResponse({
        this.specialDayGroup,
  });
}

@JsonSerializable()
class GetSpecialDayGroupList  {
  /// 
/// Maximum number of entries to return. If not specified, less than
/// one or higher than what the device supports, the number of
/// items is determined by the device.
/// 
@JsonKey(name: 'Limit')
final int? limit;
  /// 
/// Start returning entries from this start reference.
/// If not specified, entries shall start from the beginning of the dataset.
/// 
@JsonKey(name: 'StartReference')
final String? startReference;
  GetSpecialDayGroupList({
        this.limit,
        this.startReference,
  });
}

@JsonSerializable()
class GetSpecialDayGroupListResponse  {
  /// StartReference to use in next call to get the following items. If
/// absent, no more items to get.
/// 
@JsonKey(name: 'NextStartReference')
final String? nextStartReference;
  /// List of SpecialDayGroup items.
@JsonKey(name: 'SpecialDayGroup')
final SpecialDayGroup? specialDayGroup;
  GetSpecialDayGroupListResponse({
        this.nextStartReference,
        this.specialDayGroup,
  });
}

@JsonSerializable()
class CreateSpecialDayGroup  {
  /// 
/// The special day group to create.
/// 
@JsonKey(name: 'SpecialDayGroup')
final SpecialDayGroup specialDayGroup;
  CreateSpecialDayGroup({
        required this.specialDayGroup,
  });
}

@JsonSerializable()
class CreateSpecialDayGroupResponse  {
  /// The token of created special day group.
@JsonKey(name: 'Token')
final ReferenceToken token;
  CreateSpecialDayGroupResponse({
        required this.token,
  });
}

@JsonSerializable()
class SetSpecialDayGroup  {
  /// The SpecialDayGroup to modify/create
@JsonKey(name: 'SpecialDayGroup')
final SpecialDayGroup specialDayGroup;
  SetSpecialDayGroup({
        required this.specialDayGroup,
  });
}

class SetSpecialDayGroupResponse {}
@JsonSerializable()
class ModifySpecialDayGroup  {
  /// 
/// The special day group to modify/update.
/// 
@JsonKey(name: 'SpecialDayGroup')
final SpecialDayGroup specialDayGroup;
  ModifySpecialDayGroup({
        required this.specialDayGroup,
  });
}

class ModifySpecialDayGroupResponse {}
@JsonSerializable()
class DeleteSpecialDayGroup  {
  /// 
/// The token of the special day group item to delete.
/// 
@JsonKey(name: 'Token')
final ReferenceToken token;
  DeleteSpecialDayGroup({
        required this.token,
  });
}

class DeleteSpecialDayGroupResponse {}
