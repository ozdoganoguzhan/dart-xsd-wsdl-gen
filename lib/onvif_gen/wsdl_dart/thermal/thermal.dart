/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';
enum Polarity {
  @JsonValue("WhiteHot")
  WhiteHot,
  @JsonValue("BlackHot")
  BlackHot,
}

/// Describes standard Color Palette types, used to facilitate Multi-language support and client display.
/// "Custom" Type shall be used when Color Palette Name does not match any of the types included in the standard classification.
/// 
enum ColorPaletteType {
  @JsonValue("Custom")
  Custom,
  @JsonValue("Grayscale")
  Grayscale,
  @JsonValue("BlackHot")
  BlackHot,
  @JsonValue("WhiteHot")
  WhiteHot,
  @JsonValue("Sepia")
  Sepia,
  @JsonValue("Red")
  Red,
  @JsonValue("Iron")
  Iron,
  @JsonValue("Rain")
  Rain,
  @JsonValue("Rainbow")
  Rainbow,
  @JsonValue("Isotherm")
  Isotherm,
}

/// Describes a Color Palette element.
@JsonSerializable()
class ColorPalette  {
  /// 
/// User readable Color Palette name.
/// 
@JsonKey(name: 'Name')
final String name;
  /// Unique identifier of this Color Palette.
@JsonKey(name: 'token')
final ReferenceToken token;
  /// Indicates Color Palette Type. Use tth:ColorPaletteType. 
/// Used for multi-language support and display.
@JsonKey(name: 'Type')
final String type;
  ColorPalette({
        required this.name,
        required this.token,
        required this.type,
  });
}

/// Type describing a NUC Table element.
@JsonSerializable()
class NUCTable  {
  /// 
/// User reabable name for the Non-Uniformity Correction (NUC) Table.
/// 
@JsonKey(name: 'Name')
final String name;
  /// Unique identifier of this NUC Table.
@JsonKey(name: 'token')
final ReferenceToken token;
  /// Low Temperature limit for application of NUC Table, in Kelvin.
@JsonKey(name: 'LowTemperature')
final double lowTemperature;
  /// High Temperature limit for application of NUC Table, in Kelvin.
@JsonKey(name: 'HighTemperature')
final double highTemperature;
  NUCTable({
        required this.name,
        required this.token,
        required this.lowTemperature,
        required this.highTemperature,
  });
}

/// Type describing the Cooler settings.
@JsonSerializable()
class Cooler  {
  /// 
/// Indicates whether the Cooler is enabled (running) or not.
/// 
@JsonKey(name: 'Enabled')
final bool enabled;
  /// 
/// Number of hours the Cooler has been running (unit: hours). Read-only.
/// 
@JsonKey(name: 'RunTime')
final double? runTime;
  Cooler({
        required this.enabled,
        this.runTime,
  });
}

/// Describes valid ranges for the thermal device cooler settings. 
/// Only applicable to cooled thermal devices. 
@JsonSerializable()
class CoolerOptions  {
  /// 
/// Indicates the Device allows cooler status to be changed from running (Enabled) to stopped (Disabled), and viceversa.
/// 
@JsonKey(name: 'Enabled')
final bool? enabled;
  CoolerOptions({
        this.enabled,
  });
}

/// 
/// Holds default values that will be used in measurement modules when local parameters are not specified for the module (these are still required for valid temperature calculations). 
/// Having ReflectedAmbientTemperature, Emissivity and DistanceToObject as mandatory ensures minimum parameters are available to obtain valid temperature values.
/// 
@JsonSerializable()
class RadiometryGlobalParameters  {
  /// 
/// Reflected Ambient Temperature for the environment in which the thermal device and the object being measured is located.
/// 
@JsonKey(name: 'ReflectedAmbientTemperature')
final double reflectedAmbientTemperature;
  /// 
/// Emissivity of the surface of the object on which temperature is being measured.
/// 
@JsonKey(name: 'Emissivity')
final double emissivity;
  /// 
/// Distance from the thermal device to the measured object.
/// 
@JsonKey(name: 'DistanceToObject')
final double distanceToObject;
  /// 
/// Relative Humidity in the environment in which the measurement is located.
/// 
@JsonKey(name: 'RelativeHumidity')
final double? relativeHumidity;
  /// 
/// Temperature of the atmosphere between the thermal device and the object being measured.
/// 
@JsonKey(name: 'AtmosphericTemperature')
final double? atmosphericTemperature;
  /// 
/// Transmittance value for the atmosphere between the thermal device and the object being measured.
/// 
@JsonKey(name: 'AtmosphericTransmittance')
final double? atmosphericTransmittance;
  /// 
/// Temperature of the optics elements between the thermal device and the object being measured.
/// 
@JsonKey(name: 'ExtOpticsTemperature')
final double? extOpticsTemperature;
  /// 
/// Transmittance value for the optics elements between the thermal device and the object being measured.
/// 
@JsonKey(name: 'ExtOpticsTransmittance')
final double? extOpticsTransmittance;
  RadiometryGlobalParameters({
        required this.reflectedAmbientTemperature,
        required this.emissivity,
        required this.distanceToObject,
        this.relativeHumidity,
        this.atmosphericTemperature,
        this.atmosphericTransmittance,
        this.extOpticsTemperature,
        this.extOpticsTransmittance,
  });
}

/// 
/// Describes valid ranges for the different radiometry parameters required for accurate temperature calculation. 
/// 
@JsonSerializable()
class RadiometryGlobalParameterOptions  {
  /// Valid range of temperature values, in Kelvin.
@JsonKey(name: 'ReflectedAmbientTemperature')
final FloatRange reflectedAmbientTemperature;
  /// Valid range of emissivity values for the objects to measure.
@JsonKey(name: 'Emissivity')
final FloatRange emissivity;
  /// Valid range of distance between camera and object for a valid temperature reading, in meters.
@JsonKey(name: 'DistanceToObject')
final FloatRange distanceToObject;
  /// Valid range of relative humidity values, in percentage.
@JsonKey(name: 'RelativeHumidity')
final FloatRange? relativeHumidity;
  /// Valid range of temperature values, in Kelvin.
@JsonKey(name: 'AtmosphericTemperature')
final FloatRange? atmosphericTemperature;
  /// Valid range of atmospheric transmittance values.
@JsonKey(name: 'AtmosphericTransmittance')
final FloatRange? atmosphericTransmittance;
  /// Valid range of temperature values, in Kelvin.
@JsonKey(name: 'ExtOpticsTemperature')
final FloatRange? extOpticsTemperature;
  /// Valid range of external optics transmittance.
@JsonKey(name: 'ExtOpticsTransmittance')
final FloatRange? extOpticsTransmittance;
  RadiometryGlobalParameterOptions({
        required this.reflectedAmbientTemperature,
        required this.emissivity,
        required this.distanceToObject,
        this.relativeHumidity,
        this.atmosphericTemperature,
        this.atmosphericTransmittance,
        this.extOpticsTemperature,
        this.extOpticsTransmittance,
  });
}

@JsonSerializable()
class Configuration  {
  /// 
/// Current Color Palette in use by the Thermal Device.
/// 
@JsonKey(name: 'ColorPalette')
final ColorPalette colorPalette;
  /// 
/// Polarity configuration of the Thermal Device.
/// 
@JsonKey(name: 'Polarity')
final Polarity polarity;
  /// 
/// Current Non-Uniformity Correction (NUC) Table in use by the Thermal Device.
/// 
@JsonKey(name: 'NUCTable')
final NUCTable? nUCTable;
  /// 
/// Cooler settings of the Thermal Device.
/// 
@JsonKey(name: 'Cooler')
final Cooler? cooler;
  Configuration({
        required this.colorPalette,
        required this.polarity,
        this.nUCTable,
        this.cooler,
  });
}

@JsonSerializable()
class Configurations  {
  /// 
///  Current Thermal Settings for the VideoSource.
/// 
@JsonKey(name: 'Configuration')
final Configuration configuration;
  /// 
/// Reference token to the thermal VideoSource.
/// 
@JsonKey(name: 'token')
final ReferenceToken token;
  Configurations({
        required this.configuration,
        required this.token,
  });
}

@JsonSerializable()
class RadiometryConfiguration  {
  /// 
/// Global Parameters for Radiometry Measurements. Shall exist if Radiometry Capability is reported, 
/// and Global Parameters are supported by the device.
/// 
@JsonKey(name: 'RadiometryGlobalParameters')
final RadiometryGlobalParameters? radiometryGlobalParameters;
  RadiometryConfiguration({
        this.radiometryGlobalParameters,
  });
}

@JsonSerializable()
class ConfigurationOptions  {
  /// 
/// List of Color Palettes available for the requested Thermal VideoSource.
/// 
@JsonKey(name: 'ColorPalette')
final ColorPalette colorPalette;
  /// 
/// List of Non-Uniformity Correction (NUC) Tables available for the requested Thermal VideoSource.
/// 
@JsonKey(name: 'NUCTable')
final NUCTable? nUCTable;
  /// 
/// Specifies Cooler Options for cooled thermal devices.
/// 
@JsonKey(name: 'CoolerOptions')
final CoolerOptions? coolerOptions;
  ConfigurationOptions({
        required this.colorPalette,
        this.nUCTable,
        this.coolerOptions,
  });
}

@JsonSerializable()
class RadiometryConfigurationOptions  {
  /// 
/// Specifies valid ranges and options for the global radiometry parameters used as default parameter values
/// for temperature measurement modules (spots and boxes).
/// 
@JsonKey(name: 'RadiometryGlobalParameterOptions')
final RadiometryGlobalParameterOptions? radiometryGlobalParameterOptions;
  RadiometryConfigurationOptions({
        this.radiometryGlobalParameterOptions,
  });
}

class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capabilities of the thermal service are returned in the Capabilities element.
@JsonKey(name: 'Capabilities')
final Capabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class Capabilities  {
  /// Indicates whether or not radiometric thermal measurements are supported by the thermal device.
@JsonKey(name: 'Radiometry')
final bool radiometry;
  Capabilities({
        required this.radiometry,
  });
}

@JsonSerializable()
class GetConfigurationOptions  {
  /// 
/// Reference token to the VideoSource for which the Thermal Configuration Options are requested.
/// 
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  GetConfigurationOptions({
        required this.videoSourceToken,
  });
}

@JsonSerializable()
class GetConfigurationOptionsResponse  {
  /// 
/// Valid ranges for the Thermal configuration parameters that are categorized as device specific.
/// 
@JsonKey(name: 'ConfigurationOptions')
final ConfigurationOptions configurationOptions;
  GetConfigurationOptionsResponse({
        required this.configurationOptions,
  });
}

@JsonSerializable()
class GetConfiguration  {
  /// 
/// Reference token to the VideoSource for which the Thermal Settings are requested.
/// 
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  GetConfiguration({
        required this.videoSourceToken,
  });
}

@JsonSerializable()
class GetConfigurationResponse  {
  /// 
/// Thermal Settings for the VideoSource that was requested.
/// 
@JsonKey(name: 'Configuration')
final Configuration configuration;
  GetConfigurationResponse({
        required this.configuration,
  });
}

class GetConfigurations {}
@JsonSerializable()
class GetConfigurationsResponse  {
  /// 
/// This element contains a list of thermal VideoSource configurations.
/// 
@JsonKey(name: 'Configurations')
final Configurations? configurations;
  GetConfigurationsResponse({
        this.configurations,
  });
}

@JsonSerializable()
class SetConfiguration  {
  /// 
/// Reference token to the VideoSource for which the Thermal Settings are configured.
/// 
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  /// 
/// Thermal Settings to be configured.
/// 
@JsonKey(name: 'Configuration')
final Configuration configuration;
  SetConfiguration({
        required this.videoSourceToken,
        required this.configuration,
  });
}

class SetConfigurationResponse {}
@JsonSerializable()
class GetRadiometryConfigurationOptions  {
  /// 
/// Reference token to the VideoSource for which the Thermal Radiometry Options are requested.
/// 
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  GetRadiometryConfigurationOptions({
        required this.videoSourceToken,
  });
}

@JsonSerializable()
class GetRadiometryConfigurationOptionsResponse  {
  /// 
/// Valid ranges for the Thermal Radiometry parameters that are categorized as device specific.
/// 
@JsonKey(name: 'ConfigurationOptions')
final RadiometryConfigurationOptions configurationOptions;
  GetRadiometryConfigurationOptionsResponse({
        required this.configurationOptions,
  });
}

@JsonSerializable()
class GetRadiometryConfiguration  {
  /// 
/// Reference token to the VideoSource for which the Radiometry Configuration is requested.
/// 
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  GetRadiometryConfiguration({
        required this.videoSourceToken,
  });
}

@JsonSerializable()
class GetRadiometryConfigurationResponse  {
  /// 
/// Radiometry Configuration for the VideoSource that was requested.
/// 
@JsonKey(name: 'Configuration')
final RadiometryConfiguration configuration;
  GetRadiometryConfigurationResponse({
        required this.configuration,
  });
}

@JsonSerializable()
class SetRadiometryConfiguration  {
  /// 
/// Reference token to the VideoSource for which the Radiometry settings are configured.
/// 
@JsonKey(name: 'VideoSourceToken')
final ReferenceToken videoSourceToken;
  /// 
/// Radiometry settings to be configured.
/// 
@JsonKey(name: 'Configuration')
final RadiometryConfiguration configuration;
  SetRadiometryConfiguration({
        required this.videoSourceToken,
        required this.configuration,
  });
}

class SetRadiometryConfigurationResponse {}
