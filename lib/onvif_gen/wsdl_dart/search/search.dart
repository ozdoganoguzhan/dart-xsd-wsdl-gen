/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

import 'package:dart_wsdl_gen/onvif_gen/xsd_dart/lib.dart';
class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capabilities for the search service is returned in the Capabilities element.
@JsonKey(name: 'Capabilities')
final Capabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class Capabilities  {
  @JsonKey(name: 'MetadataSearch')
final bool metadataSearch;
  ///  Indicates support for general virtual property events in the FindEvents method.
@JsonKey(name: 'GeneralStartEvents')
final bool generalStartEvents;
  Capabilities({
        required this.metadataSearch,
        required this.generalStartEvents,
  });
}

class GetRecordingSummary {}
@JsonSerializable()
class GetRecordingSummaryResponse  {
  @JsonKey(name: 'Summary')
final RecordingSummary summary;
  GetRecordingSummaryResponse({
        required this.summary,
  });
}

@JsonSerializable()
class GetRecordingInformation  {
  @JsonKey(name: 'RecordingToken')
final RecordingReference recordingToken;
  GetRecordingInformation({
        required this.recordingToken,
  });
}

@JsonSerializable()
class GetRecordingInformationResponse  {
  @JsonKey(name: 'RecordingInformation')
final RecordingInformation recordingInformation;
  GetRecordingInformationResponse({
        required this.recordingInformation,
  });
}

@JsonSerializable()
class GetMediaAttributes  {
  @JsonKey(name: 'RecordingTokens')
final RecordingReference? recordingTokens;
  @JsonKey(name: 'Time')
final DateTime time;
  GetMediaAttributes({
        this.recordingTokens,
        required this.time,
  });
}

@JsonSerializable()
class GetMediaAttributesResponse  {
  @JsonKey(name: 'MediaAttributes')
final MediaAttributes? mediaAttributes;
  GetMediaAttributesResponse({
        this.mediaAttributes,
  });
}

@JsonSerializable()
class FindRecordings  {
  /// Scope defines the dataset to consider for this search.
@JsonKey(name: 'Scope')
final SearchScope scope;
  /// The search will be completed after this many matches. If not specified, the search will continue until reaching the endpoint or until the session expires.
@JsonKey(name: 'MaxMatches')
final int? maxMatches;
  /// The time the search session will be kept alive after responding to this and subsequent requests. A device shall support at least values up to ten seconds.
@JsonKey(name: 'KeepAliveTime')
final Duration keepAliveTime;
  FindRecordings({
        required this.scope,
        this.maxMatches,
        required this.keepAliveTime,
  });
}

@JsonSerializable()
class FindRecordingsResponse  {
  @JsonKey(name: 'SearchToken')
final JobToken searchToken;
  FindRecordingsResponse({
        required this.searchToken,
  });
}

/// Gets results from a particular recording listingession.
@JsonSerializable()
class GetRecordingSearchResults  {
  /// The search session to get results from.
@JsonKey(name: 'SearchToken')
final JobToken searchToken;
  /// The minimum number of results to return in one response.
@JsonKey(name: 'MinResults')
final int? minResults;
  /// The maximum number of results to return in one response.
@JsonKey(name: 'MaxResults')
final int? maxResults;
  /// The maximum time before responding to the request, even if the MinResults parameter is not fulfilled.
@JsonKey(name: 'WaitTime')
final Duration? waitTime;
  GetRecordingSearchResults({
        required this.searchToken,
        this.minResults,
        this.maxResults,
        this.waitTime,
  });
}

@JsonSerializable()
class GetRecordingSearchResultsResponse  {
  @JsonKey(name: 'ResultList')
final FindRecordingResultList resultList;
  GetRecordingSearchResultsResponse({
        required this.resultList,
  });
}

/// Starts a search session and specifies the search parameters.
@JsonSerializable()
class FindEvents  {
  /// The point of time where the search will start.
@JsonKey(name: 'StartPoint')
final DateTime startPoint;
  /// The point of time where the search will stop. This can be a time before the StartPoint, in which case the search is performed backwards in time.
@JsonKey(name: 'EndPoint')
final DateTime? endPoint;
  @JsonKey(name: 'Scope')
final SearchScope scope;
  @JsonKey(name: 'SearchFilter')
final EventFilter searchFilter;
  /// Setting IncludeStartState to true means that the server should return virtual events representing the start state for any recording included in the scope. Start state events are limited to the topics defined in the SearchFilter that have the IsProperty flag set to true.
@JsonKey(name: 'IncludeStartState')
final bool includeStartState;
  /// The search will be completed after this many matches. If not specified, the search will continue until reaching the endpoint or until the session expires.
@JsonKey(name: 'MaxMatches')
final int? maxMatches;
  /// The time the search session will be kept alive after responding to this and subsequent requests. A device shall support at least values up to ten seconds.
@JsonKey(name: 'KeepAliveTime')
final Duration keepAliveTime;
  FindEvents({
        required this.startPoint,
        this.endPoint,
        required this.scope,
        required this.searchFilter,
        required this.includeStartState,
        this.maxMatches,
        required this.keepAliveTime,
  });
}

@JsonSerializable()
class FindEventsResponse  {
  /// A unique reference to the search session created by this request.
@JsonKey(name: 'SearchToken')
final JobToken searchToken;
  FindEventsResponse({
        required this.searchToken,
  });
}

/// Gets results from a particular search session.
@JsonSerializable()
class GetEventSearchResults  {
  /// The search session to get results from.
@JsonKey(name: 'SearchToken')
final JobToken searchToken;
  /// The minimum number of results to return in one response.
@JsonKey(name: 'MinResults')
final int? minResults;
  /// The maximum number of results to return in one response.
@JsonKey(name: 'MaxResults')
final int? maxResults;
  /// The maximum time before responding to the request, even if the MinResults parameter is not fulfilled.
@JsonKey(name: 'WaitTime')
final Duration? waitTime;
  GetEventSearchResults({
        required this.searchToken,
        this.minResults,
        this.maxResults,
        this.waitTime,
  });
}

@JsonSerializable()
class GetEventSearchResultsResponse  {
  @JsonKey(name: 'ResultList')
final FindEventResultList resultList;
  GetEventSearchResultsResponse({
        required this.resultList,
  });
}

/// Starts a search session and specifies the search parameters.
@JsonSerializable()
class FindPTZPosition  {
  /// The point of time where the search will start.
@JsonKey(name: 'StartPoint')
final DateTime startPoint;
  /// The point of time where the search will stop. This can be a time before the StartPoint, in which case the search is performed backwards in time.
@JsonKey(name: 'EndPoint')
final DateTime? endPoint;
  @JsonKey(name: 'Scope')
final SearchScope scope;
  @JsonKey(name: 'SearchFilter')
final PTZPositionFilter searchFilter;
  /// The search will be completed after this many matches. If not specified, the search will continue until reaching the endpoint or until the session expires.
@JsonKey(name: 'MaxMatches')
final int? maxMatches;
  /// The time the search session will be kept alive after responding to this and subsequent requests. A device shall support at least values up to ten seconds.
@JsonKey(name: 'KeepAliveTime')
final Duration keepAliveTime;
  FindPTZPosition({
        required this.startPoint,
        this.endPoint,
        required this.scope,
        required this.searchFilter,
        this.maxMatches,
        required this.keepAliveTime,
  });
}

@JsonSerializable()
class FindPTZPositionResponse  {
  /// A unique reference to the search session created by this request.
@JsonKey(name: 'SearchToken')
final JobToken searchToken;
  FindPTZPositionResponse({
        required this.searchToken,
  });
}

/// Gets results from a particular search session.
@JsonSerializable()
class GetPTZPositionSearchResults  {
  /// The search session to get results from.
@JsonKey(name: 'SearchToken')
final JobToken searchToken;
  /// The minimum number of results to return in one response.
@JsonKey(name: 'MinResults')
final int? minResults;
  /// The maximum number of results to return in one response.
@JsonKey(name: 'MaxResults')
final int? maxResults;
  /// The maximum time before responding to the request, even if the MinResults parameter is not fulfilled.
@JsonKey(name: 'WaitTime')
final Duration? waitTime;
  GetPTZPositionSearchResults({
        required this.searchToken,
        this.minResults,
        this.maxResults,
        this.waitTime,
  });
}

@JsonSerializable()
class GetPTZPositionSearchResultsResponse  {
  @JsonKey(name: 'ResultList')
final FindPTZPositionResultList resultList;
  GetPTZPositionSearchResultsResponse({
        required this.resultList,
  });
}

/// Starts a search session and specifies the search parameters.
@JsonSerializable()
class FindMetadata  {
  /// The point of time where the search will start.
@JsonKey(name: 'StartPoint')
final DateTime startPoint;
  /// The point of time where the search will stop. This can be a time before the StartPoint, in which case the search is performed backwards in time.
@JsonKey(name: 'EndPoint')
final DateTime? endPoint;
  @JsonKey(name: 'Scope')
final SearchScope scope;
  @JsonKey(name: 'MetadataFilter')
final MetadataFilter metadataFilter;
  /// The search will be completed after this many matches. If not specified, the search will continue until reaching the endpoint or until the session expires.
@JsonKey(name: 'MaxMatches')
final int? maxMatches;
  /// The time the search session will be kept alive after responding to this and subsequent requests. A device shall support at least values up to ten seconds.
@JsonKey(name: 'KeepAliveTime')
final Duration keepAliveTime;
  FindMetadata({
        required this.startPoint,
        this.endPoint,
        required this.scope,
        required this.metadataFilter,
        this.maxMatches,
        required this.keepAliveTime,
  });
}

@JsonSerializable()
class FindMetadataResponse  {
  /// A unique reference to the search session created by this request.
@JsonKey(name: 'SearchToken')
final JobToken searchToken;
  FindMetadataResponse({
        required this.searchToken,
  });
}

/// Gets results from a particular search session.
@JsonSerializable()
class GetMetadataSearchResults  {
  /// The search session to get results from.
@JsonKey(name: 'SearchToken')
final JobToken searchToken;
  /// The minimum number of results to return in one response.
@JsonKey(name: 'MinResults')
final int? minResults;
  /// The maximum number of results to return in one response.
@JsonKey(name: 'MaxResults')
final int? maxResults;
  /// The maximum time before responding to the request, even if the MinResults parameter is not fulfilled.
@JsonKey(name: 'WaitTime')
final Duration? waitTime;
  GetMetadataSearchResults({
        required this.searchToken,
        this.minResults,
        this.maxResults,
        this.waitTime,
  });
}

@JsonSerializable()
class GetMetadataSearchResultsResponse  {
  @JsonKey(name: 'ResultList')
final FindMetadataResultList resultList;
  GetMetadataSearchResultsResponse({
        required this.resultList,
  });
}

/// Returns the state of an ongoing search session.
@JsonSerializable()
class GetSearchState  {
  /// The search session to get the state from.
@JsonKey(name: 'SearchToken')
final JobToken searchToken;
  GetSearchState({
        required this.searchToken,
  });
}

@JsonSerializable()
class GetSearchStateResponse  {
  @JsonKey(name: 'State')
final SearchState state;
  GetSearchStateResponse({
        required this.state,
  });
}

/// Ends an ongoing search session, freeing any resources.
@JsonSerializable()
class EndSearch  {
  /// The search session to end.
@JsonKey(name: 'SearchToken')
final JobToken searchToken;
  EndSearch({
        required this.searchToken,
  });
}

@JsonSerializable()
class EndSearchResponse  {
  /// The point of time the search had reached when it was ended. It is equal to the EndPoint specified in Find-operation if the search was completed.
@JsonKey(name: 'Endpoint')
final DateTime endpoint;
  EndSearchResponse({
        required this.endpoint,
  });
}

