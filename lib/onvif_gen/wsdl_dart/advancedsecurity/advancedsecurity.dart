/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

/// Unique identifier for keys in the keystore.
@JsonSerializable()
class KeyID  {
  @JsonKey(name: 'val')
final String val;
  KeyID({
        required this.val,
  });
}

/// Unique identifier for certificates in the keystore.
@JsonSerializable()
class CertificateID  {
  @JsonKey(name: 'val')
final String val;
  CertificateID({
        required this.val,
  });
}

/// Unique identifier for certification paths in the keystore.
@JsonSerializable()
class CertificationPathID  {
  @JsonKey(name: 'val')
final String val;
  CertificationPathID({
        required this.val,
  });
}

/// Unique identifier for passphrases in the keystore.
@JsonSerializable()
class PassphraseID  {
  @JsonKey(name: 'val')
final String val;
  PassphraseID({
        required this.val,
  });
}

/// Unique identifier for 802.1X configurations in the keystore.
@JsonSerializable()
class Dot1XID  {
  @JsonKey(name: 'val')
final String val;
  Dot1XID({
        required this.val,
  });
}

/// The status of a key in the keystore.
enum KeyStatus {
  @JsonValue("ok")
  ok,
  @JsonValue("generating")
  generating,
  @JsonValue("corrupt")
  corrupt,
}

/// An object identifier (OID) in dot-decimal form as specified in RFC4512.
@JsonSerializable()
class DotDecimalOID  {
  @JsonKey(name: 'val')
final String val;
  DotDecimalOID({
        required this.val,
  });
}

/// The distinguished name attribute type encoded as specified in RFC 4514.
@JsonSerializable()
class DNAttributeType  {
  @JsonKey(name: 'val')
final String val;
  DNAttributeType({
        required this.val,
  });
}

@JsonSerializable()
class DNAttributeValue  {
  @JsonKey(name: 'val')
final String val;
  DNAttributeValue({
        required this.val,
  });
}

/// The attributes of a key in the keystore.
@JsonSerializable()
class KeyAttribute  {
  /// The ID of the key.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  /// The client-defined alias of the key.
@JsonKey(name: 'Alias')
final String? alias;
  /// Absent if the key is not a key pair. True if and only if the key is a key pair and contains a private key. False if and only if the key is a key pair and does not contain a private key.
@JsonKey(name: 'hasPrivateKey')
final bool? hasPrivateKey;
  /// The status of the key. The value should be one of the values in the tas:KeyStatus enumeration.
@JsonKey(name: 'KeyStatus')
final String keyStatus;
  /// True if and only if the key was generated outside the device.
@JsonKey(name: 'externallyGenerated')
final bool? externallyGenerated;
  /// True if and only if the key is stored in a specially protected hardware component inside the device.
@JsonKey(name: 'securelyStored')
final bool? securelyStored;
  KeyAttribute({
        required this.keyID,
        this.alias,
        this.hasPrivateKey,
        required this.keyStatus,
        this.externallyGenerated,
        this.securelyStored,
  });
}

/// A distinguished name attribute type and value pair.
@JsonSerializable()
class DNAttributeTypeAndValue  {
  /// The attribute type.
@JsonKey(name: 'Type')
final DNAttributeType type;
  /// The value of the attribute.
@JsonKey(name: 'Value')
final DNAttributeValue value;
  DNAttributeTypeAndValue({
        required this.type,
        required this.value,
  });
}

/// A multi-valued RDN
@JsonSerializable()
class MultiValuedRDN  {
  /// A list of types and values defining a multi-valued RDN
@JsonKey(name: 'Attribute')
final DNAttributeTypeAndValue? attribute;
  MultiValuedRDN({
        this.attribute,
  });
}

@JsonSerializable()
class DistinguishedName  {
  /// A country name as specified in
/// X.500.
@JsonKey(name: 'Country')
final DNAttributeValue? country;
  /// An organization name as specified in
/// X.500.
@JsonKey(name: 'Organization')
final DNAttributeValue? organization;
  /// An organizational unit name as specified in
/// X.500.
@JsonKey(name: 'OrganizationalUnit')
final DNAttributeValue? organizationalUnit;
  /// A distinguished name qualifier as specified in
/// X.500.
@JsonKey(name: 'DistinguishedNameQualifier')
final DNAttributeValue? distinguishedNameQualifier;
  /// A state or province name as specified in
/// X.500.
@JsonKey(name: 'StateOrProvinceName')
final DNAttributeValue? stateOrProvinceName;
  /// A common name as specified in
/// X.500.
@JsonKey(name: 'CommonName')
final DNAttributeValue? commonName;
  /// A serial number as specified in
/// X.500.
@JsonKey(name: 'SerialNumber')
final DNAttributeValue? serialNumber;
  /// A locality as specified in X.500.
@JsonKey(name: 'Locality')
final DNAttributeValue? locality;
  /// A title as specified in X.500.
@JsonKey(name: 'Title')
final DNAttributeValue? title;
  /// A surname as specified in X.500.
@JsonKey(name: 'Surname')
final DNAttributeValue? surname;
  /// A given name as specified in X.500.
@JsonKey(name: 'GivenName')
final DNAttributeValue? givenName;
  /// Initials as specified in X.500.
@JsonKey(name: 'Initials')
final DNAttributeValue? initials;
  /// A pseudonym as specified in X.500.
@JsonKey(name: 'Pseudonym')
final DNAttributeValue? pseudonym;
  /// A generation qualifier as specified in
/// X.500.
@JsonKey(name: 'GenerationQualifier')
final DNAttributeValue? generationQualifier;
  /// A generic type-value pair
/// attribute.
@JsonKey(name: 'GenericAttribute')
final DNAttributeTypeAndValue? genericAttribute;
  /// A multi-valued RDN
@JsonKey(name: 'MultiValuedRDN')
final MultiValuedRDN? multiValuedRDN;
  DistinguishedName({
        this.country,
        this.organization,
        this.organizationalUnit,
        this.distinguishedNameQualifier,
        this.stateOrProvinceName,
        this.commonName,
        this.serialNumber,
        this.locality,
        this.title,
        this.surname,
        this.givenName,
        this.initials,
        this.pseudonym,
        this.generationQualifier,
        this.genericAttribute,
        this.multiValuedRDN,
  });
}

/// An identifier of an algorithm.
@JsonSerializable()
class AlgorithmIdentifier  {
  /// The OID of the algorithm in dot-decimal form.
@JsonKey(name: 'algorithm')
final DotDecimalOID algorithm;
  /// Optional parameters of the algorithm (depending on the algorithm).
@JsonKey(name: 'parameters')
final Base64DERencodedASN1Value? parameters;
  AlgorithmIdentifier({
        required this.algorithm,
        this.parameters,
  });
}

/// A CSR attribute as specified in RFC 2986.
@JsonSerializable()
class BasicRequestAttribute  {
  /// The OID of the attribute.
@JsonKey(name: 'OID')
final DotDecimalOID oID;
  /// The value of the attribute as a base64-encoded DER representation of an ASN.1 value.
@JsonKey(name: 'value')
final Base64DERencodedASN1Value value;
  BasicRequestAttribute({
        required this.oID,
        required this.value,
  });
}

/// A CSR attribute as specified in PKCS#10.
class CSRAttribute {}
/// A base64-encoded ASN.1 value.
@JsonSerializable()
class Base64DERencodedASN1Value  {
  @JsonKey(name: 'val')
final Uint8List val;
  Base64DERencodedASN1Value({
        required this.val,
  });
}

/// An X.509v3 extension field as specified in RFC 5280
@JsonSerializable()
class X509v3Extension  {
  /// The OID of the extension field.
@JsonKey(name: 'extnOID')
final DotDecimalOID extnOID;
  /// True if and only if the extension is critical.
@JsonKey(name: 'critical')
final bool critical;
  /// The value of the extension field as a base64-encoded DER representation of an ASN.1 value.
@JsonKey(name: 'extnValue')
final Base64DERencodedASN1Value extnValue;
  X509v3Extension({
        required this.extnOID,
        required this.critical,
        required this.extnValue,
  });
}

/// An X.509 cerficiate as specified in RFC 5280.
@JsonSerializable()
class X509Certificate  {
  /// The ID of the certificate.
@JsonKey(name: 'CertificateID')
final CertificateID certificateID;
  /// The ID of the key that this certificate associates to the certificate subject.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  /// The client-defined alias of the certificate.
@JsonKey(name: 'Alias')
final String? alias;
  /// The base64-encoded DER representation of the X.509 certificate.
@JsonKey(name: 'CertificateContent')
final Base64DERencodedASN1Value certificateContent;
  X509Certificate({
        required this.certificateID,
        required this.keyID,
        this.alias,
        required this.certificateContent,
  });
}

/// A sequence of certificate IDs.
@JsonSerializable()
class CertificateIDs  {
  /// A certificate ID.
@JsonKey(name: 'CertificateID')
final CertificateID certificateID;
  CertificateIDs({
        required this.certificateID,
  });
}

/// An X.509 certification path as defined in RFC 5280.
@JsonSerializable()
class CertificationPath  {
  /// A certificate in the certification path.
@JsonKey(name: 'CertificateID')
final CertificateID certificateID;
  /// The client-defined alias of the certification path.
@JsonKey(name: 'Alias')
final String? alias;
  CertificationPath({
        required this.certificateID,
        this.alias,
  });
}

@JsonSerializable()
class PassphraseAttribute  {
  /// The ID of the passphrase.
@JsonKey(name: 'PassphraseID')
final PassphraseID passphraseID;
  /// The alias of the passphrase.
@JsonKey(name: 'Alias')
final String? alias;
  PassphraseAttribute({
        required this.passphraseID,
        this.alias,
  });
}

/// A list of supported 802.1X authentication methods, such as "EAP-PEAP/MSCHAPv2" and "EAP-MD5".  The '/' character is used as a separator between the outer and inner methods.
typedef Dot1XMethods = List<String>;

/// The capabilities of the 802.1X implementation on a device.
@JsonSerializable()
class Dot1XCapabilities  {
  /// The maximum number of 802.1X configurations that may be defined simultaneously.
@JsonKey(name: 'MaximumNumberOfDot1XConfigurations')
final int maximumNumberOfDot1XConfigurations;
  /// The authentication methods supported by the 802.1X implementation.
@JsonKey(name: 'Dot1XMethods')
final Dot1XMethods dot1XMethods;
  Dot1XCapabilities({
        required this.maximumNumberOfDot1XConfigurations,
        required this.dot1XMethods,
  });
}

/// The configuration parameters required for a particular authentication method.
@JsonSerializable()
class Dot1XStage  {
  /// The identity used in this authentication method, if required.
@JsonKey(name: 'Identity')
final String? identity;
  /// The unique identifier of the certification path used in this authentication method, if required.
@JsonKey(name: 'CertificationPathID')
final CertificationPathID? certificationPathID;
  /// The identifier for the password used in this authentication method, if required.  If Identity is used as an anonymous identity for this authentication method, PassphraseID is ignored.
@JsonKey(name: 'PassphraseID')
final PassphraseID? passphraseID;
  /// The configuration of the next stage of authentication, if required.
@JsonKey(name: 'Inner')
final Dot1XStage? inner;
  @JsonKey(name: 'Extension')
final Dot1XStageExtension? extension_;
  /// The authentication method for this stage (e.g., "EAP-PEAP").
@JsonKey(name: 'Method')
final String method;
  Dot1XStage({
        this.identity,
        this.certificationPathID,
        this.passphraseID,
        this.inner,
        this.extension_,
        required this.method,
  });
}

class Dot1XStageExtension {}
@JsonSerializable()
class Dot1XConfiguration  {
  /// The unique identifier of the IEEE 802.1X configuration.
@JsonKey(name: 'Dot1XID')
final Dot1XID? dot1XID;
  /// The client-defined alias of the 802.1X configuration.
@JsonKey(name: 'Alias')
final String? alias;
  /// The outer level authentication method used in this 802.1X configuration.
@JsonKey(name: 'Outer')
final Dot1XStage outer;
  Dot1XConfiguration({
        this.dot1XID,
        this.alias,
        required this.outer,
  });
}

@JsonSerializable()
class CRLID  {
  @JsonKey(name: 'val')
final String val;
  CRLID({
        required this.val,
  });
}

@JsonSerializable()
class CertPathValidationPolicyID  {
  @JsonKey(name: 'val')
final String val;
  CertPathValidationPolicyID({
        required this.val,
  });
}

@JsonSerializable()
class CRL  {
  @JsonKey(name: 'CRLID')
final CRLID cRLID;
  @JsonKey(name: 'Alias')
final String alias;
  @JsonKey(name: 'CRLContent')
final Base64DERencodedASN1Value cRLContent;
  CRL({
        required this.cRLID,
        required this.alias,
        required this.cRLContent,
  });
}

@JsonSerializable()
class CertPathValidationParameters  {
  /// True if and only if the TLS server shall not authenticate client certificates that do not contain the TLS WWW client authentication key usage extension as specified in RFC 5280, Sect. 4.2.1.12.
@JsonKey(name: 'RequireTLSWWWClientAuthExtendedKeyUsage')
final bool? requireTLSWWWClientAuthExtendedKeyUsage;
  /// True if and only if delta CRLs, if available, shall be applied to CRLs.
@JsonKey(name: 'UseDeltaCRLs')
final bool? useDeltaCRLs;
  CertPathValidationParameters({
        this.requireTLSWWWClientAuthExtendedKeyUsage,
        this.useDeltaCRLs,
  });
}

@JsonSerializable()
class TrustAnchor  {
  /// The certificate ID of the certificate to be used as trust anchor.
@JsonKey(name: 'CertificateID')
final CertificateID certificateID;
  TrustAnchor({
        required this.certificateID,
  });
}

@JsonSerializable()
class CertPathValidationPolicy  {
  @JsonKey(name: 'CertPathValidationPolicyID')
final CertPathValidationPolicyID certPathValidationPolicyID;
  @JsonKey(name: 'Alias')
final String? alias;
  @JsonKey(name: 'Parameters')
final CertPathValidationParameters parameters;
  @JsonKey(name: 'TrustAnchor')
final TrustAnchor trustAnchor;
  CertPathValidationPolicy({
        required this.certPathValidationPolicyID,
        this.alias,
        required this.parameters,
        required this.trustAnchor,
  });
}

/// A list of RSA key lenghts in bits.
typedef RSAKeyLengths = List<int>;

/// A list of X.509 versions.
typedef X509Versions = List<int>;

/// A list of TLS versions.
typedef TLSVersions = List<String>;

/// A list of password based encryption algorithms.
typedef PasswordBasedEncryptionAlgorithms = List<String>;

/// A list of password based MAC algorithms.
typedef PasswordBasedMACAlgorithms = List<String>;

/// The capabilities of a keystore implementation on a device.
@JsonSerializable()
class KeystoreCapabilities  {
  /// The signature algorithms supported by the keystore implementation.
@JsonKey(name: 'SignatureAlgorithms')
final AlgorithmIdentifier? signatureAlgorithms;
  /// Indicates the maximum number of keys that the device can store simultaneously.
@JsonKey(name: 'MaximumNumberOfKeys')
final int maximumNumberOfKeys;
  /// Indicates the maximum number of certificates that the device can store simultaneously.
@JsonKey(name: 'MaximumNumberOfCertificates')
final int maximumNumberOfCertificates;
  /// Indicates the maximum number of certification paths that the device can store simultaneously.
@JsonKey(name: 'MaximumNumberOfCertificationPaths')
final int maximumNumberOfCertificationPaths;
  /// Indication that the device supports on-board RSA key pair generation.
@JsonKey(name: 'RSAKeyPairGeneration')
final bool rSAKeyPairGeneration;
  /// Indicates which RSA key lengths are supported by the device.
@JsonKey(name: 'RSAKeyLengths')
final RSAKeyLengths rSAKeyLengths;
  /// Indicates support for creating PKCS#10 requests for RSA keys and uploading the certificate obtained from a CA..
@JsonKey(name: 'PKCS10ExternalCertificationWithRSA')
final bool pKCS10ExternalCertificationWithRSA;
  /// Indicates support for creating self-signed certificates for RSA keys.
@JsonKey(name: 'SelfSignedCertificateCreationWithRSA')
final bool selfSignedCertificateCreationWithRSA;
  /// Indicates which X.509 versions are supported by the device.
@JsonKey(name: 'X509Versions')
final X509Versions x509Versions;
  /// Indicates the maximum number of passphrases that the device is able to store simultaneously.
@JsonKey(name: 'MaximumNumberOfPassphrases')
final int maximumNumberOfPassphrases;
  /// Indicates support for uploading an RSA key pair in a PKCS#8 data structure.
@JsonKey(name: 'PKCS8RSAKeyPairUpload')
final bool pKCS8RSAKeyPairUpload;
  /// Indicates support for uploading a certificate along with an RSA private key in a PKCS#12 data structure.
@JsonKey(name: 'PKCS12CertificateWithRSAPrivateKeyUpload')
final bool pKCS12CertificateWithRSAPrivateKeyUpload;
  /// Indicates which password-based encryption algorithms are supported by the device.
@JsonKey(name: 'PasswordBasedEncryptionAlgorithms')
final PasswordBasedEncryptionAlgorithms passwordBasedEncryptionAlgorithms;
  /// Indicates which password-based MAC algorithms are supported by the device.
@JsonKey(name: 'PasswordBasedMACAlgorithms')
final PasswordBasedMACAlgorithms passwordBasedMACAlgorithms;
  /// Indicates the maximum number of CRLs that the device is able to store simultaneously.
@JsonKey(name: 'MaximumNumberOfCRLs')
final int maximumNumberOfCRLs;
  /// Indicates the maximum number of certification path validation policies that the device is able to store simultaneously.
@JsonKey(name: 'MaximumNumberOfCertificationPathValidationPolicies')
final int maximumNumberOfCertificationPathValidationPolicies;
  /// Indicates whether a device supports checking for the TLS WWW client auth extended key usage extension while validating certification paths.
@JsonKey(name: 'EnforceTLSWebClientAuthExtKeyUsage')
final bool enforceTLSWebClientAuthExtKeyUsage;
  /// Indicates the device requires that each certificate with private key has its own unique key.
@JsonKey(name: 'NoPrivateKeySharing')
final bool noPrivateKeySharing;
  KeystoreCapabilities({
        this.signatureAlgorithms,
        required this.maximumNumberOfKeys,
        required this.maximumNumberOfCertificates,
        required this.maximumNumberOfCertificationPaths,
        required this.rSAKeyPairGeneration,
        required this.rSAKeyLengths,
        required this.pKCS10ExternalCertificationWithRSA,
        required this.selfSignedCertificateCreationWithRSA,
        required this.x509Versions,
        required this.maximumNumberOfPassphrases,
        required this.pKCS8RSAKeyPairUpload,
        required this.pKCS12CertificateWithRSAPrivateKeyUpload,
        required this.passwordBasedEncryptionAlgorithms,
        required this.passwordBasedMACAlgorithms,
        required this.maximumNumberOfCRLs,
        required this.maximumNumberOfCertificationPathValidationPolicies,
        required this.enforceTLSWebClientAuthExtKeyUsage,
        required this.noPrivateKeySharing,
  });
}

/// The capabilities of a TLS server implementation on a device.
@JsonSerializable()
class TLSServerCapabilities  {
  /// Indicates which TLS versions are supported by the device.
@JsonKey(name: 'TLSServerSupported')
final TLSVersions tLSServerSupported;
  /// Indicates whether the device supports enabling and disabling specific TLS versions.
@JsonKey(name: 'EnabledVersionsSupported')
final bool enabledVersionsSupported;
  /// Indicates the maximum number of certification paths that may be assigned to the TLS server simultaneously.
@JsonKey(name: 'MaximumNumberOfTLSCertificationPaths')
final int maximumNumberOfTLSCertificationPaths;
  /// Indicates whether the device supports TLS client authentication.
@JsonKey(name: 'TLSClientAuthSupported')
final bool tLSClientAuthSupported;
  /// Indicates the maximum number of certification path validation policies that may be assigned to the TLS server simultaneously.
@JsonKey(name: 'MaximumNumberOfTLSCertificationPathValidationPolicies')
final int maximumNumberOfTLSCertificationPathValidationPolicies;
  TLSServerCapabilities({
        required this.tLSServerSupported,
        required this.enabledVersionsSupported,
        required this.maximumNumberOfTLSCertificationPaths,
        required this.tLSClientAuthSupported,
        required this.maximumNumberOfTLSCertificationPathValidationPolicies,
  });
}

/// The capabilities of a Security Configuration Service implementation on a device.
@JsonSerializable()
class Capabilities  {
  /// The capabilities of the keystore implementation.
@JsonKey(name: 'KeystoreCapabilities')
final KeystoreCapabilities keystoreCapabilities;
  /// The capabilities of the TLS server implementation.
@JsonKey(name: 'TLSServerCapabilities')
final TLSServerCapabilities tLSServerCapabilities;
  /// The capabilities of the 802.1X implementation.
@JsonKey(name: 'Dot1XCapabilities')
final Dot1XCapabilities? dot1XCapabilities;
  Capabilities({
        required this.keystoreCapabilities,
        required this.tLSServerCapabilities,
        this.dot1XCapabilities,
  });
}

class GetServiceCapabilities {}
@JsonSerializable()
class GetServiceCapabilitiesResponse  {
  /// The capabilities for the security configuration service is returned in the Capabilities element.
@JsonKey(name: 'Capabilities')
final Capabilities capabilities;
  GetServiceCapabilitiesResponse({
        required this.capabilities,
  });
}

@JsonSerializable()
class CreateRSAKeyPair  {
  /// The length of the key to be created.
@JsonKey(name: 'KeyLength')
final int keyLength;
  /// The client-defined alias of the key.
@JsonKey(name: 'Alias')
final String? alias;
  CreateRSAKeyPair({
        required this.keyLength,
        this.alias,
  });
}

@JsonSerializable()
class CreateRSAKeyPairResponse  {
  /// The key ID of the key pair being generated.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  /// Best-effort estimate of how long the key generation will take.
@JsonKey(name: 'EstimatedCreationTime')
final Duration estimatedCreationTime;
  CreateRSAKeyPairResponse({
        required this.keyID,
        required this.estimatedCreationTime,
  });
}

@JsonSerializable()
class UploadKeyPairInPKCS8  {
  /// The key pair to be uploaded in a PKCS#8 data structure.
@JsonKey(name: 'KeyPair')
final Base64DERencodedASN1Value keyPair;
  /// The client-defined alias of the key pair.
@JsonKey(name: 'Alias')
final String? alias;
  /// The ID of the passphrase to use for decrypting the uploaded key pair.
@JsonKey(name: 'EncryptionPassphraseID')
final PassphraseID? encryptionPassphraseID;
  /// The passphrase to use for decrypting the uploaded key pair.
@JsonKey(name: 'EncryptionPassphrase')
final String? encryptionPassphrase;
  UploadKeyPairInPKCS8({
        required this.keyPair,
        this.alias,
        this.encryptionPassphraseID,
        this.encryptionPassphrase,
  });
}

@JsonSerializable()
class UploadKeyPairInPKCS8Response  {
  /// The key ID of the uploaded key pair.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  UploadKeyPairInPKCS8Response({
        required this.keyID,
  });
}

@JsonSerializable()
class UploadCertificateWithPrivateKeyInPKCS12  {
  /// The certificates and key pair to be uploaded in a PKCS#12 data structure.
@JsonKey(name: 'CertWithPrivateKey')
final Base64DERencodedASN1Value certWithPrivateKey;
  /// The client-defined alias of the certification path.
@JsonKey(name: 'CertificationPathAlias')
final String? certificationPathAlias;
  /// The client-defined alias of the key pair.
@JsonKey(name: 'KeyAlias')
final String? keyAlias;
  /// True if and only if the device shall behave as if the client had only supplied the first certificate in the sequence of certificates.
@JsonKey(name: 'IgnoreAdditionalCertificates')
final bool? ignoreAdditionalCertificates;
  /// The ID of the passphrase to use for integrity checking of the uploaded PKCS#12 data structure.
@JsonKey(name: 'IntegrityPassphraseID')
final PassphraseID? integrityPassphraseID;
  /// The ID of the passphrase to use for decrypting the uploaded PKCS#12 data structure.
@JsonKey(name: 'EncryptionPassphraseID')
final PassphraseID? encryptionPassphraseID;
  /// The passphrase to use for integrity checking and decrypting the uploaded PKCS#12 data structure.
@JsonKey(name: 'Passphrase')
final String? passphrase;
  UploadCertificateWithPrivateKeyInPKCS12({
        required this.certWithPrivateKey,
        this.certificationPathAlias,
        this.keyAlias,
        this.ignoreAdditionalCertificates,
        this.integrityPassphraseID,
        this.encryptionPassphraseID,
        this.passphrase,
  });
}

@JsonSerializable()
class UploadCertificateWithPrivateKeyInPKCS12Response  {
  /// The certification path ID of the uploaded certification path.
@JsonKey(name: 'CertificationPathID')
final CertificationPathID certificationPathID;
  /// The key ID of the uploaded key pair.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  UploadCertificateWithPrivateKeyInPKCS12Response({
        required this.certificationPathID,
        required this.keyID,
  });
}

@JsonSerializable()
class GetKeyStatus  {
  /// The ID of the key for which to return the status.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  GetKeyStatus({
        required this.keyID,
  });
}

@JsonSerializable()
class GetKeyStatusResponse  {
  /// Status of the requested key. The value should be one of the values in the tas:KeyStatus enumeration.
@JsonKey(name: 'KeyStatus')
final String keyStatus;
  GetKeyStatusResponse({
        required this.keyStatus,
  });
}

@JsonSerializable()
class GetPrivateKeyStatus  {
  /// The ID of the key pair for which to return whether it contains a private key.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  GetPrivateKeyStatus({
        required this.keyID,
  });
}

@JsonSerializable()
class GetPrivateKeyStatusResponse  {
  /// True if and only if the key pair contains a private key.
@JsonKey(name: 'hasPrivateKey')
final bool hasPrivateKey;
  GetPrivateKeyStatusResponse({
        required this.hasPrivateKey,
  });
}

class GetAllKeys {}
@JsonSerializable()
class GetAllKeysResponse  {
  /// Information about a key in the keystore.
@JsonKey(name: 'KeyAttribute')
final KeyAttribute? keyAttribute;
  GetAllKeysResponse({
        this.keyAttribute,
  });
}

@JsonSerializable()
class DeleteKey  {
  /// The ID of the key that is to be deleted from the keystore.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  DeleteKey({
        required this.keyID,
  });
}

class DeleteKeyResponse {}
@JsonSerializable()
class CreatePKCS10CSR  {
  /// The subject to be included in the CSR.
@JsonKey(name: 'Subject')
final DistinguishedName subject;
  /// The ID of the key for which the CSR shall be created.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  /// An attribute to be included in the CSR.
@JsonKey(name: 'CSRAttribute')
final CSRAttribute? cSRAttribute;
  /// The signature algorithm to be used to sign the CSR.
@JsonKey(name: 'SignatureAlgorithm')
final AlgorithmIdentifier signatureAlgorithm;
  CreatePKCS10CSR({
        required this.subject,
        required this.keyID,
        this.cSRAttribute,
        required this.signatureAlgorithm,
  });
}

@JsonSerializable()
class CreatePKCS10CSRResponse  {
  /// The DER encoded PKCS#10 certification request.
@JsonKey(name: 'PKCS10CSR')
final Base64DERencodedASN1Value pKCS10CSR;
  CreatePKCS10CSRResponse({
        required this.pKCS10CSR,
  });
}

@JsonSerializable()
class CreateSelfSignedCertificate  {
  /// The X.509 version that the generated certificate shall comply to.
@JsonKey(name: 'X509Version')
final int? x509Version;
  /// Distinguished name of the entity that the certificate shall belong to.
@JsonKey(name: 'Subject')
final DistinguishedName subject;
  /// The ID of the key for which the certificate shall be created.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  /// The client-defined alias of the certificate to be created.
@JsonKey(name: 'Alias')
final String? alias;
  /// The X.509 not valid before information to be included in the certificate. Defaults to the device's current time or a time before the device's current time.
@JsonKey(name: 'notValidBefore')
final DateTime? notValidBefore;
  /// The X.509 not valid after information to be included in the certificate. Defaults to the time 99991231235959Z as specified in RFC 5280.
@JsonKey(name: 'notValidAfter')
final DateTime? notValidAfter;
  /// The signature algorithm to be used for signing the certificate.
@JsonKey(name: 'SignatureAlgorithm')
final AlgorithmIdentifier signatureAlgorithm;
  /// An X.509v3 extension to be included in the certificate.
@JsonKey(name: 'Extension')
final X509v3Extension? extension_;
  CreateSelfSignedCertificate({
        this.x509Version,
        required this.subject,
        required this.keyID,
        this.alias,
        this.notValidBefore,
        this.notValidAfter,
        required this.signatureAlgorithm,
        this.extension_,
  });
}

@JsonSerializable()
class CreateSelfSignedCertificateResponse  {
  /// The ID of the generated certificate.
@JsonKey(name: 'CertificateID')
final CertificateID certificateID;
  CreateSelfSignedCertificateResponse({
        required this.certificateID,
  });
}

@JsonSerializable()
class UploadCertificate  {
  /// The base64-encoded DER representation of the X.509 certificate to be uploaded.
@JsonKey(name: 'Certificate')
final Base64DERencodedASN1Value certificate;
  /// The client-defined alias of the certificate.
@JsonKey(name: 'Alias')
final String? alias;
  /// The client-defined alias of the key pair.
@JsonKey(name: 'KeyAlias')
final String? keyAlias;
  /// Indicates if the device shall verify that a matching key pair with a private key exists in the keystore.
@JsonKey(name: 'PrivateKeyRequired')
final bool? privateKeyRequired;
  UploadCertificate({
        required this.certificate,
        this.alias,
        this.keyAlias,
        this.privateKeyRequired,
  });
}

@JsonSerializable()
class UploadCertificateResponse  {
  /// The ID of the uploaded certificate.
@JsonKey(name: 'CertificateID')
final CertificateID certificateID;
  /// The ID of the key that the uploaded certificate certifies.
@JsonKey(name: 'KeyID')
final KeyID keyID;
  UploadCertificateResponse({
        required this.certificateID,
        required this.keyID,
  });
}

@JsonSerializable()
class GetCertificate  {
  /// The ID of the certificate to retrieve.
@JsonKey(name: 'CertificateID')
final CertificateID certificateID;
  GetCertificate({
        required this.certificateID,
  });
}

@JsonSerializable()
class GetCertificateResponse  {
  /// The DER representation of the certificate.
@JsonKey(name: 'Certificate')
final X509Certificate certificate;
  GetCertificateResponse({
        required this.certificate,
  });
}

class GetAllCertificates {}
@JsonSerializable()
class GetAllCertificatesResponse  {
  /// A certificate stored in the keystore.
@JsonKey(name: 'Certificate')
final X509Certificate? certificate;
  GetAllCertificatesResponse({
        this.certificate,
  });
}

@JsonSerializable()
class DeleteCertificate  {
  /// The ID of the certificate to delete.
@JsonKey(name: 'CertificateID')
final CertificateID certificateID;
  DeleteCertificate({
        required this.certificateID,
  });
}

class DeleteCertificateResponse {}
@JsonSerializable()
class CreateCertificationPath  {
  /// The IDs of the certificates to include in the certification path, where each certificate signature except for the last one in the path must be verifiable with the public key certified by the next certificate in the path.
@JsonKey(name: 'CertificateIDs')
final CertificateIDs certificateIDs;
  /// The client-defined alias of the certification path.
@JsonKey(name: 'Alias')
final String? alias;
  CreateCertificationPath({
        required this.certificateIDs,
        this.alias,
  });
}

@JsonSerializable()
class CreateCertificationPathResponse  {
  /// The ID of the generated certification path.
@JsonKey(name: 'CertificationPathID')
final CertificationPathID certificationPathID;
  CreateCertificationPathResponse({
        required this.certificationPathID,
  });
}

@JsonSerializable()
class GetCertificationPath  {
  /// The ID of the certification path to retrieve.
@JsonKey(name: 'CertificationPathID')
final CertificationPathID certificationPathID;
  GetCertificationPath({
        required this.certificationPathID,
  });
}

@JsonSerializable()
class GetCertificationPathResponse  {
  /// The certification path that is stored under the given ID in the keystore.
@JsonKey(name: 'CertificationPath')
final CertificationPath certificationPath;
  GetCertificationPathResponse({
        required this.certificationPath,
  });
}

class GetAllCertificationPaths {}
@JsonSerializable()
class GetAllCertificationPathsResponse  {
  /// An ID of a certification path in the keystore.
@JsonKey(name: 'CertificationPathID')
final CertificationPathID? certificationPathID;
  GetAllCertificationPathsResponse({
        this.certificationPathID,
  });
}

@JsonSerializable()
class DeleteCertificationPath  {
  /// The ID of the certification path to delete.
@JsonKey(name: 'CertificationPathID')
final CertificationPathID certificationPathID;
  DeleteCertificationPath({
        required this.certificationPathID,
  });
}

class DeleteCertificationPathResponse {}
@JsonSerializable()
class UploadPassphrase  {
  /// The passphrase to upload.
@JsonKey(name: 'Passphrase')
final String passphrase;
  /// The alias for the passphrase to upload.
@JsonKey(name: 'PassphraseAlias')
final String? passphraseAlias;
  UploadPassphrase({
        required this.passphrase,
        this.passphraseAlias,
  });
}

@JsonSerializable()
class UploadPassphraseResponse  {
  /// The PassphraseID of the uploaded passphrase.
@JsonKey(name: 'PassphraseID')
final PassphraseID passphraseID;
  UploadPassphraseResponse({
        required this.passphraseID,
  });
}

class GetAllPassphrases {}
@JsonSerializable()
class GetAllPassphrasesResponse  {
  /// Information about a passphrase in the keystore.
@JsonKey(name: 'PassphraseAttribute')
final PassphraseAttribute? passphraseAttribute;
  GetAllPassphrasesResponse({
        this.passphraseAttribute,
  });
}

@JsonSerializable()
class DeletePassphrase  {
  /// The ID of the passphrase that is to be deleted from the keystore.
@JsonKey(name: 'PassphraseID')
final PassphraseID passphraseID;
  DeletePassphrase({
        required this.passphraseID,
  });
}

class DeletePassphraseResponse {}
@JsonSerializable()
class AddServerCertificateAssignment  {
  @JsonKey(name: 'CertificationPathID')
final CertificationPathID certificationPathID;
  AddServerCertificateAssignment({
        required this.certificationPathID,
  });
}

class AddServerCertificateAssignmentResponse {}
@JsonSerializable()
class RemoveServerCertificateAssignment  {
  @JsonKey(name: 'CertificationPathID')
final CertificationPathID certificationPathID;
  RemoveServerCertificateAssignment({
        required this.certificationPathID,
  });
}

class RemoveServerCertificateAssignmentResponse {}
@JsonSerializable()
class ReplaceServerCertificateAssignment  {
  @JsonKey(name: 'OldCertificationPathID')
final CertificationPathID oldCertificationPathID;
  @JsonKey(name: 'NewCertificationPathID')
final CertificationPathID newCertificationPathID;
  ReplaceServerCertificateAssignment({
        required this.oldCertificationPathID,
        required this.newCertificationPathID,
  });
}

class ReplaceServerCertificateAssignmentResponse {}
class GetAssignedServerCertificates {}
@JsonSerializable()
class GetAssignedServerCertificatesResponse  {
  /// The IDs of all certification paths that are assigned to the TLS server on the device.
@JsonKey(name: 'CertificationPathID')
final CertificationPathID? certificationPathID;
  GetAssignedServerCertificatesResponse({
        this.certificationPathID,
  });
}

@JsonSerializable()
class SetEnabledTLSVersions  {
  /// List of TLS versions to allow.
@JsonKey(name: 'Versions')
final TLSVersions versions;
  SetEnabledTLSVersions({
        required this.versions,
  });
}

class SetEnabledTLSVersionsResponse {}
class GetEnabledTLSVersions {}
@JsonSerializable()
class GetEnabledTLSVersionsResponse  {
  /// List of allowed TLS versions.
@JsonKey(name: 'Versions')
final TLSVersions versions;
  GetEnabledTLSVersionsResponse({
        required this.versions,
  });
}

@JsonSerializable()
class UploadCRL  {
  /// 
///                   The CRL to be uploaded to the device.
///                 
@JsonKey(name: 'Crl')
final Base64DERencodedASN1Value crl;
  /// 
///                   The alias to assign to the uploaded CRL.
///                 
@JsonKey(name: 'Alias')
final String? alias;
  UploadCRL({
        required this.crl,
        this.alias,
  });
}

@JsonSerializable()
class UploadCRLResponse  {
  /// 
///                   The ID of the uploaded CRL.
///                 
@JsonKey(name: 'CrlID')
final CRLID crlID;
  UploadCRLResponse({
        required this.crlID,
  });
}

@JsonSerializable()
class GetCRL  {
  /// 
///                   The ID of the CRL to be returned.
///                 
@JsonKey(name: 'CrlID')
final CRLID crlID;
  GetCRL({
        required this.crlID,
  });
}

@JsonSerializable()
class GetCRLResponse  {
  /// 
///                   The CRL with the requested ID.
///                 
@JsonKey(name: 'Crl')
final CRL crl;
  GetCRLResponse({
        required this.crl,
  });
}

class GetAllCRLs {}
@JsonSerializable()
class GetAllCRLsResponse  {
  /// 
///                   A list of all CRLs that are stored in the keystore on the device.
///                 
@JsonKey(name: 'Crl')
final CRL? crl;
  GetAllCRLsResponse({
        this.crl,
  });
}

@JsonSerializable()
class DeleteCRL  {
  /// 
///                   The ID of the CRL to be deleted.
///                 
@JsonKey(name: 'CrlID')
final CRLID crlID;
  DeleteCRL({
        required this.crlID,
  });
}

class DeleteCRLResponse {}
@JsonSerializable()
class CreateCertPathValidationPolicy  {
  /// 
///                   The alias to assign to the created certification path validation policy.
///                 
@JsonKey(name: 'Alias')
final String? alias;
  /// 
///                   The parameters of the certification path validation policy to be created.
///                 
@JsonKey(name: 'Parameters')
final CertPathValidationParameters parameters;
  /// 
///                   The trust anchors of the certification path validation policy to be created.
///                 
@JsonKey(name: 'TrustAnchor')
final TrustAnchor trustAnchor;
  CreateCertPathValidationPolicy({
        this.alias,
        required this.parameters,
        required this.trustAnchor,
  });
}

@JsonSerializable()
class CreateCertPathValidationPolicyResponse  {
  /// 
///                   The ID of the created certification path validation policy.
///                 
@JsonKey(name: 'CertPathValidationPolicyID')
final CertPathValidationPolicyID certPathValidationPolicyID;
  CreateCertPathValidationPolicyResponse({
        required this.certPathValidationPolicyID,
  });
}

@JsonSerializable()
class GetCertPathValidationPolicy  {
  /// 
///                   The ID of the certification path validation policy to be created.
///                 
@JsonKey(name: 'CertPathValidationPolicyID')
final CertPathValidationPolicyID certPathValidationPolicyID;
  GetCertPathValidationPolicy({
        required this.certPathValidationPolicyID,
  });
}

@JsonSerializable()
class GetCertPathValidationPolicyResponse  {
  /// 
///                   The certification path validation policy that is stored under the requested ID.
///                 
@JsonKey(name: 'CertPathValidationPolicy')
final CertPathValidationPolicy certPathValidationPolicy;
  GetCertPathValidationPolicyResponse({
        required this.certPathValidationPolicy,
  });
}

class GetAllCertPathValidationPolicies {}
@JsonSerializable()
class GetAllCertPathValidationPoliciesResponse  {
  /// 
///                   A list of all certification path validation policies that are stored in the keystore on the device.
///                 
@JsonKey(name: 'CertPathValidationPolicy')
final CertPathValidationPolicy? certPathValidationPolicy;
  GetAllCertPathValidationPoliciesResponse({
        this.certPathValidationPolicy,
  });
}

@JsonSerializable()
class DeleteCertPathValidationPolicy  {
  /// 
///                   The ID of the certification path validation policy to be deleted.
///                 
@JsonKey(name: 'CertPathValidationPolicyID')
final CertPathValidationPolicyID certPathValidationPolicyID;
  DeleteCertPathValidationPolicy({
        required this.certPathValidationPolicyID,
  });
}

class DeleteCertPathValidationPolicyResponse {}
@JsonSerializable()
class SetClientAuthenticationRequired  {
  @JsonKey(name: 'clientAuthenticationRequired')
final bool clientAuthenticationRequired;
  SetClientAuthenticationRequired({
        required this.clientAuthenticationRequired,
  });
}

class SetClientAuthenticationRequiredResponse {}
class GetClientAuthenticationRequired {}
@JsonSerializable()
class GetClientAuthenticationRequiredResponse  {
  @JsonKey(name: 'clientAuthenticationRequired')
final bool clientAuthenticationRequired;
  GetClientAuthenticationRequiredResponse({
        required this.clientAuthenticationRequired,
  });
}

@JsonSerializable()
class AddCertPathValidationPolicyAssignment  {
  /// 
///                   The ID of the certification path validation policy to assign to the TLS server.
///                 
@JsonKey(name: 'CertPathValidationPolicyID')
final CertPathValidationPolicyID certPathValidationPolicyID;
  AddCertPathValidationPolicyAssignment({
        required this.certPathValidationPolicyID,
  });
}

class AddCertPathValidationPolicyAssignmentResponse {}
@JsonSerializable()
class RemoveCertPathValidationPolicyAssignment  {
  /// 
///                   The ID of the certification path validation policy to de-assign from the TLS server.
///                 
@JsonKey(name: 'CertPathValidationPolicyID')
final CertPathValidationPolicyID certPathValidationPolicyID;
  RemoveCertPathValidationPolicyAssignment({
        required this.certPathValidationPolicyID,
  });
}

class RemoveCertPathValidationPolicyAssignmentResponse {}
@JsonSerializable()
class ReplaceCertPathValidationPolicyAssignment  {
  /// 
///                   The ID of the certification path validation policy to be de-assigned from the TLS server.
///                 
@JsonKey(name: 'OldCertPathValidationPolicyID')
final CertPathValidationPolicyID oldCertPathValidationPolicyID;
  /// 
///                   The ID of the certification path validation policy to assign to the TLS server.
///                 
@JsonKey(name: 'NewCertPathValidationPolicyID')
final CertPathValidationPolicyID newCertPathValidationPolicyID;
  ReplaceCertPathValidationPolicyAssignment({
        required this.oldCertPathValidationPolicyID,
        required this.newCertPathValidationPolicyID,
  });
}

class ReplaceCertPathValidationPolicyAssignmentResponse {}
class GetAssignedCertPathValidationPolicies {}
@JsonSerializable()
class GetAssignedCertPathValidationPoliciesResponse  {
  /// 
///                   A list of IDs of the certification path validation policies that are assigned to the TLS server.
///                 
@JsonKey(name: 'CertPathValidationPolicyID')
final CertPathValidationPolicyID? certPathValidationPolicyID;
  GetAssignedCertPathValidationPoliciesResponse({
        this.certPathValidationPolicyID,
  });
}

@JsonSerializable()
class AddDot1XConfiguration  {
  /// The desired 802.1X configuration.
@JsonKey(name: 'Dot1XConfiguration')
final Dot1XConfiguration dot1XConfiguration;
  AddDot1XConfiguration({
        required this.dot1XConfiguration,
  });
}

@JsonSerializable()
class AddDot1XConfigurationResponse  {
  /// The unique identifier of the created 802.1X configuration.
@JsonKey(name: 'Dot1XID')
final Dot1XID dot1XID;
  AddDot1XConfigurationResponse({
        required this.dot1XID,
  });
}

class GetAllDot1XConfigurations {}
@JsonSerializable()
class GetAllDot1XConfigurationsResponse  {
  /// The list of unique identifiers of 802.1X configurations on the device.
@JsonKey(name: 'Configuration')
final Dot1XConfiguration? configuration;
  GetAllDot1XConfigurationsResponse({
        this.configuration,
  });
}

@JsonSerializable()
class GetDot1XConfiguration  {
  /// The unique identifier of the desired 802.1X configuration.
@JsonKey(name: 'Dot1XID')
final Dot1XID dot1XID;
  GetDot1XConfiguration({
        required this.dot1XID,
  });
}

@JsonSerializable()
class GetDot1XConfigurationResponse  {
  /// The 802.1X configuration, without password information.
@JsonKey(name: 'Dot1XConfiguration')
final Dot1XConfiguration dot1XConfiguration;
  GetDot1XConfigurationResponse({
        required this.dot1XConfiguration,
  });
}

@JsonSerializable()
class DeleteDot1XConfiguration  {
  /// The unique identifier of the 802.1X configuration to be deleted.
@JsonKey(name: 'Dot1XID')
final Dot1XID dot1XID;
  DeleteDot1XConfiguration({
        required this.dot1XID,
  });
}

class DeleteDot1XConfigurationResponse {}
@JsonSerializable()
class SetNetworkInterfaceDot1XConfiguration  {
  /// The unique identifier of the Network Interface on which the 802.1X configuration is to be set. (NOTE: the network interface token is defined in devicemgmt.wsdl as tt:ReferenceToken, which is a derived type of xs:string.  To avoid importing all of common.xsd for this single type, the base type is used here.)
@JsonKey(name: 'token')
final String token;
  /// The unique identifier of the 802.1X configuration to be set.
@JsonKey(name: 'Dot1XID')
final Dot1XID dot1XID;
  SetNetworkInterfaceDot1XConfiguration({
        required this.token,
        required this.dot1XID,
  });
}

@JsonSerializable()
class SetNetworkInterfaceDot1XConfigurationResponse  {
  /// Indicates whether or not a reboot is required after configuration updates.
@JsonKey(name: 'RebootNeeded')
final bool rebootNeeded;
  SetNetworkInterfaceDot1XConfigurationResponse({
        required this.rebootNeeded,
  });
}

@JsonSerializable()
class GetNetworkInterfaceDot1XConfiguration  {
  /// The unique identifier of the Network Interface for which the 802.1X configuration is to be retrieved. (NOTE: the network interface token is defined in devicemgmt.wsdl as tt:ReferenceToken, which is a derived type of xs:string.  To avoid importing all of common.xsd for this single type, the base type is used here.)
@JsonKey(name: 'token')
final String token;
  GetNetworkInterfaceDot1XConfiguration({
        required this.token,
  });
}

@JsonSerializable()
class GetNetworkInterfaceDot1XConfigurationResponse  {
  /// The unique identifier of 802.1X configuration assigned to the Network Interface.
@JsonKey(name: 'Dot1XID')
final Dot1XID? dot1XID;
  GetNetworkInterfaceDot1XConfigurationResponse({
        this.dot1XID,
  });
}

@JsonSerializable()
class DeleteNetworkInterfaceDot1XConfiguration  {
  /// The unique identifier of the Network Interface for which the 802.1X configuration is to be deleted. (NOTE: the network interface token is defined in devicemgmt.wsdl as tt:ReferenceToken, which is a derived type of xs:string.  To avoid importing all of common.xsd for this single type, the base type is used here.)
@JsonKey(name: 'token')
final String token;
  DeleteNetworkInterfaceDot1XConfiguration({
        required this.token,
  });
}

@JsonSerializable()
class DeleteNetworkInterfaceDot1XConfigurationResponse  {
  /// Indicates whether or not a reboot is required after configuration updates.
@JsonKey(name: 'RebootNeeded')
final bool rebootNeeded;
  DeleteNetworkInterfaceDot1XConfigurationResponse({
        required this.rebootNeeded,
  });
}

