import '../addressing/addressing.dart';
/// GENERATED BY OZIBABA
import 'dart:typed_data';
import 'package:json_annotation/json_annotation.dart';

class HelloType {}
enum RelationshipType {
  @JsonValue("tns:Suppression")
  Suppression,
}


class ByeType {}
class ProbeType {}
@JsonSerializable()
class ProbeMatchesType  {
  @JsonKey(name: 'ProbeMatch')
final ProbeMatchType? probeMatch;
  ProbeMatchesType({
        this.probeMatch,
  });
}

class ProbeMatchType {}
class ResolveType {}
@JsonSerializable()
class ResolveMatchesType  {
  @JsonKey(name: 'ResolveMatch')
final ResolveMatchType? resolveMatch;
  ResolveMatchesType({
        this.resolveMatch,
  });
}

class ResolveMatchType {}
typedef QNameListType = List<String>;

@JsonSerializable()
class ScopesType  {
  @JsonKey(name: 'value')
final UriListType value;
  @JsonKey(name: 'MatchBy')
final String matchBy;
  ScopesType({
        required this.value,
        required this.matchBy,
  });
}

typedef UriListType = List<String>;

enum FaultCodeType {
  @JsonValue("tns:MatchingRuleNotSupported")
  MatchingRuleNotSupported,
}


class SecurityType {}
@JsonSerializable()
class SigType  {
  @JsonKey(name: 'Scheme')
final String scheme;
  @JsonKey(name: 'KeyId')
final Uint8List keyId;
  @JsonKey(name: 'Refs')
final List<String> refs;
  @JsonKey(name: 'Sig')
final Uint8List sig;
  SigType({
        required this.scheme,
        required this.keyId,
        required this.refs,
        required this.sig,
  });
}

class AppSequenceType {}
